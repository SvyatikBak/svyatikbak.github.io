--- net/minecraft/src/ItemSpade.java
+++ net/minecraft/src/ItemSpade.java
@@ -1,7 +1,7 @@
 package net.minecraft.src;
 
 public class ItemSpade extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.grass, Block.dirt, Block.sand, Block.gravel, Block.snow, Block.blockSnow, Block.blockClay};
+	private static Block[] blocksEffectiveAgainst = new Block[]{Block.grass, Block.dirt, Block.sand, Block.gravel, Block.snow, Block.blockSnow, Block.blockClay, Block.moss, Block.blockPinkClay};
 
 	public ItemSpade(int var1, int var2) {
 		super(var1, 1, var2, blocksEffectiveAgainst);
--- net/minecraft/src/World.java
+++ net/minecraft/src/World.java
@@ -48,27 +48,34 @@
 	private NBTTagCompound nbtCompoundPlayer;
 	public long sizeOnDisk;
 	public final String levelName;
-	public boolean worldChunkLoadOverride;
+	public boolean xx;
 	private ArrayList collidingBoundingBoxes;
-	private Set positionsToUpdate;
+	private Set<ChunkCoordIntPair> positionsToUpdate;
 	private int soundCounter;
 	private List entitiesWithinAABBExcludingEntity;
 	public boolean multiplayerWorld;
 
-	public static NBTTagCompound getLevelData(File var0, String var1) {
-		File var2 = new File(var0, "saves");
-		File var3 = new File(var2, var1);
-		if(!var3.exists()) {
+	static {
+		float n = 0.05F;
+
+		for(int i = 0; i <= 15; ++i) {
+			float n2 = 1.0F - (float)i / 15.0F;
+			lightBrightnessTable[i] = (1.0F - n2) / (n2 * 3.0F + 1.0F) * 0.95F + 0.05F;
+		}
+
+	}
+
+	public static NBTTagCompound getLevelData(File parent, String child) {
+		File parent2 = new File(new File(parent, "sbmf_saves"), child);
+		if(!parent2.exists()) {
 			return null;
 		} else {
-			File var4 = new File(var3, "level.dat");
-			if(var4.exists()) {
+			File file = new File(parent2, "level.dat");
+			if(file.exists()) {
 				try {
-					NBTTagCompound var5 = CompressedStreamTools.readCompressed(new FileInputStream(var4));
-					NBTTagCompound var6 = var5.getCompoundTag("Data");
-					return var6;
-				} catch (Exception var7) {
-					var7.printStackTrace();
+					return CompressedStreamTools.readCompressed(new FileInputStream(file)).getCompoundTag("Data");
+				} catch (Exception var5) {
+					var5.printStackTrace();
 				}
 			}
 
@@ -76,31 +83,30 @@
 		}
 	}
 
-	public static void deleteWorld(File var0, String var1) {
-		File var2 = new File(var0, "saves");
-		File var3 = new File(var2, var1);
-		if(var3.exists()) {
-			deleteWorldFiles(var3.listFiles());
-			var3.delete();
+	public static void deleteWorld(File parent, String child) {
+		File file = new File(new File(parent, "sbmf_saves"), child);
+		if(file.exists()) {
+			deleteWorldFiles(file.listFiles());
+			file.delete();
 		}
 	}
 
-	private static void deleteWorldFiles(File[] var0) {
-		for(int var1 = 0; var1 < var0.length; ++var1) {
-			if(var0[var1].isDirectory()) {
-				deleteWorldFiles(var0[var1].listFiles());
+	private static void deleteWorldFiles(File[] array) {
+		for(int i = 0; i < array.length; ++i) {
+			if(array[i].isDirectory()) {
+				deleteWorldFiles(array[i].listFiles());
 			}
 
-			var0[var1].delete();
+			array[i].delete();
 		}
 
 	}
 
-	public World(File var1, String var2) {
-		this(var1, var2, (new Random()).nextLong());
+	public World(File file, String s) {
+		this(file, s, (new Random()).nextLong());
 	}
 
-	public World(String var1) {
+	public World(String w) {
 		this.lightingToUpdate = new ArrayList();
 		this.loadedEntityList = new ArrayList();
 		this.unloadedEntityList = new ArrayList();
@@ -129,12 +135,12 @@
 		this.soundCounter = this.rand.nextInt(12000);
 		this.entitiesWithinAABBExcludingEntity = new ArrayList();
 		this.multiplayerWorld = false;
-		this.levelName = var1;
+		this.levelName = w;
 		this.chunkProvider = this.getChunkProvider(this.saveDirectory);
 		this.calculateInitialSkylight();
 	}
 
-	public World(File var1, String var2, long var3) {
+	public World(File parent, String s, long u) {
 		this.lightingToUpdate = new ArrayList();
 		this.loadedEntityList = new ArrayList();
 		this.unloadedEntityList = new ArrayList();
@@ -163,57 +169,53 @@
 		this.soundCounter = this.rand.nextInt(12000);
 		this.entitiesWithinAABBExcludingEntity = new ArrayList();
 		this.multiplayerWorld = false;
-		this.levelName = var2;
-		var1.mkdirs();
-		this.saveDirectory = new File(var1, var2);
-		this.saveDirectory.mkdirs();
+		this.levelName = s;
+		parent.mkdirs();
+		(this.saveDirectory = new File(parent, s)).mkdirs();
 
-		File var5;
 		try {
-			var5 = new File(this.saveDirectory, "session.lock");
-			DataOutputStream var6 = new DataOutputStream(new FileOutputStream(var5));
+			DataOutputStream file = new DataOutputStream(new FileOutputStream(new File(this.saveDirectory, "session.lock")));
 
 			try {
-				var6.writeLong(this.lockTimestamp);
+				file.writeLong(this.lockTimestamp);
 			} finally {
-				var6.close();
+				file.close();
 			}
-		} catch (IOException var13) {
+		} catch (IOException var12) {
 			throw new RuntimeException("Failed to check session lock, aborting");
 		}
 
-		var5 = new File(this.saveDirectory, "level.dat");
-		this.isNewWorld = !var5.exists();
-		if(var5.exists()) {
+		File file1 = new File(this.saveDirectory, "level.dat");
+		this.isNewWorld = !file1.exists();
+		if(file1.exists()) {
 			try {
-				NBTTagCompound var14 = CompressedStreamTools.readCompressed(new FileInputStream(var5));
-				NBTTagCompound var7 = var14.getCompoundTag("Data");
-				this.randomSeed = var7.getLong("RandomSeed");
-				this.spawnX = var7.getInteger("SpawnX");
-				this.spawnY = var7.getInteger("SpawnY");
-				this.spawnZ = var7.getInteger("SpawnZ");
-				this.worldTime = var7.getLong("Time");
-				this.sizeOnDisk = var7.getLong("SizeOnDisk");
-				this.snowCovered = var7.getBoolean("SnowCovered");
-				if(var7.hasKey("Player")) {
-					this.nbtCompoundPlayer = var7.getCompoundTag("Player");
+				NBTTagCompound b = CompressedStreamTools.readCompressed(new FileInputStream(file1)).getCompoundTag("Data");
+				this.randomSeed = b.getLong("RandomSeed");
+				this.spawnX = b.getInteger("SpawnX");
+				this.spawnY = b.getInteger("SpawnY");
+				this.spawnZ = b.getInteger("SpawnZ");
+				this.worldTime = b.getLong("Time");
+				this.sizeOnDisk = b.getLong("SizeOnDisk");
+				this.snowCovered = b.getBoolean("SnowCovered");
+				if(b.hasKey("Player")) {
+					this.nbtCompoundPlayer = b.getCompoundTag("Player");
 				}
-			} catch (Exception var11) {
-				var11.printStackTrace();
+			} catch (Exception var10) {
+				var10.printStackTrace();
 			}
 		} else {
 			this.snowCovered = this.rand.nextInt(4) == 0;
 		}
 
-		boolean var15 = false;
+		boolean b1 = false;
 		if(this.randomSeed == 0L) {
-			this.randomSeed = var3;
-			var15 = true;
+			this.randomSeed = u;
+			b1 = true;
 		}
 
 		this.chunkProvider = this.getChunkProvider(this.saveDirectory);
-		if(var15) {
-			this.worldChunkLoadOverride = true;
+		if(b1) {
+			this.xx = true;
 			this.spawnX = 0;
 			this.spawnY = 64;
 
@@ -221,14 +223,14 @@
 				this.spawnX += this.rand.nextInt(64) - this.rand.nextInt(64);
 			}
 
-			this.worldChunkLoadOverride = false;
+			this.xx = false;
 		}
 
 		this.calculateInitialSkylight();
 	}
 
-	protected IChunkProvider getChunkProvider(File var1) {
-		return new ChunkProviderLoadOrGenerate(this, new ChunkLoader(var1, true), new ChunkProviderGenerate(this, this.randomSeed));
+	protected IChunkProvider getChunkProvider(File file) {
+		return new ChunkProviderLoadOrGenerate(this, new ChunkLoader(file, true), new ChunkProviderGenerate(this, this.randomSeed));
 	}
 
 	public void setSpawnLocation() {
@@ -243,91 +245,90 @@
 
 	}
 
-	private boolean findSpawn(int var1, int var2) {
-		int var3 = this.getFirstUncoveredBlock(var1, var2);
-		return var3 == Block.sand.blockID;
+	private boolean findSpawn(int n, int n2) {
+		return this.getFirstUncoveredBlock(n, n2) == Block.sand.blockID;
 	}
 
-	private int getFirstUncoveredBlock(int var1, int var2) {
-		int var3;
-		for(var3 = 63; this.getBlockId(var1, var3 + 1, var2) != 0; ++var3) {
+	private int getFirstUncoveredBlock(int n, int n2) {
+		int n3;
+		for(n3 = 63; this.getBlockId(n, n3 + 1, n2) != 0; ++n3) {
 		}
 
-		return this.getBlockId(var1, var3, var2);
+		return this.getBlockId(n, n3, n2);
 	}
 
-	public void spawnPlayerWithLoadedChunks(EntityPlayer var1) {
+	public void spawnPlayerWithLoadedChunks(EntityPlayer dm) {
 		try {
 			if(this.nbtCompoundPlayer != null) {
-				var1.readFromNBT(this.nbtCompoundPlayer);
+				dm.readFromNBT(this.nbtCompoundPlayer);
 				this.nbtCompoundPlayer = null;
 			}
 
-			this.spawnEntityInWorld(var1);
+			this.spawnEntityInWorld(dm);
 		} catch (Exception var3) {
 			var3.printStackTrace();
 		}
 
 	}
 
-	public void saveWorld(boolean var1, IProgressUpdate var2) {
+	public void saveWorld(boolean b, IProgressUpdate nu) {
 		if(this.chunkProvider.canSave()) {
-			if(var2 != null) {
-				var2.displayProgressMessage("Saving level");
+			if(nu != null) {
+				nu.displayProgressMessage("Saving level");
 			}
 
 			this.saveLevel();
-			if(var2 != null) {
-				var2.displayLoadingString("Saving chunks");
+			if(nu != null) {
+				nu.displayLoadingString("Saving chunks");
 			}
 
-			this.chunkProvider.saveChunks(var1, var2);
+			this.chunkProvider.saveChunks(b, nu);
 		}
 	}
 
 	private void saveLevel() {
 		this.checkSessionLock();
-		NBTTagCompound var1 = new NBTTagCompound();
-		var1.setLong("RandomSeed", this.randomSeed);
-		var1.setInteger("SpawnX", this.spawnX);
-		var1.setInteger("SpawnY", this.spawnY);
-		var1.setInteger("SpawnZ", this.spawnZ);
-		var1.setLong("Time", this.worldTime);
-		var1.setLong("SizeOnDisk", this.sizeOnDisk);
-		var1.setBoolean("SnowCovered", this.snowCovered);
-		var1.setLong("LastPlayed", System.currentTimeMillis());
-		EntityPlayer var2 = null;
+		NBTTagCompound hm = new NBTTagCompound();
+		hm.setLong("RandomSeed", this.randomSeed);
+		hm.setInteger("SpawnX", this.spawnX);
+		hm.setInteger("SpawnY", this.spawnY);
+		hm.setInteger("SpawnZ", this.spawnZ);
+		hm.setLong("Time", this.worldTime);
+		hm.setLong("SizeOnDisk", this.sizeOnDisk);
+		hm.setBoolean("SnowCovered", this.snowCovered);
+		hm.setLong("LastPlayed", System.currentTimeMillis());
+		Entity kh = null;
 		if(this.playerEntities.size() > 0) {
-			var2 = (EntityPlayer)this.playerEntities.get(0);
-		}
-
-		NBTTagCompound var3;
-		if(var2 != null) {
-			var3 = new NBTTagCompound();
-			var2.writeToNBT(var3);
-			var1.setCompoundTag("Player", var3);
-		}
-
-		var3 = new NBTTagCompound();
-		var3.setTag("Data", var1);
+			kh = (Entity)this.playerEntities.get(0);
+		}
+
+		NBTTagCompound hm3;
+		if(kh != null) {
+			hm3 = new NBTTagCompound();
+			kh.writeToNBT(hm3);
+			hm.setCompoundTag("Player", hm3);
+		}
+
+		hm3 = new NBTTagCompound();
+		hm3.setTag("Data", hm);
 
 		try {
-			File var4 = new File(this.saveDirectory, "level.dat_new");
-			File var5 = new File(this.saveDirectory, "level.dat_old");
-			File var6 = new File(this.saveDirectory, "level.dat");
-			CompressedStreamTools.writeCompressed(var3, new FileOutputStream(var4));
-			if(var5.exists()) {
-				var5.delete();
-			}
-
-			var6.renameTo(var5);
-			if(var6.exists()) {
-				var6.delete();
-			}
-
-			var4.renameTo(var6);
-			if(var4.exists()) {
-				var4.delete();
+			File ex = new File(this.saveDirectory, "level.dat_new");
+			File dest = new File(this.saveDirectory, "level.dat_old");
+			File dest2 = new File(this.saveDirectory, "level.dat");
+			CompressedStreamTools.writeCompressed(hm3, new FileOutputStream(ex));
+			if(dest.exists()) {
+				dest.delete();
+			}
+
+			dest2.renameTo(dest);
+			if(dest2.exists()) {
+				dest2.delete();
+			}
+
+			ex.renameTo(dest2);
+			if(ex.exists()) {
+				ex.delete();
 			}
 		} catch (Exception var7) {
 			var7.printStackTrace();
@@ -335,11 +336,11 @@
 
 	}
 
-	public boolean saveWorld(int var1) {
+	public boolean saveWorld(int n) {
 		if(!this.chunkProvider.canSave()) {
 			return true;
 		} else {
-			if(var1 == 0) {
+			if(n == 0) {
 				this.saveLevel();
 			}
 
@@ -347,26 +348,26 @@
 		}
 	}
 
-	public int getBlockId(int var1, int var2, int var3) {
-		return var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000 ? (var2 < 0 ? 0 : (var2 >= 128 ? 0 : this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).getBlockID(var1 & 15, var2, var3 & 15))) : 0;
-	}
-
-	public boolean blockExists(int var1, int var2, int var3) {
-		return var2 >= 0 && var2 < 128 ? this.chunkExists(var1 >> 4, var3 >> 4) : false;
-	}
-
-	public boolean checkChunksExist(int var1, int var2, int var3, int var4, int var5, int var6) {
-		if(var5 >= 0 && var2 < 128) {
-			var1 >>= 4;
-			var2 >>= 4;
-			var3 >>= 4;
-			var4 >>= 4;
-			var5 >>= 4;
-			var6 >>= 4;
-
-			for(int var7 = var1; var7 <= var4; ++var7) {
-				for(int var8 = var3; var8 <= var6; ++var8) {
-					if(!this.chunkExists(var7, var8)) {
+	public int getBlockId(int n, int n2, int n3) {
+		return n >= -32000000 && n3 >= -32000000 && n < 32000000 && n3 <= 32000000 ? (n2 < 0 ? 0 : (n2 >= 128 ? 0 : this.getChunkFromChunkCoords(n >> 4, n3 >> 4).getBlockID(n & 15, n2, n3 & 15))) : 0;
+	}
+
+	public boolean blockExists(int n, int n2, int n3) {
+		return n2 >= 0 && n2 < 128 && this.chunkExists(n >> 4, n3 >> 4);
+	}
+
+	public boolean checkChunksExist(int n, int n2, int n3, int n4, int n5, int n6) {
+		if(n5 >= 0 && n2 < 128) {
+			n >>= 4;
+			n2 >>= 4;
+			n3 >>= 4;
+			n4 >>= 4;
+			n5 >>= 4;
+			n6 >>= 4;
+
+			for(int i = n; i <= n4; ++i) {
+				for(int j = n3; j <= n6; ++j) {
+					if(!this.chunkExists(i, j)) {
 						return false;
 					}
 				}
@@ -378,85 +379,63 @@
 		}
 	}
 
-	private boolean chunkExists(int var1, int var2) {
-		return this.chunkProvider.chunkExists(var1, var2);
-	}
-
-	public Chunk getChunkFromBlockCoords(int var1, int var2) {
-		return this.getChunkFromChunkCoords(var1 >> 4, var2 >> 4);
-	}
-
-	public Chunk getChunkFromChunkCoords(int var1, int var2) {
-		return this.chunkProvider.provideChunk(var1, var2);
-	}
-
-	public boolean setBlockAndMetadata(int var1, int var2, int var3, int var4, int var5) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
-			if(var2 < 0) {
-				return false;
-			} else if(var2 >= 128) {
-				return false;
-			} else {
-				Chunk var6 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-				return var6.setBlockIDWithMetadata(var1 & 15, var2, var3 & 15, var4, var5);
-			}
-		} else {
-			return false;
-		}
-	}
-
-	public boolean setBlock(int var1, int var2, int var3, int var4) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
-			if(var2 < 0) {
-				return false;
-			} else if(var2 >= 128) {
-				return false;
-			} else {
-				Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-				return var5.setBlockID(var1 & 15, var2, var3 & 15, var4);
-			}
-		} else {
-			return false;
-		}
-	}
-
-	public Material getBlockMaterial(int var1, int var2, int var3) {
-		int var4 = this.getBlockId(var1, var2, var3);
-		return var4 == 0 ? Material.air : Block.blocksList[var4].material;
-	}
-
-	public int getBlockMetadata(int var1, int var2, int var3) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
-			if(var2 < 0) {
-				return 0;
-			} else if(var2 >= 128) {
-				return 0;
-			} else {
-				Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-				var1 &= 15;
-				var3 &= 15;
-				return var4.getBlockMetadata(var1, var2, var3);
+	private boolean chunkExists(int n, int n2) {
+		return this.chunkProvider.chunkExists(n, n2);
+	}
+
+	public Chunk getChunkFromBlockCoords(int n, int n2) {
+		return this.getChunkFromChunkCoords(n >> 4, n2 >> 4);
+	}
+
+	public Chunk getChunkFromChunkCoords(int n, int n2) {
+		return this.chunkProvider.provideChunk(n, n2);
+	}
+
+	public boolean setBlockAndMetadata(int n, int n2, int n3, int n4, int n5) {
+		return n >= -32000000 && n3 >= -32000000 && n < 32000000 && n3 <= 32000000 && n2 >= 0 && n2 < 128 && this.getChunkFromChunkCoords(n >> 4, n3 >> 4).setBlockIDWithMetadata(n & 15, n2, n3 & 15, n4, n5);
+	}
+
+	public boolean setBlock(int n, int n2, int n3, int n4) {
+		return n >= -32000000 && n3 >= -32000000 && n < 32000000 && n3 <= 32000000 && n2 >= 0 && n2 < 128 && this.getChunkFromChunkCoords(n >> 4, n3 >> 4).setBlockID(n & 15, n2, n3 & 15, n4);
+	}
+
+	public Material getBlockMaterial(int n, int n2, int n3) {
+		int a = this.getBlockId(n, n2, n3);
+		return a == 0 ? Material.air : Block.blocksList[a].material;
+	}
+
+	public int getBlockMetadata(int n, int n2, int n3) {
+		if(n >= -32000000 && n3 >= -32000000 && n < 32000000 && n3 <= 32000000) {
+			if(n2 < 0) {
+				return 0;
+			} else if(n2 >= 128) {
+				return 0;
+			} else {
+				Chunk b = this.getChunkFromChunkCoords(n >> 4, n3 >> 4);
+				n &= 15;
+				n3 &= 15;
+				return b.getBlockMetadata(n, n2, n3);
 			}
 		} else {
 			return 0;
 		}
 	}
 
-	public void setBlockMetadataWithNotify(int var1, int var2, int var3, int var4) {
-		this.setBlockMetadata(var1, var2, var3, var4);
+	public void setBlockMetadataWithNotify(int n, int n2, int n3, int n4) {
+		this.setBlockMetadata(n, n2, n3, n4);
 	}
 
-	public boolean setBlockMetadata(int var1, int var2, int var3, int var4) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
-			if(var2 < 0) {
+	public boolean setBlockMetadata(int n, int n2, int n3, int n4) {
+		if(n >= -32000000 && n3 >= -32000000 && n < 32000000 && n3 <= 32000000) {
+			if(n2 < 0) {
 				return false;
-			} else if(var2 >= 128) {
+			} else if(n2 >= 128) {
 				return false;
 			} else {
-				Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-				var1 &= 15;
-				var3 &= 15;
-				var5.setBlockMetadata(var1, var2, var3, var4);
+				Chunk b = this.getChunkFromChunkCoords(n >> 4, n3 >> 4);
+				n &= 15;
+				n3 &= 15;
+				b.setBlockMetadata(n, n2, n3, n4);
 				return true;
 			}
 		} else {
@@ -464,208 +443,193 @@
 		}
 	}
 
-	public boolean setBlockWithNotify(int var1, int var2, int var3, int var4) {
-		if(this.setBlock(var1, var2, var3, var4)) {
-			this.notifyBlockChange(var1, var2, var3, var4);
-			return true;
-		} else {
-			return false;
-		}
-	}
-
-	public boolean setBlockAndMetadataWithNotify(int var1, int var2, int var3, int var4, int var5) {
-		if(this.setBlockAndMetadata(var1, var2, var3, var4, var5)) {
-			this.notifyBlockChange(var1, var2, var3, var4);
-			return true;
-		} else {
-			return false;
-		}
-	}
-
-	public void markBlockNeedsUpdate(int var1, int var2, int var3) {
-		for(int var4 = 0; var4 < this.worldAccesses.size(); ++var4) {
-			((IWorldAccess)this.worldAccesses.get(var4)).markBlockAndNeighborsNeedsUpdate(var1, var2, var3);
-		}
-
-	}
-
-	protected void notifyBlockChange(int var1, int var2, int var3, int var4) {
-		this.markBlockNeedsUpdate(var1, var2, var3);
-		this.notifyBlocksOfNeighborChange(var1, var2, var3, var4);
-	}
-
-	public void markBlocksDirtyVertical(int var1, int var2, int var3, int var4) {
-		if(var3 > var4) {
-			int var5 = var4;
-			var4 = var3;
-			var3 = var5;
-		}
-
-		this.markBlocksDirty(var1, var3, var2, var1, var4, var2);
-	}
-
-	public void markBlocksDirty(int var1, int var2, int var3, int var4, int var5, int var6) {
-		for(int var7 = 0; var7 < this.worldAccesses.size(); ++var7) {
-			((IWorldAccess)this.worldAccesses.get(var7)).markBlockRangeNeedsUpdate(var1, var2, var3, var4, var5, var6);
-		}
-
-	}
-
-	public void notifyBlocksOfNeighborChange(int var1, int var2, int var3, int var4) {
-		this.notifyBlockOfNeighborChange(var1 - 1, var2, var3, var4);
-		this.notifyBlockOfNeighborChange(var1 + 1, var2, var3, var4);
-		this.notifyBlockOfNeighborChange(var1, var2 - 1, var3, var4);
-		this.notifyBlockOfNeighborChange(var1, var2 + 1, var3, var4);
-		this.notifyBlockOfNeighborChange(var1, var2, var3 - 1, var4);
-		this.notifyBlockOfNeighborChange(var1, var2, var3 + 1, var4);
-	}
-
-	private void notifyBlockOfNeighborChange(int var1, int var2, int var3, int var4) {
+	public boolean setBlockWithNotify(int n, int n2, int n3, int n4) {
+		if(this.setBlock(n, n2, n3, n4)) {
+			this.notifyBlockChange(n, n2, n3, n4);
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	public boolean setBlockAndMetadataWithNotify(int n, int n2, int n3, int n4, int n5) {
+		if(this.setBlockAndMetadata(n, n2, n3, n4, n5)) {
+			this.notifyBlockChange(n, n2, n3, n4);
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	public void markBlockNeedsUpdate(int n, int n2, int n3) {
+		for(int i = 0; i < this.worldAccesses.size(); ++i) {
+			((IWorldAccess)this.worldAccesses.get(i)).markBlockAndNeighborsNeedsUpdate(n, n2, n3);
+		}
+
+	}
+
+	protected void notifyBlockChange(int n, int n2, int n3, int n4) {
+		this.markBlockNeedsUpdate(n, n2, n3);
+		this.notifyBlocksOfNeighborChange(n, n2, n3, n4);
+	}
+
+	public void markBlocksDirtyVertical(int n, int n2, int n3, int n4) {
+		if(n3 > n4) {
+			int n5 = n4;
+			n4 = n3;
+			n3 = n5;
+		}
+
+		this.markBlocksDirty(n, n3, n2, n, n4, n2);
+	}
+
+	public void markBlocksDirty(int n, int n2, int n3, int n4, int n5, int n6) {
+		for(int i = 0; i < this.worldAccesses.size(); ++i) {
+			((IWorldAccess)this.worldAccesses.get(i)).markBlockRangeNeedsUpdate(n, n2, n3, n4, n5, n6);
+		}
+
+	}
+
+	public void notifyBlocksOfNeighborChange(int n, int n2, int n3, int n4) {
+		this.notifyBlockOfNeighborChange(n - 1, n2, n3, n4);
+		this.notifyBlockOfNeighborChange(n + 1, n2, n3, n4);
+		this.notifyBlockOfNeighborChange(n, n2 - 1, n3, n4);
+		this.notifyBlockOfNeighborChange(n, n2 + 1, n3, n4);
+		this.notifyBlockOfNeighborChange(n, n2, n3 - 1, n4);
+		this.notifyBlockOfNeighborChange(n, n2, n3 + 1, n4);
+	}
+
+	private void notifyBlockOfNeighborChange(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
 		if(!this.editingBlocks && !this.multiplayerWorld) {
-			Block var5 = Block.blocksList[this.getBlockId(var1, var2, var3)];
-			if(var5 != null) {
-				var5.onNeighborBlockChange(this, var1, var2, var3, var4);
+			Block ly1 = Block.blocksList[this.getBlockId(paramInt1, paramInt2, paramInt3)];
+			if(ly1 != null) {
+				ly1.onNeighborBlockChange(this, paramInt1, paramInt2, paramInt3, paramInt4);
 			}
 
 		}
 	}
 
-	public boolean canBlockSeeTheSky(int var1, int var2, int var3) {
-		return this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4).canBlockSeeTheSky(var1 & 15, var2, var3 & 15);
-	}
-
-	public int getBlockLightValue(int var1, int var2, int var3) {
-		return this.getBlockLightValue_do(var1, var2, var3, true);
-	}
-
-	public int getBlockLightValue_do(int var1, int var2, int var3, boolean var4) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
-			int var5;
-			if(var4) {
-				var5 = this.getBlockId(var1, var2, var3);
-				if(var5 == Block.stairSingle.blockID || var5 == Block.tilledField.blockID) {
-					int var6 = this.getBlockLightValue_do(var1, var2 + 1, var3, false);
-					int var7 = this.getBlockLightValue_do(var1 + 1, var2, var3, false);
-					int var8 = this.getBlockLightValue_do(var1 - 1, var2, var3, false);
-					int var9 = this.getBlockLightValue_do(var1, var2, var3 + 1, false);
-					int var10 = this.getBlockLightValue_do(var1, var2, var3 - 1, false);
-					if(var7 > var6) {
-						var6 = var7;
-					}
-
-					if(var8 > var6) {
-						var6 = var8;
-					}
-
-					if(var9 > var6) {
-						var6 = var9;
-					}
-
-					if(var10 > var6) {
-						var6 = var10;
-					}
-
-					return var6;
+	public boolean canBlockSeeTheSky(int n, int n2, int n3) {
+		return this.getChunkFromChunkCoords(n >> 4, n3 >> 4).canBlockSeeTheSky(n & 15, n2, n3 & 15);
+	}
+
+	public int getBlockLightValue(int n, int n2, int n3) {
+		return this.getBlockLightValue_do(n, n2, n3, true);
+	}
+
+	public int getBlockLightValue_do(int n, int n2, int n3, boolean b) {
+		if(n >= -32000000 && n3 >= -32000000 && n < 32000000 && n3 <= 32000000) {
+			int b2;
+			if(b) {
+				b2 = this.getBlockId(n, n2, n3);
+				if(b2 == Block.stairSingle.blockID || b2 == Block.tilledField.blockID) {
+					int a2 = this.getBlockLightValue_do(n, n2 + 1, n3, false);
+					int a3 = this.getBlockLightValue_do(n + 1, n2, n3, false);
+					int a4 = this.getBlockLightValue_do(n - 1, n2, n3, false);
+					int a5 = this.getBlockLightValue_do(n, n2, n3 + 1, false);
+					int a6 = this.getBlockLightValue_do(n, n2, n3 - 1, false);
+					if(a3 > a2) {
+						a2 = a3;
+					}
+
+					if(a4 > a2) {
+						a2 = a4;
+					}
+
+					if(a5 > a2) {
+						a2 = a5;
+					}
+
+					if(a6 > a2) {
+						a2 = a6;
+					}
+
+					return a2;
 				}
 			}
 
-			if(var2 < 0) {
+			if(n2 < 0) {
 				return 0;
-			} else if(var2 >= 128) {
-				var5 = 15 - this.skylightSubtracted;
-				if(var5 < 0) {
-					var5 = 0;
+			} else if(n2 >= 128) {
+				b2 = 15 - this.skylightSubtracted;
+				if(b2 < 0) {
+					b2 = 0;
 				}
 
-				return var5;
+				return b2;
 			} else {
-				Chunk var11 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-				var1 &= 15;
-				var3 &= 15;
-				return var11.getBlockLightValue(var1, var2, var3, this.skylightSubtracted);
+				Chunk b21 = this.getChunkFromChunkCoords(n >> 4, n3 >> 4);
+				n &= 15;
+				n3 &= 15;
+				return b21.getBlockLightValue(n, n2, n3, this.skylightSubtracted);
 			}
 		} else {
 			return 15;
 		}
 	}
 
-	public boolean canExistingBlockSeeTheSky(int var1, int var2, int var3) {
-		if(var1 >= -32000000 && var3 >= -32000000 && var1 < 32000000 && var3 <= 32000000) {
-			if(var2 < 0) {
+	public boolean canExistingBlockSeeTheSky(int n, int n2, int n3) {
+		if(n >= -32000000 && n3 >= -32000000 && n < 32000000 && n3 <= 32000000) {
+			if(n2 < 0) {
 				return false;
-			} else if(var2 >= 128) {
+			} else if(n2 >= 128) {
 				return true;
-			} else if(!this.chunkExists(var1 >> 4, var3 >> 4)) {
+			} else if(!this.chunkExists(n >> 4, n3 >> 4)) {
 				return false;
 			} else {
-				Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-				var1 &= 15;
-				var3 &= 15;
-				return var4.canBlockSeeTheSky(var1, var2, var3);
+				Chunk b = this.getChunkFromChunkCoords(n >> 4, n3 >> 4);
+				n &= 15;
+				n3 &= 15;
+				return b.canBlockSeeTheSky(n, n2, n3);
 			}
 		} else {
 			return false;
 		}
 	}
 
-	public int getHeightValue(int var1, int var2) {
-		if(var1 >= -32000000 && var2 >= -32000000 && var1 < 32000000 && var2 <= 32000000) {
-			if(!this.chunkExists(var1 >> 4, var2 >> 4)) {
-				return 0;
-			} else {
-				Chunk var3 = this.getChunkFromChunkCoords(var1 >> 4, var2 >> 4);
-				return var3.getHeightValue(var1 & 15, var2 & 15);
-			}
-		} else {
-			return 0;
-		}
-	}
-
-	public void neighborLightPropagationChanged(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
-		if(this.blockExists(var2, var3, var4)) {
-			if(var1 == EnumSkyBlock.Sky) {
-				if(this.canExistingBlockSeeTheSky(var2, var3, var4)) {
-					var5 = 15;
-				}
-			} else if(var1 == EnumSkyBlock.Block) {
-				int var6 = this.getBlockId(var2, var3, var4);
-				if(Block.lightValue[var6] > var5) {
-					var5 = Block.lightValue[var6];
-				}
-			}
-
-			if(this.getSavedLightValue(var1, var2, var3, var4) != var5) {
-				this.scheduleLightingUpdate(var1, var2, var3, var4, var2, var3, var4);
-			}
-
-		}
-	}
-
-	public int getSavedLightValue(EnumSkyBlock var1, int var2, int var3, int var4) {
-		if(var3 >= 0 && var3 < 128 && var2 >= -32000000 && var4 >= -32000000 && var2 < 32000000 && var4 <= 32000000) {
-			int var5 = var2 >> 4;
-			int var6 = var4 >> 4;
-			if(!this.chunkExists(var5, var6)) {
-				return 0;
-			} else {
-				Chunk var7 = this.getChunkFromChunkCoords(var5, var6);
-				return var7.getSavedLightValue(var1, var2 & 15, var3, var4 & 15);
-			}
-		} else {
-			return var1.defaultLightValue;
-		}
-	}
-
-	public void setLightValue(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
-		if(var2 >= -32000000 && var4 >= -32000000 && var2 < 32000000 && var4 <= 32000000) {
-			if(var3 >= 0) {
-				if(var3 < 128) {
-					if(this.chunkExists(var2 >> 4, var4 >> 4)) {
-						Chunk var6 = this.getChunkFromChunkCoords(var2 >> 4, var4 >> 4);
-						var6.setLightValue(var1, var2 & 15, var3, var4 & 15, var5);
-
-						for(int var7 = 0; var7 < this.worldAccesses.size(); ++var7) {
-							((IWorldAccess)this.worldAccesses.get(var7)).markBlockAndNeighborsNeedsUpdate(var2, var3, var4);
+	public int getHeightValue(int n, int n2) {
+		return n >= -32000000 && n2 >= -32000000 && n < 32000000 && n2 <= 32000000 ? (!this.chunkExists(n >> 4, n2 >> 4) ? 0 : this.getChunkFromChunkCoords(n >> 4, n2 >> 4).getHeightValue(n & 15, n2 & 15)) : 0;
+	}
+
+	public void neighborLightPropagationChanged(EnumSkyBlock by, int n, int n2, int n3, int n4) {
+		if(this.blockExists(n, n2, n3)) {
+			if(by == EnumSkyBlock.Sky) {
+				if(this.canExistingBlockSeeTheSky(n, n2, n3)) {
+					n4 = 15;
+				}
+			} else if(by == EnumSkyBlock.Block) {
+				int a = this.getBlockId(n, n2, n3);
+				if(Block.lightValue[a] > n4) {
+					n4 = Block.lightValue[a];
+				}
+			}
+
+			if(this.getSavedLightValue(by, n, n2, n3) != n4) {
+				this.scheduleLightingUpdate(by, n, n2, n3, n, n2, n3);
+			}
+
+		}
+	}
+
+	public int getSavedLightValue(EnumSkyBlock by, int n, int n2, int n3) {
+		if(n2 >= 0 && n2 < 128 && n >= -32000000 && n3 >= -32000000 && n < 32000000 && n3 <= 32000000) {
+			int n4 = n >> 4;
+			int n5 = n3 >> 4;
+			return !this.chunkExists(n4, n5) ? 0 : this.getChunkFromChunkCoords(n4, n5).getSavedLightValue(by, n & 15, n2, n3 & 15);
+		} else {
+			return by.defaultLightValue;
+		}
+	}
+
+	public void setLightValue(EnumSkyBlock by, int n, int n2, int n3, int n4) {
+		if(n >= -32000000 && n3 >= -32000000 && n < 32000000 && n3 <= 32000000) {
+			if(n2 >= 0) {
+				if(n2 < 128) {
+					if(this.chunkExists(n >> 4, n3 >> 4)) {
+						this.getChunkFromChunkCoords(n >> 4, n3 >> 4).setLightValue(by, n & 15, n2, n3 & 15, n4);
+
+						for(int i = 0; i < this.worldAccesses.size(); ++i) {
+							((IWorldAccess)this.worldAccesses.get(i)).markBlockAndNeighborsNeedsUpdate(n, n2, n3);
 						}
 
 					}
@@ -674,143 +638,148 @@
 		}
 	}
 
-	public float getBrightness(int var1, int var2, int var3) {
-		return lightBrightnessTable[this.getBlockLightValue(var1, var2, var3)];
+	public float getBrightness(int n, int n2, int n3) {
+		return lightBrightnessTable[this.getBlockLightValue(n, n2, n3)];
 	}
 
 	public boolean isDaytime() {
 		return this.skylightSubtracted < 4;
 	}
 
-	public MovingObjectPosition rayTraceBlocks(Vec3D var1, Vec3D var2) {
-		return this.rayTraceBlocks_do(var1, var2, false);
+	public MovingObjectPosition rayTraceBlocks(Vec3D aj, Vec3D aj2) {
+		return this.rayTraceBlocks_do(aj, aj2, false);
 	}
 
-	public MovingObjectPosition rayTraceBlocks_do(Vec3D var1, Vec3D var2, boolean var3) {
-		if(!Double.isNaN(var1.xCoord) && !Double.isNaN(var1.yCoord) && !Double.isNaN(var1.zCoord)) {
-			if(!Double.isNaN(var2.xCoord) && !Double.isNaN(var2.yCoord) && !Double.isNaN(var2.zCoord)) {
-				int var4 = MathHelper.floor_double(var2.xCoord);
-				int var5 = MathHelper.floor_double(var2.yCoord);
-				int var6 = MathHelper.floor_double(var2.zCoord);
-				int var7 = MathHelper.floor_double(var1.xCoord);
-				int var8 = MathHelper.floor_double(var1.yCoord);
-				int var9 = MathHelper.floor_double(var1.zCoord);
-				int var10 = 20;
-
-				while(var10-- >= 0) {
-					if(Double.isNaN(var1.xCoord) || Double.isNaN(var1.yCoord) || Double.isNaN(var1.zCoord)) {
-						return null;
-					}
-
-					if(var7 == var4 && var8 == var5 && var9 == var6) {
-						return null;
-					}
-
-					double var11 = 999.0D;
-					double var13 = 999.0D;
-					double var15 = 999.0D;
-					if(var4 > var7) {
-						var11 = (double)var7 + 1.0D;
-					}
-
-					if(var4 < var7) {
-						var11 = (double)var7 + 0.0D;
-					}
-
-					if(var5 > var8) {
-						var13 = (double)var8 + 1.0D;
-					}
-
-					if(var5 < var8) {
-						var13 = (double)var8 + 0.0D;
-					}
-
-					if(var6 > var9) {
-						var15 = (double)var9 + 1.0D;
-					}
-
-					if(var6 < var9) {
-						var15 = (double)var9 + 0.0D;
-					}
-
-					double var17 = 999.0D;
-					double var19 = 999.0D;
-					double var21 = 999.0D;
-					double var23 = var2.xCoord - var1.xCoord;
-					double var25 = var2.yCoord - var1.yCoord;
-					double var27 = var2.zCoord - var1.zCoord;
-					if(var11 != 999.0D) {
-						var17 = (var11 - var1.xCoord) / var23;
-					}
-
-					if(var13 != 999.0D) {
-						var19 = (var13 - var1.yCoord) / var25;
-					}
-
-					if(var15 != 999.0D) {
-						var21 = (var15 - var1.zCoord) / var27;
-					}
-
-					boolean var29 = false;
-					byte var35;
-					if(var17 < var19 && var17 < var21) {
-						if(var4 > var7) {
-							var35 = 4;
-						} else {
-							var35 = 5;
-						}
-
-						var1.xCoord = var11;
-						var1.yCoord += var25 * var17;
-						var1.zCoord += var27 * var17;
-					} else if(var19 < var21) {
-						if(var5 > var8) {
-							var35 = 0;
-						} else {
-							var35 = 1;
-						}
-
-						var1.xCoord += var23 * var19;
-						var1.yCoord = var13;
-						var1.zCoord += var27 * var19;
+	public MovingObjectPosition rayTraceBlocks_do(Vec3D paramaj1, Vec3D paramaj2, boolean paramBoolean) {
+		if(!Double.isNaN(paramaj1.xCoord) && !Double.isNaN(paramaj1.yCoord) && !Double.isNaN(paramaj1.zCoord)) {
+			if(!Double.isNaN(paramaj2.xCoord) && !Double.isNaN(paramaj2.yCoord) && !Double.isNaN(paramaj2.zCoord)) {
+				int b = MathHelper.floor_double(paramaj2.xCoord);
+				int b2 = MathHelper.floor_double(paramaj2.yCoord);
+				int b3 = MathHelper.floor_double(paramaj2.zCoord);
+				int b4 = MathHelper.floor_double(paramaj1.xCoord);
+				int b5 = MathHelper.floor_double(paramaj1.yCoord);
+				int b6 = MathHelper.floor_double(paramaj1.zCoord);
+				int n = 20;
+
+				while(n-- >= 0) {
+					if(Double.isNaN(paramaj1.xCoord) || Double.isNaN(paramaj1.yCoord) || Double.isNaN(paramaj1.zCoord)) {
+						return null;
+					}
+
+					if(b4 == b && b5 == b2 && b6 == b3) {
+						return null;
+					}
+
+					double a = 999.0D;
+					double b7 = 999.0D;
+					double c = 999.0D;
+					if(b > b4) {
+						a = (double)b4 + 1.0D;
+					}
+
+					if(b < b4) {
+						a = (double)b4 + 0.0D;
+					}
+
+					if(b2 > b5) {
+						b7 = (double)b5 + 1.0D;
+					}
+
+					if(b2 < b5) {
+						b7 = (double)b5 + 0.0D;
+					}
+
+					if(b3 > b6) {
+						c = (double)b6 + 1.0D;
+					}
+
+					if(b3 < b6) {
+						c = (double)b6 + 0.0D;
+					}
+
+					double n2 = 999.0D;
+					double n3 = 999.0D;
+					double n4 = 999.0D;
+					double n5 = paramaj2.xCoord - paramaj1.xCoord;
+					double n6 = paramaj2.yCoord - paramaj1.yCoord;
+					double n7 = paramaj2.zCoord - paramaj1.zCoord;
+					if(a != 999.0D) {
+						n2 = (a - paramaj1.xCoord) / n5;
+					}
+
+					if(b7 != 999.0D) {
+						n3 = (b7 - paramaj1.yCoord) / n6;
+					}
+
+					if(c != 999.0D) {
+						n4 = (c - paramaj1.zCoord) / n7;
+					}
+
+					byte n8;
+					if(n2 < n3 && n2 < n4) {
+						if(b > b4) {
+							n8 = 4;
+						} else {
+							n8 = 5;
+						}
+
+						paramaj1.xCoord = a;
+						paramaj1.yCoord += n6 * n2;
+						paramaj1.zCoord += n7 * n2;
+					} else if(n3 < n4) {
+						if(b2 > b5) {
+							n8 = 0;
+						} else {
+							n8 = 1;
+						}
+
+						paramaj1.xCoord += n5 * n3;
+						paramaj1.yCoord = b7;
+						paramaj1.zCoord += n7 * n3;
 					} else {
-						if(var6 > var9) {
-							var35 = 2;
+						if(b3 > b6) {
+							n8 = 2;
 						} else {
-							var35 = 3;
+							n8 = 3;
 						}
 
-						var1.xCoord += var23 * var21;
-						var1.yCoord += var25 * var21;
-						var1.zCoord = var15;
-					}
-
-					Vec3D var30 = Vec3D.createVector(var1.xCoord, var1.yCoord, var1.zCoord);
-					var7 = (int)(var30.xCoord = (double)MathHelper.floor_double(var1.xCoord));
-					if(var35 == 5) {
-						--var7;
-						++var30.xCoord;
-					}
-
-					var8 = (int)(var30.yCoord = (double)MathHelper.floor_double(var1.yCoord));
-					if(var35 == 1) {
-						--var8;
-						++var30.yCoord;
-					}
-
-					var9 = (int)(var30.zCoord = (double)MathHelper.floor_double(var1.zCoord));
-					if(var35 == 3) {
-						--var9;
-						++var30.zCoord;
-					}
-
-					int var31 = this.getBlockId(var7, var8, var9);
-					int var32 = this.getBlockMetadata(var7, var8, var9);
-					Block var33 = Block.blocksList[var31];
-					if(var31 > 0 && var33.canCollideCheck(var32, var3)) {
-						MovingObjectPosition var34 = var33.collisionRayTrace(this, var7, var8, var9, var1, var2);
-						if(var34 != null) {
-							return var34;
+						paramaj1.xCoord += n5 * n4;
+						paramaj1.yCoord += n6 * n4;
+						paramaj1.zCoord = c;
+					}
+
+					Vec3D b8 = Vec3D.createVector(paramaj1.xCoord, paramaj1.yCoord, paramaj1.zCoord);
+					double a2 = (double)MathHelper.floor_double(paramaj1.xCoord);
+					b8.xCoord = a2;
+					b4 = (int)a2;
+					if(n8 == 5) {
+						--b4;
+						++b8.xCoord;
+					}
+
+					double b9 = (double)MathHelper.floor_double(paramaj1.yCoord);
+					b8.yCoord = b9;
+					b5 = (int)b9;
+					if(n8 == 1) {
+						--b5;
+						++b8.yCoord;
+					}
+
+					double c2 = (double)MathHelper.floor_double(paramaj1.zCoord);
+					b8.zCoord = c2;
+					b6 = (int)c2;
+					if(n8 == 3) {
+						--b6;
+						++b8.zCoord;
+					}
+
+					int a3 = this.getBlockId(b4, b5, b6);
+					int e = this.getBlockMetadata(b4, b5, b6);
+					Block ly1 = Block.blocksList[a3];
+					if(a3 > 0 && ly1.canCollideCheck(e, paramBoolean)) {
+						MovingObjectPosition a4 = ly1.collisionRayTrace(this, b4, b5, b6, paramaj1, paramaj2);
+						if(a4 != null) {
+							return a4;
 						}
 					}
 				}
@@ -824,263 +793,236 @@
 		}
 	}
 
-	public void playSoundAtEntity(Entity var1, String var2, float var3, float var4) {
-		for(int var5 = 0; var5 < this.worldAccesses.size(); ++var5) {
-			((IWorldAccess)this.worldAccesses.get(var5)).playSound(var2, var1.posX, var1.posY - (double)var1.yOffset, var1.posZ, var3, var4);
-		}
-
-	}
-
-	public void playSoundEffect(double var1, double var3, double var5, String var7, float var8, float var9) {
-		for(int var10 = 0; var10 < this.worldAccesses.size(); ++var10) {
-			((IWorldAccess)this.worldAccesses.get(var10)).playSound(var7, var1, var3, var5, var8, var9);
-		}
-
-	}
-
-	public void playRecord(String var1, int var2, int var3, int var4) {
-		for(int var5 = 0; var5 < this.worldAccesses.size(); ++var5) {
-			((IWorldAccess)this.worldAccesses.get(var5)).playRecord(var1, var2, var3, var4);
-		}
-
-	}
-
-	public void spawnParticle(String var1, double var2, double var4, double var6, double var8, double var10, double var12) {
-		for(int var14 = 0; var14 < this.worldAccesses.size(); ++var14) {
-			((IWorldAccess)this.worldAccesses.get(var14)).spawnParticle(var1, var2, var4, var6, var8, var10, var12);
-		}
-
-	}
-
-	public boolean spawnEntityInWorld(Entity var1) {
-		int var2 = MathHelper.floor_double(var1.posX / 16.0D);
-		int var3 = MathHelper.floor_double(var1.posZ / 16.0D);
-		boolean var4 = false;
-		if(var1 instanceof EntityPlayer) {
-			var4 = true;
-		}
-
-		if(!var4 && !this.chunkExists(var2, var3)) {
+	public void playSoundAtEntity(Entity kh, String s, float n, float n2) {
+		for(int i = 0; i < this.worldAccesses.size(); ++i) {
+			((IWorldAccess)this.worldAccesses.get(i)).playSound(s, kh.posX, kh.posY - (double)kh.yOffset, kh.posZ, n, n2);
+		}
+
+	}
+
+	public void playSoundEffect(double n, double n2, double n3, String s, float n4, float n5) {
+		for(int i = 0; i < this.worldAccesses.size(); ++i) {
+			((IWorldAccess)this.worldAccesses.get(i)).playSound(s, n, n2, n3, n4, n5);
+		}
+
+	}
+
+	public void playRecord(String s, int n, int n2, int n3) {
+		for(int i = 0; i < this.worldAccesses.size(); ++i) {
+			((IWorldAccess)this.worldAccesses.get(i)).playRecord(s, n, n2, n3);
+		}
+
+	}
+
+	public void spawnParticle(String s, double n, double n2, double n3, double n4, double n5, double n6) {
+		for(int i = 0; i < this.worldAccesses.size(); ++i) {
+			((IWorldAccess)this.worldAccesses.get(i)).spawnParticle(s, n, n2, n3, n4, n5, n6);
+		}
+
+	}
+
+	public boolean spawnEntityInWorld(Entity kh) {
+		int b = MathHelper.floor_double(kh.posX / 16.0D);
+		int b2 = MathHelper.floor_double(kh.posZ / 16.0D);
+		boolean b3 = false;
+		if(kh instanceof EntityPlayer) {
+			b3 = true;
+		}
+
+		if(!b3 && !this.chunkExists(b, b2)) {
 			return false;
 		} else {
-			if(var1 instanceof EntityPlayer) {
-				this.playerEntities.add((EntityPlayer)var1);
+			if(kh instanceof EntityPlayer) {
+				this.playerEntities.add(kh);
 				System.out.println("Player count: " + this.playerEntities.size());
 			}
 
-			this.getChunkFromChunkCoords(var2, var3).addEntity(var1);
-			this.loadedEntityList.add(var1);
-			this.obtainEntitySkin(var1);
+			this.getChunkFromChunkCoords(b, b2).addEntity(kh);
+			this.loadedEntityList.add(kh);
+			this.obtainEntitySkin(kh);
 			return true;
 		}
 	}
 
-	protected void obtainEntitySkin(Entity var1) {
-		for(int var2 = 0; var2 < this.worldAccesses.size(); ++var2) {
-			((IWorldAccess)this.worldAccesses.get(var2)).obtainEntitySkin(var1);
-		}
-
-	}
-
-	protected void releaseEntitySkin(Entity var1) {
-		for(int var2 = 0; var2 < this.worldAccesses.size(); ++var2) {
-			((IWorldAccess)this.worldAccesses.get(var2)).releaseEntitySkin(var1);
-		}
-
-	}
-
-	public void setEntityDead(Entity var1) {
-		var1.setEntityDead();
-		if(var1 instanceof EntityPlayer) {
-			this.playerEntities.remove((EntityPlayer)var1);
+	protected void obtainEntitySkin(Entity kh) {
+		for(int i = 0; i < this.worldAccesses.size(); ++i) {
+			((IWorldAccess)this.worldAccesses.get(i)).obtainEntitySkin(kh);
+		}
+
+	}
+
+	protected void releaseEntitySkin(Entity kh) {
+		for(int i = 0; i < this.worldAccesses.size(); ++i) {
+			((IWorldAccess)this.worldAccesses.get(i)).releaseEntitySkin(kh);
+		}
+
+	}
+
+	public void setEntityDead(Entity kh) {
+		kh.setEntityDead();
+		if(kh instanceof EntityPlayer) {
+			this.playerEntities.remove(kh);
 			System.out.println("Player count: " + this.playerEntities.size());
 		}
 
 	}
 
-	public void addWorldAccess(IWorldAccess var1) {
-		this.worldAccesses.add(var1);
-	}
-
-	public void removeWorldAccess(IWorldAccess var1) {
-		this.worldAccesses.remove(var1);
-	}
-
-	public List getCollidingBoundingBoxes(Entity var1, AxisAlignedBB var2) {
+	public void addWorldAccess(IWorldAccess im) {
+		this.worldAccesses.add(im);
+	}
+
+	public void removeWorldAccess(IWorldAccess im) {
+		this.worldAccesses.remove(im);
+	}
+
+	public List getCollidingBoundingBoxes(Entity kh, AxisAlignedBB paramcf) {
 		this.collidingBoundingBoxes.clear();
-		int var3 = MathHelper.floor_double(var2.minX);
-		int var4 = MathHelper.floor_double(var2.maxX + 1.0D);
-		int var5 = MathHelper.floor_double(var2.minY);
-		int var6 = MathHelper.floor_double(var2.maxY + 1.0D);
-		int var7 = MathHelper.floor_double(var2.minZ);
-		int var8 = MathHelper.floor_double(var2.maxZ + 1.0D);
+		int b = MathHelper.floor_double(paramcf.minX);
+		int b2 = MathHelper.floor_double(paramcf.maxX + 1.0D);
+		int b3 = MathHelper.floor_double(paramcf.minY);
+		int b4 = MathHelper.floor_double(paramcf.maxY + 1.0D);
+		int b5 = MathHelper.floor_double(paramcf.minZ);
+		int b6 = MathHelper.floor_double(paramcf.maxZ + 1.0D);
 
-		for(int var9 = var3; var9 < var4; ++var9) {
-			for(int var10 = var7; var10 < var8; ++var10) {
-				if(this.blockExists(var9, 64, var10)) {
-					for(int var11 = var5 - 1; var11 < var6; ++var11) {
-						Block var12 = Block.blocksList[this.getBlockId(var9, var11, var10)];
-						if(var12 != null) {
-							var12.getCollidingBoundingBoxes(this, var9, var11, var10, var2, this.collidingBoundingBoxes);
+		for(int n = b; n < b2; ++n) {
+			for(int j = b5; j < b6; ++j) {
+				if(this.blockExists(n, 64, j)) {
+					for(int b7 = b3 - 1; b7 < b4; ++b7) {
+						Block l = Block.blocksList[this.getBlockId(n, b7, j)];
+						if(l != null) {
+							l.getCollidingBoundingBoxes(this, n, b7, j, paramcf, this.collidingBoundingBoxes);
 						}
 					}
 				}
 			}
 		}
 
-		double var14 = 0.25D;
-		List var15 = this.getEntitiesWithinAABBExcludingEntity(var1, var2.expand(var14, var14, var14));
+		double var15 = 0.25D;
+		List var16 = this.getEntitiesWithinAABBExcludingEntity(kh, paramcf.expand(0.25D, 0.25D, 0.25D));
 
-		for(int var16 = 0; var16 < var15.size(); ++var16) {
-			AxisAlignedBB var13 = ((Entity)var15.get(var16)).getBoundingBox();
-			if(var13 != null && var13.intersectsWith(var2)) {
-				this.collidingBoundingBoxes.add(var13);
+		for(int var17 = 0; var17 < var16.size(); ++var17) {
+			AxisAlignedBB f_ = ((Entity)var16.get(var17)).getBoundingBox();
+			if(f_ != null && f_.intersectsWith(paramcf)) {
+				this.collidingBoundingBoxes.add(f_);
 			}
 
-			var13 = var1.getCollisionBox((Entity)var15.get(var16));
-			if(var13 != null && var13.intersectsWith(var2)) {
-				this.collidingBoundingBoxes.add(var13);
+			AxisAlignedBB b_ = kh.getCollisionBox((Entity)var16.get(var17));
+			if(b_ != null && b_.intersectsWith(paramcf)) {
+				this.collidingBoundingBoxes.add(b_);
 			}
 		}
 
 		return this.collidingBoundingBoxes;
 	}
 
-	public int calculateSkylightSubtracted(float var1) {
-		float var2 = this.getCelestialAngle(var1);
-		float var3 = 1.0F - (MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F);
-		if(var3 < 0.0F) {
-			var3 = 0.0F;
-		}
-
-		if(var3 > 1.0F) {
-			var3 = 1.0F;
-		}
-
-		return (int)(var3 * 11.0F);
-	}
-
-	public Vec3D getSkyColor(float var1) {
-		float var2 = this.getCelestialAngle(var1);
-		float var3 = MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
-		if(var3 < 0.0F) {
-			var3 = 0.0F;
-		}
-
-		if(var3 > 1.0F) {
-			var3 = 1.0F;
-		}
-
-		float var4 = (float)(this.skyColor >> 16 & 255L) / 255.0F;
-		float var5 = (float)(this.skyColor >> 8 & 255L) / 255.0F;
-		float var6 = (float)(this.skyColor & 255L) / 255.0F;
-		var4 *= var3;
-		var5 *= var3;
-		var6 *= var3;
-		return Vec3D.createVector((double)var4, (double)var5, (double)var6);
-	}
-
-	public float getCelestialAngle(float var1) {
-		int var2 = (int)(this.worldTime % 24000L);
-		float var3 = ((float)var2 + var1) / 24000.0F - 0.25F;
-		if(var3 < 0.0F) {
-			++var3;
-		}
-
-		if(var3 > 1.0F) {
-			--var3;
-		}
-
-		float var4 = var3;
-		var3 = 1.0F - (float)((Math.cos((double)var3 * Math.PI) + 1.0D) / 2.0D);
-		var3 = var4 + (var3 - var4) / 3.0F;
-		return var3;
-	}
-
-	public Vec3D getCloudColor(float var1) {
-		float var2 = this.getCelestialAngle(var1);
-		float var3 = MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
-		if(var3 < 0.0F) {
-			var3 = 0.0F;
-		}
-
-		if(var3 > 1.0F) {
-			var3 = 1.0F;
-		}
-
-		float var4 = (float)(this.cloudColor >> 16 & 255L) / 255.0F;
-		float var5 = (float)(this.cloudColor >> 8 & 255L) / 255.0F;
-		float var6 = (float)(this.cloudColor & 255L) / 255.0F;
-		var4 *= var3 * 0.9F + 0.1F;
-		var5 *= var3 * 0.9F + 0.1F;
-		var6 *= var3 * 0.85F + 0.15F;
-		return Vec3D.createVector((double)var4, (double)var5, (double)var6);
-	}
-
-	public Vec3D getFogColor(float var1) {
-		float var2 = this.getCelestialAngle(var1);
-		float var3 = MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
-		if(var3 < 0.0F) {
-			var3 = 0.0F;
-		}
-
-		if(var3 > 1.0F) {
-			var3 = 1.0F;
-		}
-
-		float var4 = (float)(this.fogColor >> 16 & 255L) / 255.0F;
-		float var5 = (float)(this.fogColor >> 8 & 255L) / 255.0F;
-		float var6 = (float)(this.fogColor & 255L) / 255.0F;
-		var4 *= var3 * 0.94F + 0.06F;
-		var5 *= var3 * 0.94F + 0.06F;
-		var6 *= var3 * 0.91F + 0.09F;
-		return Vec3D.createVector((double)var4, (double)var5, (double)var6);
-	}
-
-	public int getTopSolidOrLiquidBlock(int var1, int var2) {
-		Chunk var3 = this.getChunkFromBlockCoords(var1, var2);
-		int var4 = 127;
-		var1 &= 15;
-
-		for(var2 &= 15; var4 > 0; --var4) {
-			int var5 = var3.getBlockID(var1, var4, var2);
-			if(var5 != 0 && (Block.blocksList[var5].material.getIsSolid() || Block.blocksList[var5].material.getIsLiquid())) {
-				return var4 + 1;
+	public int calculateSkylightSubtracted(float n) {
+		float n2 = 1.0F - (MathHelper.cos(this.getCelestialAngle(n) * (float)Math.PI * 2.0F) * 2.0F + 0.5F);
+		if(n2 < 0.0F) {
+			n2 = 0.0F;
+		}
+
+		if(n2 > 1.0F) {
+			n2 = 1.0F;
+		}
+
+		return (int)(n2 * 11.0F);
+	}
+
+	public Vec3D getSkyColor(float n) {
+		float n2 = MathHelper.cos(this.getCelestialAngle(n) * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
+		if(n2 < 0.0F) {
+			n2 = 0.0F;
+		}
+
+		if(n2 > 1.0F) {
+			n2 = 1.0F;
+		}
+
+		return Vec3D.createVector((double)((float)(this.skyColor >> 16 & 255L) / 255.0F * n2), (double)((float)(this.skyColor >> 8 & 255L) / 255.0F * n2), (double)((float)(this.skyColor & 255L) / 255.0F * n2));
+	}
+
+	public float getCelestialAngle(float n) {
+		float n2 = ((float)((int)(this.worldTime % 24000L)) + n) / 24000.0F - 0.25F;
+		if(n2 < 0.0F) {
+			++n2;
+		}
+
+		if(n2 > 1.0F) {
+			--n2;
+		}
+
+		return n2 + (1.0F - (float)((Math.cos((double)n2 * Math.PI) + 1.0D) / 2.0D) - n2) / 3.0F;
+	}
+
+	public Vec3D getCloudColor(float n) {
+		float n2 = MathHelper.cos(this.getCelestialAngle(n) * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
+		if(n2 < 0.0F) {
+			n2 = 0.0F;
+		}
+
+		if(n2 > 1.0F) {
+			n2 = 1.0F;
+		}
+
+		return Vec3D.createVector((double)((float)(this.cloudColor >> 16 & 255L) / 255.0F * (n2 * 0.9F + 0.1F)), (double)((float)(this.cloudColor >> 8 & 255L) / 255.0F * (n2 * 0.9F + 0.1F)), (double)((float)(this.cloudColor & 255L) / 255.0F * (n2 * 0.85F + 0.15F)));
+	}
+
+	public Vec3D getFogColor(float n) {
+		float n2 = MathHelper.cos(this.getCelestialAngle(n) * (float)Math.PI * 2.0F) * 2.0F + 0.5F;
+		if(n2 < 0.0F) {
+			n2 = 0.0F;
+		}
+
+		if(n2 > 1.0F) {
+			n2 = 1.0F;
+		}
+
+		return Vec3D.createVector((double)((float)(this.fogColor >> 16 & 255L) / 255.0F * (n2 * 0.94F + 0.06F)), (double)((float)(this.fogColor >> 8 & 255L) / 255.0F * (n2 * 0.94F + 0.06F)), (double)((float)(this.fogColor & 255L) / 255.0F * (n2 * 0.91F + 0.09F)));
+	}
+
+	public int getTopSolidOrLiquidBlock(int n, int n2) {
+		Chunk a = this.getChunkFromBlockCoords(n, n2);
+		int i = 127;
+		n &= 15;
+
+		for(n2 &= 15; i > 0; --i) {
+			int a2 = a.getBlockID(n, i, n2);
+			if(a2 != 0 && (Block.blocksList[a2].material.getIsSolid() || Block.blocksList[a2].material.getIsLiquid())) {
+				return i + 1;
 			}
 		}
 
 		return -1;
 	}
 
-	public int getPrecipitationHeight(int var1, int var2) {
-		return this.getChunkFromBlockCoords(var1, var2).getHeightValue(var1 & 15, var2 & 15);
-	}
-
-	public float getStarBrightness(float var1) {
-		float var2 = this.getCelestialAngle(var1);
-		float var3 = 1.0F - (MathHelper.cos(var2 * (float)Math.PI * 2.0F) * 2.0F + 12.0F / 16.0F);
-		if(var3 < 0.0F) {
-			var3 = 0.0F;
-		}
-
-		if(var3 > 1.0F) {
-			var3 = 1.0F;
-		}
-
-		return var3 * var3 * 0.5F;
-	}
-
-	public void scheduleBlockUpdate(int var1, int var2, int var3, int var4) {
-		NextTickListEntry var5 = new NextTickListEntry(var1, var2, var3, var4);
-		byte var6 = 8;
-		if(this.checkChunksExist(var1 - var6, var2 - var6, var3 - var6, var1 + var6, var2 + var6, var3 + var6)) {
-			if(var4 > 0) {
-				var5.setScheduledTime((long)Block.blocksList[var4].tickRate() + this.worldTime);
+	public int getPrecipitationHeight(int n, int n2) {
+		return this.getChunkFromBlockCoords(n, n2).getHeightValue(n & 15, n2 & 15);
+	}
+
+	public float getStarBrightness(float n) {
+		float n2 = 1.0F - (MathHelper.cos(this.getCelestialAngle(n) * (float)Math.PI * 2.0F) * 2.0F + 12.0F / 16.0F);
+		if(n2 < 0.0F) {
+			n2 = 0.0F;
+		}
+
+		if(n2 > 1.0F) {
+			n2 = 1.0F;
+		}
+
+		return n2 * n2 * 0.5F;
+	}
+
+	public void scheduleBlockUpdate(int n, int n2, int n3, int n4) {
+		NextTickListEntry e = new NextTickListEntry(n, n2, n3, n4);
+		boolean n5 = true;
+		if(this.checkChunksExist(n - 8, n2 - 8, n3 - 8, n + 8, n2 + 8, n3 + 8)) {
+			if(n4 > 0) {
+				e.setScheduledTime((long)Block.blocksList[n4].tickRate() + this.worldTime);
 			}
 
-			if(!this.scheduledTickSet.contains(var5)) {
-				this.scheduledTickSet.add(var5);
-				this.scheduledTickTreeSet.add(var5);
+			if(!this.scheduledTickSet.contains(e)) {
+				this.scheduledTickSet.add(e);
+				this.scheduledTickTreeSet.add(e);
 			}
 		}
 
@@ -1089,130 +1031,129 @@
 	public void updateEntities() {
 		this.loadedEntityList.removeAll(this.unloadedEntityList);
 
-		int var1;
-		Entity var2;
-		int var3;
-		int var4;
-		for(var1 = 0; var1 < this.unloadedEntityList.size(); ++var1) {
-			var2 = (Entity)this.unloadedEntityList.get(var1);
-			var3 = var2.chunkCoordX;
-			var4 = var2.chunkCoordZ;
-			if(var2.addedToChunk && this.chunkExists(var3, var4)) {
-				this.getChunkFromChunkCoords(var3, var4).removeEntity(var2);
+		int l;
+		Entity kh2;
+		int ba2;
+		int bc2;
+		for(l = 0; l < this.unloadedEntityList.size(); ++l) {
+			kh2 = (Entity)this.unloadedEntityList.get(l);
+			ba2 = kh2.chunkCoordX;
+			bc2 = kh2.chunkCoordZ;
+			if(kh2.addedToChunk && this.chunkExists(ba2, bc2)) {
+				this.getChunkFromChunkCoords(ba2, bc2).removeEntity(kh2);
 			}
 		}
 
-		for(var1 = 0; var1 < this.unloadedEntityList.size(); ++var1) {
-			this.releaseEntitySkin((Entity)this.unloadedEntityList.get(var1));
+		for(l = 0; l < this.unloadedEntityList.size(); ++l) {
+			this.releaseEntitySkin((Entity)this.unloadedEntityList.get(l));
 		}
 
 		this.unloadedEntityList.clear();
 
-		for(var1 = 0; var1 < this.loadedEntityList.size(); ++var1) {
-			var2 = (Entity)this.loadedEntityList.get(var1);
-			if(var2.ridingEntity != null) {
-				if(!var2.ridingEntity.isDead && var2.ridingEntity.riddenByEntity == var2) {
+		for(l = 0; l < this.loadedEntityList.size(); ++l) {
+			kh2 = (Entity)this.loadedEntityList.get(l);
+			if(kh2.ridingEntity != null) {
+				if(!kh2.ridingEntity.isDead && kh2.ridingEntity.riddenByEntity == kh2) {
 					continue;
 				}
 
-				var2.ridingEntity.riddenByEntity = null;
-				var2.ridingEntity = null;
-			}
-
-			if(!var2.isDead) {
-				this.updateEntity(var2);
-			}
-
-			if(var2.isDead) {
-				var3 = var2.chunkCoordX;
-				var4 = var2.chunkCoordZ;
-				if(var2.addedToChunk && this.chunkExists(var3, var4)) {
-					this.getChunkFromChunkCoords(var3, var4).removeEntity(var2);
+				kh2.ridingEntity.riddenByEntity = null;
+				kh2.ridingEntity = null;
+			}
+
+			if(!kh2.isDead) {
+				this.updateEntity(kh2);
+			}
+
+			if(kh2.isDead) {
+				ba2 = kh2.chunkCoordX;
+				bc2 = kh2.chunkCoordZ;
+				if(kh2.addedToChunk && this.chunkExists(ba2, bc2)) {
+					this.getChunkFromChunkCoords(ba2, bc2).removeEntity(kh2);
 				}
 
-				this.loadedEntityList.remove(var1--);
-				this.releaseEntitySkin(var2);
+				this.loadedEntityList.remove(l--);
+				this.releaseEntitySkin(kh2);
 			}
 		}
 
-		for(var1 = 0; var1 < this.loadedTileEntityList.size(); ++var1) {
-			TileEntity var5 = (TileEntity)this.loadedTileEntityList.get(var1);
-			var5.updateEntity();
+		for(l = 0; l < this.loadedTileEntityList.size(); ++l) {
+			((TileEntity)this.loadedTileEntityList.get(l)).updateEntity();
 		}
 
 	}
 
-	protected void updateEntity(Entity var1) {
-		int var2 = MathHelper.floor_double(var1.posX);
-		int var3 = MathHelper.floor_double(var1.posZ);
-		byte var4 = 16;
-		if(this.checkChunksExist(var2 - var4, 0, var3 - var4, var2 + var4, 128, var3 + var4)) {
-			var1.lastTickPosX = var1.posX;
-			var1.lastTickPosY = var1.posY;
-			var1.lastTickPosZ = var1.posZ;
-			var1.prevRotationYaw = var1.rotationYaw;
-			var1.prevRotationPitch = var1.rotationPitch;
-			if(var1.ridingEntity != null) {
-				var1.updateRidden();
+	protected void updateEntity(Entity kh) {
+		int b = MathHelper.floor_double(kh.posX);
+		int b2 = MathHelper.floor_double(kh.posZ);
+		boolean n = true;
+		if(this.checkChunksExist(b - 16, 0, b2 - 16, b + 16, 128, b2 + 16)) {
+			kh.lastTickPosX = kh.posX;
+			kh.lastTickPosY = kh.posY;
+			kh.lastTickPosZ = kh.posZ;
+			kh.prevRotationYaw = kh.rotationYaw;
+			kh.prevRotationPitch = kh.rotationPitch;
+			if(kh.ridingEntity != null) {
+				kh.updateRidden();
 			} else {
-				var1.onUpdate();
+				kh.onUpdate();
 			}
 
-			int var5 = MathHelper.floor_double(var1.posX / 16.0D);
-			int var6 = MathHelper.floor_double(var1.posY / 16.0D);
-			int var7 = MathHelper.floor_double(var1.posZ / 16.0D);
-			if(!var1.addedToChunk || var1.chunkCoordX != var5 || var1.chunkCoordY != var6 || var1.chunkCoordZ != var7) {
-				if(var1.addedToChunk && this.chunkExists(var1.chunkCoordX, var1.chunkCoordZ)) {
-					this.getChunkFromChunkCoords(var1.chunkCoordX, var1.chunkCoordZ).removeEntityAtIndex(var1, var1.chunkCoordY);
+			int b3 = MathHelper.floor_double(kh.posX / 16.0D);
+			int b4 = MathHelper.floor_double(kh.posY / 16.0D);
+			int b5 = MathHelper.floor_double(kh.posZ / 16.0D);
+			if(!kh.addedToChunk || kh.chunkCoordX != b3 || kh.chunkCoordY != b4 || kh.chunkCoordZ != b5) {
+				if(kh.addedToChunk && this.chunkExists(kh.chunkCoordX, kh.chunkCoordZ)) {
+					this.getChunkFromChunkCoords(kh.chunkCoordX, kh.chunkCoordZ).removeEntityAtIndex(kh, kh.chunkCoordY);
 				}
 
-				if(this.chunkExists(var5, var7)) {
-					this.getChunkFromChunkCoords(var5, var7).addEntity(var1);
+				if(this.chunkExists(b3, b5)) {
+					this.getChunkFromChunkCoords(b3, b5).addEntity(kh);
 				} else {
-					var1.addedToChunk = false;
+					kh.addedToChunk = false;
 					System.out.println("Removing entity because it\'s not in a chunk!!");
-					var1.setEntityDead();
+					kh.setEntityDead();
 				}
 			}
 
-			if(var1.riddenByEntity != null) {
-				if(!var1.riddenByEntity.isDead && var1.riddenByEntity.ridingEntity == var1) {
-					this.updateEntity(var1.riddenByEntity);
+			if(kh.riddenByEntity != null) {
+				if(!kh.riddenByEntity.isDead && kh.riddenByEntity.ridingEntity == kh) {
+					this.updateEntity(kh.riddenByEntity);
 				} else {
-					var1.riddenByEntity.ridingEntity = null;
-					var1.riddenByEntity = null;
+					kh.riddenByEntity.ridingEntity = null;
+					kh.riddenByEntity = null;
 				}
 			}
 
-			if(Double.isNaN(var1.posX) || Double.isInfinite(var1.posX)) {
-				var1.posX = var1.lastTickPosX;
-			}
-
-			if(Double.isNaN(var1.posY) || Double.isInfinite(var1.posY)) {
-				var1.posY = var1.lastTickPosY;
-			}
-
-			if(Double.isNaN(var1.posZ) || Double.isInfinite(var1.posZ)) {
-				var1.posZ = var1.lastTickPosZ;
-			}
-
-			if(Double.isNaN((double)var1.rotationPitch) || Double.isInfinite((double)var1.rotationPitch)) {
-				var1.rotationPitch = var1.prevRotationPitch;
-			}
-
-			if(Double.isNaN((double)var1.rotationYaw) || Double.isInfinite((double)var1.rotationYaw)) {
-				var1.rotationYaw = var1.prevRotationYaw;
+			if(Double.isNaN(kh.posX) || Double.isInfinite(kh.posX)) {
+				kh.posX = kh.lastTickPosX;
+			}
+
+			if(Double.isNaN(kh.posY) || Double.isInfinite(kh.posY)) {
+				kh.posY = kh.lastTickPosY;
+			}
+
+			if(Double.isNaN(kh.posZ) || Double.isInfinite(kh.posZ)) {
+				kh.posZ = kh.lastTickPosZ;
+			}
+
+			if(Double.isNaN((double)kh.rotationPitch) || Double.isInfinite((double)kh.rotationPitch)) {
+				kh.rotationPitch = kh.prevRotationPitch;
+			}
+
+			if(Double.isNaN((double)kh.rotationYaw) || Double.isInfinite((double)kh.rotationYaw)) {
+				kh.rotationYaw = kh.prevRotationYaw;
 			}
 
 		}
 	}
 
-	public boolean checkIfAABBIsClear(AxisAlignedBB var1) {
-		List var2 = this.getEntitiesWithinAABBExcludingEntity((Entity)null, var1);
+	public boolean checkIfAABBIsClear(AxisAlignedBB cf) {
+		List b = this.getEntitiesWithinAABBExcludingEntity((Entity)null, cf);
 
-		for(int var3 = 0; var3 < var2.size(); ++var3) {
-			Entity var4 = (Entity)var2.get(var3);
-			if(!var4.isDead && var4.preventEntitySpawning) {
+		for(int i = 0; i < b.size(); ++i) {
+			Entity kh = (Entity)b.get(i);
+			if(!kh.isDead && kh.preventEntitySpawning) {
 				return false;
 			}
 		}
@@ -1220,139 +1161,136 @@
 		return true;
 	}
 
-	public boolean getIsAnyLiquid(AxisAlignedBB var1) {
-		int var2 = MathHelper.floor_double(var1.minX);
-		int var3 = MathHelper.floor_double(var1.maxX + 1.0D);
-		int var4 = MathHelper.floor_double(var1.minY);
-		int var5 = MathHelper.floor_double(var1.maxY + 1.0D);
-		int var6 = MathHelper.floor_double(var1.minZ);
-		int var7 = MathHelper.floor_double(var1.maxZ + 1.0D);
-		if(var1.minX < 0.0D) {
-			--var2;
-		}
-
-		if(var1.minY < 0.0D) {
-			--var4;
-		}
-
-		if(var1.minZ < 0.0D) {
-			--var6;
-		}
-
-		for(int var8 = var2; var8 < var3; ++var8) {
-			for(int var9 = var4; var9 < var5; ++var9) {
-				for(int var10 = var6; var10 < var7; ++var10) {
-					Block var11 = Block.blocksList[this.getBlockId(var8, var9, var10)];
-					if(var11 != null && var11.material.getIsLiquid()) {
-						return true;
-					}
-				}
-			}
-		}
-
-		return false;
-	}
-
-	public boolean isBoundingBoxBurning(AxisAlignedBB var1) {
-		int var2 = MathHelper.floor_double(var1.minX);
-		int var3 = MathHelper.floor_double(var1.maxX + 1.0D);
-		int var4 = MathHelper.floor_double(var1.minY);
-		int var5 = MathHelper.floor_double(var1.maxY + 1.0D);
-		int var6 = MathHelper.floor_double(var1.minZ);
-		int var7 = MathHelper.floor_double(var1.maxZ + 1.0D);
-
-		for(int var8 = var2; var8 < var3; ++var8) {
-			for(int var9 = var4; var9 < var5; ++var9) {
-				for(int var10 = var6; var10 < var7; ++var10) {
-					int var11 = this.getBlockId(var8, var9, var10);
-					if(var11 == Block.fire.blockID || var11 == Block.lavaMoving.blockID || var11 == Block.lavaStill.blockID) {
-						return true;
-					}
-				}
-			}
-		}
-
-		return false;
-	}
-
-	public boolean handleMaterialAcceleration(AxisAlignedBB var1, Material var2, Entity var3) {
-		int var4 = MathHelper.floor_double(var1.minX);
-		int var5 = MathHelper.floor_double(var1.maxX + 1.0D);
-		int var6 = MathHelper.floor_double(var1.minY);
-		int var7 = MathHelper.floor_double(var1.maxY + 1.0D);
-		int var8 = MathHelper.floor_double(var1.minZ);
-		int var9 = MathHelper.floor_double(var1.maxZ + 1.0D);
-		boolean var10 = false;
-		Vec3D var11 = Vec3D.createVector(0.0D, 0.0D, 0.0D);
-
-		for(int var12 = var4; var12 < var5; ++var12) {
-			for(int var13 = var6; var13 < var7; ++var13) {
-				for(int var14 = var8; var14 < var9; ++var14) {
-					Block var15 = Block.blocksList[this.getBlockId(var12, var13, var14)];
-					if(var15 != null && var15.material == var2) {
-						double var16 = (double)((float)(var13 + 1) - BlockFluid.getFluidHeightPercent(this.getBlockMetadata(var12, var13, var14)));
-						if((double)var7 >= var16) {
-							var10 = true;
-							var15.velocityToAddToEntity(this, var12, var13, var14, var3, var11);
-						}
-					}
-				}
-			}
-		}
-
-		if(var11.lengthVector() > 0.0D) {
-			var11 = var11.normalize();
-			double var18 = 0.004D;
-			var3.motionX += var11.xCoord * var18;
-			var3.motionY += var11.yCoord * var18;
-			var3.motionZ += var11.zCoord * var18;
-		}
-
-		return var10;
-	}
-
-	public boolean isMaterialInBB(AxisAlignedBB var1, Material var2) {
-		int var3 = MathHelper.floor_double(var1.minX);
-		int var4 = MathHelper.floor_double(var1.maxX + 1.0D);
-		int var5 = MathHelper.floor_double(var1.minY);
-		int var6 = MathHelper.floor_double(var1.maxY + 1.0D);
-		int var7 = MathHelper.floor_double(var1.minZ);
-		int var8 = MathHelper.floor_double(var1.maxZ + 1.0D);
-
-		for(int var9 = var3; var9 < var4; ++var9) {
-			for(int var10 = var5; var10 < var6; ++var10) {
-				for(int var11 = var7; var11 < var8; ++var11) {
-					Block var12 = Block.blocksList[this.getBlockId(var9, var10, var11)];
-					if(var12 != null && var12.material == var2) {
-						return true;
-					}
-				}
-			}
-		}
-
-		return false;
-	}
-
-	public boolean isAABBInMaterial(AxisAlignedBB var1, Material var2) {
-		int var3 = MathHelper.floor_double(var1.minX);
-		int var4 = MathHelper.floor_double(var1.maxX + 1.0D);
-		int var5 = MathHelper.floor_double(var1.minY);
-		int var6 = MathHelper.floor_double(var1.maxY + 1.0D);
-		int var7 = MathHelper.floor_double(var1.minZ);
-		int var8 = MathHelper.floor_double(var1.maxZ + 1.0D);
-
-		for(int var9 = var3; var9 < var4; ++var9) {
-			for(int var10 = var5; var10 < var6; ++var10) {
-				for(int var11 = var7; var11 < var8; ++var11) {
-					Block var12 = Block.blocksList[this.getBlockId(var9, var10, var11)];
-					if(var12 != null && var12.material == var2) {
-						int var13 = this.getBlockMetadata(var9, var10, var11);
-						double var14 = (double)(var10 + 1);
-						if(var13 < 8) {
-							var14 = (double)(var10 + 1) - (double)var13 / 8.0D;
-						}
-
-						if(var14 >= var1.minY) {
+	public boolean getIsAnyLiquid(AxisAlignedBB cf) {
+		int b = MathHelper.floor_double(cf.minX);
+		int b2 = MathHelper.floor_double(cf.maxX + 1.0D);
+		int b3 = MathHelper.floor_double(cf.minY);
+		int b4 = MathHelper.floor_double(cf.maxY + 1.0D);
+		int b5 = MathHelper.floor_double(cf.minZ);
+		int b6 = MathHelper.floor_double(cf.maxZ + 1.0D);
+		if(cf.minX < 0.0D) {
+			--b;
+		}
+
+		if(cf.minY < 0.0D) {
+			--b3;
+		}
+
+		if(cf.minZ < 0.0D) {
+			--b5;
+		}
+
+		for(int i = b; i < b2; ++i) {
+			for(int j = b3; j < b4; ++j) {
+				for(int k = b5; k < b6; ++k) {
+					Block ly1 = Block.blocksList[this.getBlockId(i, j, k)];
+					if(ly1 != null && ly1.material.getIsLiquid()) {
+						return true;
+					}
+				}
+			}
+		}
+
+		return false;
+	}
+
+	public boolean isBoundingBoxBurning(AxisAlignedBB cf) {
+		int b = MathHelper.floor_double(cf.minX);
+		int b2 = MathHelper.floor_double(cf.maxX + 1.0D);
+		int b3 = MathHelper.floor_double(cf.minY);
+		int b4 = MathHelper.floor_double(cf.maxY + 1.0D);
+		int b5 = MathHelper.floor_double(cf.minZ);
+		int b6 = MathHelper.floor_double(cf.maxZ + 1.0D);
+
+		for(int i = b; i < b2; ++i) {
+			for(int j = b3; j < b4; ++j) {
+				for(int k = b5; k < b6; ++k) {
+					int a = this.getBlockId(i, j, k);
+					if(a == Block.fire.blockID || a == Block.lavaMoving.blockID || a == Block.lavaStill.blockID) {
+						return true;
+					}
+				}
+			}
+		}
+
+		return false;
+	}
+
+	public boolean handleMaterialAcceleration(AxisAlignedBB cf, Material gb, Entity paramkh) {
+		int b = MathHelper.floor_double(cf.minX);
+		int b2 = MathHelper.floor_double(cf.maxX + 1.0D);
+		int b3 = MathHelper.floor_double(cf.minY);
+		int b4 = MathHelper.floor_double(cf.maxY + 1.0D);
+		int b5 = MathHelper.floor_double(cf.minZ);
+		int b6 = MathHelper.floor_double(cf.maxZ + 1.0D);
+		boolean b7 = false;
+		Vec3D b8 = Vec3D.createVector(0.0D, 0.0D, 0.0D);
+
+		for(int b9 = b; b9 < b2; ++b9) {
+			for(int n = b3; n < b4; ++n) {
+				for(int k = b5; k < b6; ++k) {
+					Block ly1 = Block.blocksList[this.getBlockId(b9, n, k)];
+					if(ly1 != null && ly1.material == gb && (double)b4 >= (double)((float)(n + 1) - BlockFluid.getFluidHeightPercent(this.getBlockMetadata(b9, n, k)))) {
+						b7 = true;
+						ly1.velocityToAddToEntity(this, b9, n, k, paramkh, b8);
+					}
+				}
+			}
+		}
+
+		if(b8.lengthVector() > 0.0D) {
+			Vec3D var16 = b8.normalize();
+			double var17 = 0.004D;
+			paramkh.motionX += var16.xCoord * 0.004D;
+			paramkh.motionY += var16.yCoord * 0.004D;
+			paramkh.motionZ += var16.zCoord * 0.004D;
+		}
+
+		return b7;
+	}
+
+	public boolean isMaterialInBB(AxisAlignedBB cf, Material gb) {
+		int b = MathHelper.floor_double(cf.minX);
+		int b2 = MathHelper.floor_double(cf.maxX + 1.0D);
+		int b3 = MathHelper.floor_double(cf.minY);
+		int b4 = MathHelper.floor_double(cf.maxY + 1.0D);
+		int b5 = MathHelper.floor_double(cf.minZ);
+		int b6 = MathHelper.floor_double(cf.maxZ + 1.0D);
+
+		for(int i = b; i < b2; ++i) {
+			for(int j = b3; j < b4; ++j) {
+				for(int k = b5; k < b6; ++k) {
+					Block ly1 = Block.blocksList[this.getBlockId(i, j, k)];
+					if(ly1 != null && ly1.material == gb) {
+						return true;
+					}
+				}
+			}
+		}
+
+		return false;
+	}
+
+	public boolean isAABBInMaterial(AxisAlignedBB cf, Material gb) {
+		int b = MathHelper.floor_double(cf.minX);
+		int b2 = MathHelper.floor_double(cf.maxX + 1.0D);
+		int b3 = MathHelper.floor_double(cf.minY);
+		int b4 = MathHelper.floor_double(cf.maxY + 1.0D);
+		int b5 = MathHelper.floor_double(cf.minZ);
+		int b6 = MathHelper.floor_double(cf.maxZ + 1.0D);
+
+		for(int i = b; i < b2; ++i) {
+			for(int j = b3; j < b4; ++j) {
+				for(int k = b5; k < b6; ++k) {
+					Block ly1 = Block.blocksList[this.getBlockId(i, j, k)];
+					if(ly1 != null && ly1.material == gb) {
+						int e = this.getBlockMetadata(i, j, k);
+						double n = (double)(j + 1);
+						if(e < 8) {
+							n = (double)(j + 1) - (double)e / 8.0D;
+						}
+
+						if(n >= cf.minY) {
 							return true;
 						}
 					}
@@ -1363,68 +1301,65 @@
 		return false;
 	}
 
-	public void createExplosion(Entity var1, double var2, double var4, double var6, float var8) {
-		(new Explosion()).doExplosion(this, var1, var2, var4, var6, var8);
+	public void createExplosion(Entity kh, double n, double n2, double n3, float n4) {
+		(new Explosion()).doExplosion(this, kh, n, n2, n3, n4);
 	}
 
-	public float getBlockDensity(Vec3D var1, AxisAlignedBB var2) {
-		double var3 = 1.0D / ((var2.maxX - var2.minX) * 2.0D + 1.0D);
-		double var5 = 1.0D / ((var2.maxY - var2.minY) * 2.0D + 1.0D);
-		double var7 = 1.0D / ((var2.maxZ - var2.minZ) * 2.0D + 1.0D);
-		int var9 = 0;
-		int var10 = 0;
+	public float getBlockDensity(Vec3D aj, AxisAlignedBB cf) {
+		double n = 1.0D / ((cf.maxX - cf.minX) * 2.0D + 1.0D);
+		double n2 = 1.0D / ((cf.maxY - cf.minY) * 2.0D + 1.0D);
+		double n3 = 1.0D / ((cf.maxZ - cf.minZ) * 2.0D + 1.0D);
+		int n4 = 0;
+		int n5 = 0;
 
-		for(float var11 = 0.0F; var11 <= 1.0F; var11 = (float)((double)var11 + var3)) {
-			for(float var12 = 0.0F; var12 <= 1.0F; var12 = (float)((double)var12 + var5)) {
-				for(float var13 = 0.0F; var13 <= 1.0F; var13 = (float)((double)var13 + var7)) {
-					double var14 = var2.minX + (var2.maxX - var2.minX) * (double)var11;
-					double var16 = var2.minY + (var2.maxY - var2.minY) * (double)var12;
-					double var18 = var2.minZ + (var2.maxZ - var2.minZ) * (double)var13;
-					if(this.rayTraceBlocks(Vec3D.createVector(var14, var16, var18), var1) == null) {
-						++var9;
+		for(float n6 = 0.0F; n6 <= 1.0F; n6 += (float)n) {
+			for(float n7 = 0.0F; n7 <= 1.0F; n7 += (float)n2) {
+				for(float n8 = 0.0F; n8 <= 1.0F; n8 += (float)n3) {
+					if(this.rayTraceBlocks(Vec3D.createVector(cf.minX + (cf.maxX - cf.minX) * (double)n6, cf.minY + (cf.maxY - cf.minY) * (double)n7, cf.minZ + (cf.maxZ - cf.minZ) * (double)n8), aj) == null) {
+						++n4;
 					}
 
-					++var10;
+					++n5;
 				}
 			}
 		}
 
-		return (float)var9 / (float)var10;
-	}
-
-	public void extinguishFire(int var1, int var2, int var3, int var4) {
-		if(var4 == 0) {
-			--var2;
-		}
-
-		if(var4 == 1) {
-			++var2;
-		}
-
-		if(var4 == 2) {
-			--var3;
-		}
-
-		if(var4 == 3) {
-			++var3;
-		}
-
-		if(var4 == 4) {
-			--var1;
-		}
-
-		if(var4 == 5) {
-			++var1;
-		}
-
-		if(this.getBlockId(var1, var2, var3) == Block.fire.blockID) {
-			this.playSoundEffect((double)((float)var1 + 0.5F), (double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), "random.fizz", 0.5F, 2.6F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.8F);
-			this.setBlockWithNotify(var1, var2, var3, 0);
-		}
-
-	}
-
-	public Entity createDebugPlayer(Class var1) {
+		return (float)n4 / (float)n5;
+	}
+
+	public void extinguishFire(int n, int n2, int n3, int n4) {
+		if(n4 == 0) {
+			--n2;
+		}
+
+		if(n4 == 1) {
+			++n2;
+		}
+
+		if(n4 == 2) {
+			--n3;
+		}
+
+		if(n4 == 3) {
+			++n3;
+		}
+
+		if(n4 == 4) {
+			--n;
+		}
+
+		if(n4 == 5) {
+			++n;
+		}
+
+		if(this.getBlockId(n, n2, n3) == Block.fire.blockID) {
+			this.playSoundEffect((double)((float)n + 0.5F), (double)((float)n2 + 0.5F), (double)((float)n3 + 0.5F), "random.fizz", 0.5F, 2.6F + (this.rand.nextFloat() - this.rand.nextFloat()) * 0.8F);
+			this.setBlockWithNotify(n, n2, n3, 0);
+		}
+
+	}
+
+	public Entity createDebugPlayer(Class clazz) {
 		return null;
 	}
 
@@ -1432,42 +1367,42 @@
 		return "All: " + this.loadedEntityList.size();
 	}
 
-	public TileEntity getBlockTileEntity(int var1, int var2, int var3) {
-		Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-		return var4 != null ? var4.getChunkBlockTileEntity(var1 & 15, var2, var3 & 15) : null;
-	}
-
-	public void setBlockTileEntity(int var1, int var2, int var3, TileEntity var4) {
-		Chunk var5 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-		if(var5 != null) {
-			var5.setChunkBlockTileEntity(var1 & 15, var2, var3 & 15, var4);
-		}
-
-	}
-
-	public void removeBlockTileEntity(int var1, int var2, int var3) {
-		Chunk var4 = this.getChunkFromChunkCoords(var1 >> 4, var3 >> 4);
-		if(var4 != null) {
-			var4.removeChunkBlockTileEntity(var1 & 15, var2, var3 & 15);
-		}
-
-	}
-
-	public boolean isBlockNormalCube(int var1, int var2, int var3) {
-		Block var4 = Block.blocksList[this.getBlockId(var1, var2, var3)];
-		return var4 == null ? false : var4.isOpaqueCube();
-	}
-
-	public void saveWorldIndirectly(IProgressUpdate var1) {
-		this.saveWorld(true, var1);
+	public TileEntity getBlockTileEntity(int n, int n2, int n3) {
+		Chunk b = this.getChunkFromChunkCoords(n >> 4, n3 >> 4);
+		return b != null ? b.getChunkBlockTileEntity(n & 15, n2, n3 & 15) : null;
+	}
+
+	public void setBlockTileEntity(int n, int n2, int n3, TileEntity ic) {
+		Chunk b = this.getChunkFromChunkCoords(n >> 4, n3 >> 4);
+		if(b != null) {
+			b.setChunkBlockTileEntity(n & 15, n2, n3 & 15, ic);
+		}
+
+	}
+
+	public void removeBlockTileEntity(int n, int n2, int n3) {
+		Chunk b = this.getChunkFromChunkCoords(n >> 4, n3 >> 4);
+		if(b != null) {
+			b.removeChunkBlockTileEntity(n & 15, n2, n3 & 15);
+		}
+
+	}
+
+	public boolean isBlockNormalCube(int n, int n2, int n3) {
+		Block ly1 = Block.blocksList[this.getBlockId(n, n2, n3)];
+		return ly1 != null && ly1.isOpaqueCube();
+	}
+
+	public void saveWorldIndirectly(IProgressUpdate nu) {
+		this.saveWorld(true, nu);
 	}
 
 	public boolean updatingLighting() {
-		int var1 = 1000;
+		int n = 1000;
 
 		while(this.lightingToUpdate.size() > 0) {
-			--var1;
-			if(var1 <= 0) {
+			--n;
+			if(n <= 0) {
 				return true;
 			}
 
@@ -1477,30 +1412,28 @@
 		return false;
 	}
 
-	public void scheduleLightingUpdate(EnumSkyBlock var1, int var2, int var3, int var4, int var5, int var6, int var7) {
-		this.scheduleLightingUpdate_do(var1, var2, var3, var4, var5, var6, var7, true);
+	public void scheduleLightingUpdate(EnumSkyBlock by, int n, int n2, int n3, int n4, int n5, int n6) {
+		this.scheduleLightingUpdate_do(by, n, n2, n3, n4, n5, n6, true);
 	}
 
-	public void scheduleLightingUpdate_do(EnumSkyBlock var1, int var2, int var3, int var4, int var5, int var6, int var7, boolean var8) {
-		int var9 = (var5 + var2) / 2;
-		int var10 = (var7 + var4) / 2;
-		if(this.blockExists(var9, 64, var10)) {
-			int var11 = this.lightingToUpdate.size();
-			if(var8) {
-				int var12 = 4;
-				if(var12 > var11) {
-					var12 = var11;
+	public void scheduleLightingUpdate_do(EnumSkyBlock by, int n, int n2, int n3, int n4, int n5, int n6, boolean b) {
+		if(this.blockExists((n4 + n) / 2, 64, (n6 + n3) / 2)) {
+			int size = this.lightingToUpdate.size();
+			if(b) {
+				int n7 = 4;
+				if(n7 > size) {
+					n7 = size;
 				}
 
-				for(int var13 = 0; var13 < var12; ++var13) {
-					MetadataChunkBlock var14 = (MetadataChunkBlock)this.lightingToUpdate.get(this.lightingToUpdate.size() - var13 - 1);
-					if(var14.skyBlock == var1 && var14.getLightUpdated(var2, var3, var4, var5, var6, var7)) {
+				for(int i = 0; i < n7; ++i) {
+					MetadataChunkBlock kn = (MetadataChunkBlock)this.lightingToUpdate.get(this.lightingToUpdate.size() - i - 1);
+					if(kn.skyBlock == by && kn.getLightUpdated(n, n2, n3, n4, n5, n6)) {
 						return;
 					}
 				}
 			}
 
-			this.lightingToUpdate.add(new MetadataChunkBlock(var1, var2, var3, var4, var5, var6, var7));
+			this.lightingToUpdate.add(new MetadataChunkBlock(by, n, n2, n3, n4, n5, n6));
 			if(this.lightingToUpdate.size() > 100000) {
 				while(this.lightingToUpdate.size() > '\uc350') {
 					this.updatingLighting();
@@ -1511,21 +1444,21 @@
 	}
 
 	public void calculateInitialSkylight() {
-		int var1 = this.calculateSkylightSubtracted(1.0F);
-		if(var1 != this.skylightSubtracted) {
-			this.skylightSubtracted = var1;
+		int a = this.calculateSkylightSubtracted(1.0F);
+		if(a != this.skylightSubtracted) {
+			this.skylightSubtracted = a;
 		}
 
 	}
 
 	public void tick() {
 		this.chunkProvider.unload100OldestChunks();
-		int var1 = this.calculateSkylightSubtracted(1.0F);
-		if(var1 != this.skylightSubtracted) {
-			this.skylightSubtracted = var1;
+		int a = this.calculateSkylightSubtracted(1.0F);
+		if(a != this.skylightSubtracted) {
+			this.skylightSubtracted = a;
 
-			for(int var2 = 0; var2 < this.worldAccesses.size(); ++var2) {
-				((IWorldAccess)this.worldAccesses.get(var2)).updateAllRenderers();
+			for(int i = 0; i < this.worldAccesses.size(); ++i) {
+				((IWorldAccess)this.worldAccesses.get(i)).updateAllRenderers();
 			}
 		}
 
@@ -1541,19 +1474,19 @@
 	protected void updateBlocksAndPlayCaveSounds() {
 		this.positionsToUpdate.clear();
 
-		int var3;
-		int var4;
-		int var6;
-		int var7;
-		for(int var1 = 0; var1 < this.playerEntities.size(); ++var1) {
-			EntityPlayer var2 = (EntityPlayer)this.playerEntities.get(var1);
-			var3 = MathHelper.floor_double(var2.posX / 16.0D);
-			var4 = MathHelper.floor_double(var2.posZ / 16.0D);
-			byte var5 = 9;
+		int n2;
+		int n3;
+		int l;
+		int n13;
+		for(int ol = 0; ol < this.playerEntities.size(); ++ol) {
+			EntityPlayer dm = (EntityPlayer)this.playerEntities.get(ol);
+			n2 = MathHelper.floor_double(dm.posX / 16.0D);
+			n3 = MathHelper.floor_double(dm.posZ / 16.0D);
+			byte b3 = 9;
 
-			for(var6 = -var5; var6 <= var5; ++var6) {
-				for(var7 = -var5; var7 <= var5; ++var7) {
-					this.positionsToUpdate.add(new ChunkCoordIntPair(var6 + var3, var7 + var4));
+			for(l = -b3; l <= b3; ++l) {
+				for(n13 = -b3; n13 <= b3; ++n13) {
+					this.positionsToUpdate.add(new ChunkCoordIntPair(l + n2, n13 + n3));
 				}
 			}
 		}
@@ -1562,89 +1495,89 @@
 			--this.soundCounter;
 		}
 
-		Iterator var12 = this.positionsToUpdate.iterator();
+		Iterator var15 = this.positionsToUpdate.iterator();
 
-		while(var12.hasNext()) {
-			ChunkCoordIntPair var13 = (ChunkCoordIntPair)var12.next();
-			var3 = var13.chunkXPos * 16;
-			var4 = var13.chunkZPos * 16;
-			Chunk var14 = this.getChunkFromChunkCoords(var13.chunkXPos, var13.chunkZPos);
-			int var8;
-			int var9;
-			int var10;
+		while(var15.hasNext()) {
+			ChunkCoordIntPair var14 = (ChunkCoordIntPair)var15.next();
+			n2 = var14.chunkXPos * 16;
+			n3 = var14.chunkZPos * 16;
+			Chunk var16 = this.getChunkFromChunkCoords(var14.chunkXPos, var14.chunkZPos);
+			int n14;
+			int n15;
+			int paramInt2;
 			if(this.soundCounter == 0) {
 				this.updateLCG = this.updateLCG * 3 + this.DIST_HASH_MAGIC;
-				var6 = this.updateLCG >> 2;
-				var7 = var6 & 15;
-				var8 = var6 >> 8 & 15;
-				var9 = var6 >> 16 & 127;
-				var10 = var14.getBlockID(var7, var9, var8);
-				var7 += var3;
-				var8 += var4;
-				if(var10 == 0 && this.getBlockLightValue(var7, var9, var8) <= this.rand.nextInt(8) && this.getSavedLightValue(EnumSkyBlock.Sky, var7, var9, var8) <= 0) {
-					EntityPlayer var11 = this.getClosestPlayer((double)var7 + 0.5D, (double)var9 + 0.5D, (double)var8 + 0.5D, 8.0D);
-					if(var11 != null && var11.getDistanceSq((double)var7 + 0.5D, (double)var9 + 0.5D, (double)var8 + 0.5D) > 4.0D) {
-						this.playSoundEffect((double)var7 + 0.5D, (double)var9 + 0.5D, (double)var8 + 0.5D, "ambient.cave.cave", 0.7F, 0.8F + this.rand.nextFloat() * 0.2F);
-						this.soundCounter = this.rand.nextInt(12000) + 6000;
+				l = this.updateLCG >> 2;
+				n13 = l & 15;
+				n14 = l >> 8 & 15;
+				n15 = l >> 16 & 127;
+				paramInt2 = var16.getBlockID(n13, n15, n14);
+				int b4 = n13 + n2;
+				int n9 = n14 + n3;
+				if(paramInt2 == 0 && this.getBlockLightValue(b4, n15, n9) <= this.rand.nextInt(8) && this.getSavedLightValue(EnumSkyBlock.Sky, b4, n15, n9) <= 0) {
+					EntityPlayer a2 = this.getClosestPlayer((double)b4 + 0.5D, (double)n15 + 0.5D, (double)n9 + 0.5D, 8.0D);
+					if(a2 != null && a2.getDistanceSq((double)b4 + 0.5D, (double)n15 + 0.5D, (double)n9 + 0.5D) > 4.0D) {
+							this.playSoundEffect((double)b4 + 0.5D, (double)n15 + 0.5D, (double)n9 + 0.5D, "ambient.cave.cave", 0.7F, 0.8F + this.rand.nextFloat() * 0.2F);
+					this.soundCounter = this.rand.nextInt(12000) + 6000;
 					}
 				}
 			}
 
 			if(this.snowCovered && this.rand.nextInt(4) == 0) {
 				this.updateLCG = this.updateLCG * 3 + this.DIST_HASH_MAGIC;
-				var6 = this.updateLCG >> 2;
-				var7 = var6 & 15;
-				var8 = var6 >> 8 & 15;
-				var9 = this.getTopSolidOrLiquidBlock(var7 + var3, var8 + var4);
-				if(var9 >= 0 && var9 < 128 && var14.getSavedLightValue(EnumSkyBlock.Block, var7, var9, var8) < 10) {
-					var10 = var14.getBlockID(var7, var9 - 1, var8);
-					if(var14.getBlockID(var7, var9, var8) == 0 && Block.snow.canPlaceBlockAt(this, var7 + var3, var9, var8 + var4)) {
-						this.setBlockWithNotify(var7 + var3, var9, var8 + var4, Block.snow.blockID);
+				l = this.updateLCG >> 2;
+				n13 = l & 15;
+				n14 = l >> 8 & 15;
+				n15 = this.getTopSolidOrLiquidBlock(n13 + n2, n14 + n3);
+				if(n15 >= 0 && n15 < 128 && var16.getSavedLightValue(EnumSkyBlock.Block, n13, n15, n14) < 10) {
+					paramInt2 = var16.getBlockID(n13, n15 - 1, n14);
+					if(var16.getBlockID(n13, n15, n14) == 0 && Block.snow.canPlaceBlockAt(this, n13 + n2, n15, n14 + n3)) {
+						this.setBlockWithNotify(n13 + n2, n15, n14 + n3, Block.snow.blockID);
 					}
 
-					if(var10 == Block.waterStill.blockID && var14.getBlockMetadata(var7, var9 - 1, var8) == 0) {
-						this.setBlockWithNotify(var7 + var3, var9 - 1, var8 + var4, Block.ice.blockID);
+					if(paramInt2 == Block.waterStill.blockID && var16.getBlockMetadata(n13, n15 - 1, n14) == 0) {
+						this.setBlockWithNotify(n13 + n2, n15 - 1, n14 + n3, Block.ice.blockID);
 					}
 				}
 			}
 
-			for(var6 = 0; var6 < 80; ++var6) {
+			for(l = 0; l < 80; ++l) {
 				this.updateLCG = this.updateLCG * 3 + this.DIST_HASH_MAGIC;
-				var7 = this.updateLCG >> 2;
-				var8 = var7 & 15;
-				var9 = var7 >> 8 & 15;
-				var10 = var7 >> 16 & 127;
-				byte var15 = var14.blocks[var8 << 11 | var9 << 7 | var10];
-				if(Block.tickOnLoad[var15]) {
-					Block.blocksList[var15].updateTick(this, var8 + var3, var10, var9 + var4, this.rand);
+				n13 = this.updateLCG >> 2;
+				n14 = n13 & 15;
+				n15 = n13 >> 8 & 15;
+				paramInt2 = n13 >> 16 & 127;
+				byte var17 = var16.blocks[n14 << 11 | n15 << 7 | paramInt2];
+				if(Block.tickOnLoad[var17 & 255]) {
+					Block.blocksList[var17 & 255].updateTick(this, n14 + n2, paramInt2, n15 + n3, this.rand);
 				}
 			}
 		}
 
 	}
 
-	public boolean tickUpdates(boolean var1) {
-		int var2 = this.scheduledTickTreeSet.size();
-		if(var2 != this.scheduledTickSet.size()) {
+	public boolean tickUpdates(boolean b) {
+		int size = this.scheduledTickTreeSet.size();
+		if(size != this.scheduledTickSet.size()) {
 			throw new IllegalStateException("TickNextTick list out of synch");
 		} else {
-			if(var2 > 1000) {
-				var2 = 1000;
+			if(size > 1000) {
+				size = 1000;
 			}
 
-			for(int var3 = 0; var3 < var2; ++var3) {
-				NextTickListEntry var4 = (NextTickListEntry)this.scheduledTickTreeSet.first();
-				if(!var1 && var4.scheduledTime > this.worldTime) {
+			for(int i = 0; i < size; ++i) {
+				NextTickListEntry o = (NextTickListEntry)this.scheduledTickTreeSet.first();
+				if(!b && o.scheduledTime > this.worldTime) {
 					break;
 				}
 
-				this.scheduledTickTreeSet.remove(var4);
-				this.scheduledTickSet.remove(var4);
-				byte var5 = 8;
-				if(this.checkChunksExist(var4.xCoord - var5, var4.yCoord - var5, var4.zCoord - var5, var4.xCoord + var5, var4.yCoord + var5, var4.zCoord + var5)) {
-					int var6 = this.getBlockId(var4.xCoord, var4.yCoord, var4.zCoord);
-					if(var6 == var4.blockID && var6 > 0) {
-						Block.blocksList[var6].updateTick(this, var4.xCoord, var4.yCoord, var4.zCoord, this.rand);
+				this.scheduledTickTreeSet.remove(o);
+				this.scheduledTickSet.remove(o);
+				boolean n = true;
+				if(this.checkChunksExist(o.xCoord - 8, o.yCoord - 8, o.zCoord - 8, o.xCoord + 8, o.yCoord + 8, o.zCoord + 8)) {
+					int a = this.getBlockId(o.xCoord, o.yCoord, o.zCoord);
+					if(a == o.blockID && a > 0) {
+						Block.blocksList[a].updateTick(this, o.xCoord, o.yCoord, o.zCoord, this.rand);
 					}
 				}
 			}
@@ -1653,33 +1586,33 @@
 		}
 	}
 
-	public void randomDisplayUpdates(int var1, int var2, int var3) {
-		byte var4 = 16;
-		Random var5 = new Random();
+	public void randomDisplayUpdates(int n, int n2, int n3) {
+		boolean n4 = true;
+		Random paramRandom = new Random();
 
-		for(int var6 = 0; var6 < 1000; ++var6) {
-			int var7 = var1 + this.rand.nextInt(var4) - this.rand.nextInt(var4);
-			int var8 = var2 + this.rand.nextInt(var4) - this.rand.nextInt(var4);
-			int var9 = var3 + this.rand.nextInt(var4) - this.rand.nextInt(var4);
-			int var10 = this.getBlockId(var7, var8, var9);
-			if(var10 > 0) {
-				Block.blocksList[var10].randomDisplayTick(this, var7, var8, var9, var5);
+		for(int i = 0; i < 1000; ++i) {
+			int paramInt1 = n + this.rand.nextInt(16) - this.rand.nextInt(16);
+			int paramInt2 = n2 + this.rand.nextInt(16) - this.rand.nextInt(16);
+			int paramInt3 = n3 + this.rand.nextInt(16) - this.rand.nextInt(16);
+			int a = this.getBlockId(paramInt1, paramInt2, paramInt3);
+			if(a > 0) {
+				Block.blocksList[a].randomDisplayTick(this, paramInt1, paramInt2, paramInt3, paramRandom);
 			}
 		}
 
 	}
 
-	public List getEntitiesWithinAABBExcludingEntity(Entity var1, AxisAlignedBB var2) {
+	public List getEntitiesWithinAABBExcludingEntity(Entity kh, AxisAlignedBB cf) {
 		this.entitiesWithinAABBExcludingEntity.clear();
-		int var3 = MathHelper.floor_double((var2.minX - 2.0D) / 16.0D);
-		int var4 = MathHelper.floor_double((var2.maxX + 2.0D) / 16.0D);
-		int var5 = MathHelper.floor_double((var2.minZ - 2.0D) / 16.0D);
-		int var6 = MathHelper.floor_double((var2.maxZ + 2.0D) / 16.0D);
+		int b = MathHelper.floor_double((cf.minX - 2.0D) / 16.0D);
+		int b2 = MathHelper.floor_double((cf.maxX + 2.0D) / 16.0D);
+		int b3 = MathHelper.floor_double((cf.minZ - 2.0D) / 16.0D);
+		int b4 = MathHelper.floor_double((cf.maxZ + 2.0D) / 16.0D);
 
-		for(int var7 = var3; var7 <= var4; ++var7) {
-			for(int var8 = var5; var8 <= var6; ++var8) {
-				if(this.chunkExists(var7, var8)) {
-					this.getChunkFromChunkCoords(var7, var8).getEntitiesWithinAABBForEntity(var1, var2, this.entitiesWithinAABBExcludingEntity);
+		for(int i = b; i <= b2; ++i) {
+			for(int j = b3; j <= b4; ++j) {
+				if(this.chunkExists(i, j)) {
+					this.getChunkFromChunkCoords(i, j).getEntitiesWithinAABBForEntity(kh, cf, this.entitiesWithinAABBExcludingEntity);
 				}
 			}
 		}
@@ -1687,63 +1620,62 @@
 		return this.entitiesWithinAABBExcludingEntity;
 	}
 
-	public List getEntitiesWithinAABB(Class var1, AxisAlignedBB var2) {
-		int var3 = MathHelper.floor_double((var2.minX - 2.0D) / 16.0D);
-		int var4 = MathHelper.floor_double((var2.maxX + 2.0D) / 16.0D);
-		int var5 = MathHelper.floor_double((var2.minZ - 2.0D) / 16.0D);
-		int var6 = MathHelper.floor_double((var2.maxZ + 2.0D) / 16.0D);
-		ArrayList var7 = new ArrayList();
+	public List getEntitiesWithinAABB(Class clazz, AxisAlignedBB cf) {
+		int b = MathHelper.floor_double((cf.minX - 2.0D) / 16.0D);
+		int b2 = MathHelper.floor_double((cf.maxX + 2.0D) / 16.0D);
+		int b3 = MathHelper.floor_double((cf.minZ - 2.0D) / 16.0D);
+		int b4 = MathHelper.floor_double((cf.maxZ + 2.0D) / 16.0D);
+		ArrayList list = new ArrayList();
 
-		for(int var8 = var3; var8 <= var4; ++var8) {
-			for(int var9 = var5; var9 <= var6; ++var9) {
-				if(this.chunkExists(var8, var9)) {
-					this.getChunkFromChunkCoords(var8, var9).getEntitiesOfTypeWithinAAAB(var1, var2, var7);
+		for(int i = b; i <= b2; ++i) {
+			for(int j = b3; j <= b4; ++j) {
+				if(this.chunkExists(i, j)) {
+					this.getChunkFromChunkCoords(i, j).getEntitiesOfTypeWithinAAAB(clazz, cf, list);
 				}
 			}
 		}
 
-		return var7;
+		return list;
 	}
 
 	public List getLoadedEntityList() {
 		return this.loadedEntityList;
 	}
 
-	public void updateTileEntityChunkAndDoNothing(int var1, int var2, int var3, TileEntity var4) {
-		if(this.blockExists(var1, var2, var3)) {
-			this.getChunkFromBlockCoords(var1, var3).setChunkModified();
+	public void updateTileEntityChunkAndDoNothing(int n, int n2, int n3, TileEntity ic) {
+		if(this.blockExists(n, n2, n3)) {
+			this.getChunkFromBlockCoords(n, n3).setChunkModified();
 		}
 
-		for(int var5 = 0; var5 < this.worldAccesses.size(); ++var5) {
-			((IWorldAccess)this.worldAccesses.get(var5)).doNothingWithTileEntity(var1, var2, var3, var4);
+		for(int i = 0; i < this.worldAccesses.size(); ++i) {
+			((IWorldAccess)this.worldAccesses.get(i)).doNothingWithTileEntity(n, n2, n3, ic);
 		}
 
 	}
 
-	public int countEntities(Class var1) {
-		int var2 = 0;
+	public int countEntities(Class clazz) {
+		int n = 0;
 
-		for(int var3 = 0; var3 < this.loadedEntityList.size(); ++var3) {
-			Entity var4 = (Entity)this.loadedEntityList.get(var3);
-			if(var1.isAssignableFrom(var4.getClass())) {
-				++var2;
+		for(int i = 0; i < this.loadedEntityList.size(); ++i) {
+			if(clazz.isAssignableFrom(((Entity)this.loadedEntityList.get(i)).getClass())) {
+				++n;
 			}
 		}
 
-		return var2;
+		return n;
 	}
 
-	public void addLoadedEntities(List var1) {
-		this.loadedEntityList.addAll(var1);
+	public void addLoadedEntities(List list) {
+		this.loadedEntityList.addAll(list);
 
-		for(int var2 = 0; var2 < var1.size(); ++var2) {
-			this.obtainEntitySkin((Entity)var1.get(var2));
+		for(int i = 0; i < list.size(); ++i) {
+			this.obtainEntitySkin((Entity)list.get(i));
 		}
 
 	}
 
-	public void unloadEntities(List var1) {
-		this.unloadedEntityList.addAll(var1);
+	public void unloadEntities(List list) {
+		this.unloadedEntityList.addAll(list);
 	}
 
 	public void dropOldChunks() {
@@ -1752,130 +1684,115 @@
 
 	}
 
-	public boolean canBlockBePlacedAt(int var1, int var2, int var3, int var4, boolean var5) {
-		int var6 = this.getBlockId(var2, var3, var4);
-		Block var7 = Block.blocksList[var6];
-		Block var8 = Block.blocksList[var1];
-		AxisAlignedBB var9 = var8.getCollisionBoundingBoxFromPool(this, var2, var3, var4);
-		if(var5) {
-			var9 = null;
+	public boolean canBlockBePlacedAt(int n, int n2, int n3, int n4, boolean b) {
+		Block ly1 = Block.blocksList[this.getBlockId(n2, n3, n4)];
+		Block ly2 = Block.blocksList[n];
+		AxisAlignedBB d = ly2.getCollisionBoundingBoxFromPool(this, n2, n3, n4);
+		if(b) {
+			d = null;
 		}
 
-		return var9 != null && !this.checkIfAABBIsClear(var9) ? false : (var7 != Block.waterMoving && var7 != Block.waterStill && var7 != Block.lavaMoving && var7 != Block.lavaStill && var7 != Block.fire && var7 != Block.snow ? var1 > 0 && var7 == null && var8.canPlaceBlockAt(this, var2, var3, var4) : true);
-	}
-
-	public PathEntity getPathToEntity(Entity var1, Entity var2, float var3) {
-		int var4 = MathHelper.floor_double(var1.posX);
-		int var5 = MathHelper.floor_double(var1.posY);
-		int var6 = MathHelper.floor_double(var1.posZ);
-		int var7 = (int)(var3 + 16.0F);
-		int var8 = var4 - var7;
-		int var9 = var5 - var7;
-		int var10 = var6 - var7;
-		int var11 = var4 + var7;
-		int var12 = var5 + var7;
-		int var13 = var6 + var7;
-		ChunkCache var14 = new ChunkCache(this, var8, var9, var10, var11, var12, var13);
-		return (new Pathfinder(var14)).createEntityPathTo(var1, var2, var3);
-	}
-
-	public PathEntity getEntityPathToXYZ(Entity var1, int var2, int var3, int var4, float var5) {
-		int var6 = MathHelper.floor_double(var1.posX);
-		int var7 = MathHelper.floor_double(var1.posY);
-		int var8 = MathHelper.floor_double(var1.posZ);
-		int var9 = (int)(var5 + 8.0F);
-		int var10 = var6 - var9;
-		int var11 = var7 - var9;
-		int var12 = var8 - var9;
-		int var13 = var6 + var9;
-		int var14 = var7 + var9;
-		int var15 = var8 + var9;
-		ChunkCache var16 = new ChunkCache(this, var10, var11, var12, var13, var14, var15);
-		return (new Pathfinder(var16)).createEntityPathTo(var1, var2, var3, var4, var5);
-	}
-
-	public boolean isBlockProvidingPowerTo(int var1, int var2, int var3, int var4) {
-		int var5 = this.getBlockId(var1, var2, var3);
-		return var5 == 0 ? false : Block.blocksList[var5].isIndirectlyPoweringTo(this, var1, var2, var3, var4);
-	}
-
-	public boolean isBlockGettingPowered(int var1, int var2, int var3) {
-		return this.isBlockProvidingPowerTo(var1, var2 - 1, var3, 0) ? true : (this.isBlockProvidingPowerTo(var1, var2 + 1, var3, 1) ? true : (this.isBlockProvidingPowerTo(var1, var2, var3 - 1, 2) ? true : (this.isBlockProvidingPowerTo(var1, var2, var3 + 1, 3) ? true : (this.isBlockProvidingPowerTo(var1 - 1, var2, var3, 4) ? true : this.isBlockProvidingPowerTo(var1 + 1, var2, var3, 5)))));
-	}
-
-	public boolean isBlockIndirectlyProvidingPowerTo(int var1, int var2, int var3, int var4) {
-		if(this.isBlockNormalCube(var1, var2, var3)) {
-			return this.isBlockGettingPowered(var1, var2, var3);
+		return (d == null || this.checkIfAABBIsClear(d)) && (ly1 == Block.waterMoving || ly1 == Block.waterStill || ly1 == Block.lavaMoving || ly1 == Block.lavaStill || ly1 == Block.fire || ly1 == Block.snow || n > 0 && ly1 == null && ly2.canPlaceBlockAt(this, n2, n3, n4));
+	}
+
+	public PathEntity getPathToEntity(Entity kh, Entity kh2, float n) {
+		int b = MathHelper.floor_double(kh.posX);
+		int b2 = MathHelper.floor_double(kh.posY);
+		int b3 = MathHelper.floor_double(kh.posZ);
+		int n2 = (int)(n + 16.0F);
+		return (new Pathfinder(new ChunkCache(this, b - n2, b2 - n2, b3 - n2, b + n2, b2 + n2, b3 + n2))).createEntityPathTo(kh, kh2, n);
+	}
+
+	public PathEntity getEntityPathToXYZ(Entity kh, int n, int n2, int n3, float n4) {
+		int b = MathHelper.floor_double(kh.posX);
+		int b2 = MathHelper.floor_double(kh.posY);
+		int b3 = MathHelper.floor_double(kh.posZ);
+		int n5 = (int)(n4 + 8.0F);
+		return (new Pathfinder(new ChunkCache(this, b - n5, b2 - n5, b3 - n5, b + n5, b2 + n5, b3 + n5))).createEntityPathTo(kh, n, n2, n3, n4);
+	}
+
+	public boolean isBlockProvidingPowerTo(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
+		int a = this.getBlockId(paramInt1, paramInt2, paramInt3);
+		return a != 0 && Block.blocksList[a].isIndirectlyPoweringTo(this, paramInt1, paramInt2, paramInt3, paramInt4);
+	}
+
+	public boolean isBlockGettingPowered(int n, int n2, int n3) {
+		return this.isBlockProvidingPowerTo(n, n2 - 1, n3, 0) || this.isBlockProvidingPowerTo(n, n2 + 1, n3, 1) || this.isBlockProvidingPowerTo(n, n2, n3 - 1, 2) || this.isBlockProvidingPowerTo(n, n2, n3 + 1, 3) || this.isBlockProvidingPowerTo(n - 1, n2, n3, 4) || this.isBlockProvidingPowerTo(n + 1, n2, n3, 5);
+	}
+
+	public boolean isBlockIndirectlyProvidingPowerTo(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
+		if(this.isBlockNormalCube(paramInt1, paramInt2, paramInt3)) {
+			return this.isBlockGettingPowered(paramInt1, paramInt2, paramInt3);
 		} else {
-			int var5 = this.getBlockId(var1, var2, var3);
-			return var5 == 0 ? false : Block.blocksList[var5].isPoweringTo(this, var1, var2, var3, var4);
-		}
-	}
-
-	public boolean isBlockIndirectlyGettingPowered(int var1, int var2, int var3) {
-		return this.isBlockIndirectlyProvidingPowerTo(var1, var2 - 1, var3, 0) ? true : (this.isBlockIndirectlyProvidingPowerTo(var1, var2 + 1, var3, 1) ? true : (this.isBlockIndirectlyProvidingPowerTo(var1, var2, var3 - 1, 2) ? true : (this.isBlockIndirectlyProvidingPowerTo(var1, var2, var3 + 1, 3) ? true : (this.isBlockIndirectlyProvidingPowerTo(var1 - 1, var2, var3, 4) ? true : this.isBlockIndirectlyProvidingPowerTo(var1 + 1, var2, var3, 5)))));
-	}
-
-	public EntityPlayer getClosestPlayerToEntity(Entity var1, double var2) {
-		return this.getClosestPlayer(var1.posX, var1.posY, var1.posZ, var2);
-	}
-
-	public EntityPlayer getClosestPlayer(double var1, double var3, double var5, double var7) {
-		double var9 = -1.0D;
-		EntityPlayer var11 = null;
-
-		for(int var12 = 0; var12 < this.playerEntities.size(); ++var12) {
-			EntityPlayer var13 = (EntityPlayer)this.playerEntities.get(var12);
-			double var14 = var13.getDistanceSq(var1, var3, var5);
-			if((var7 < 0.0D || var14 < var7 * var7) && (var9 == -1.0D || var14 < var9)) {
-				var9 = var14;
-				var11 = var13;
-			}
-		}
-
-		return var11;
-	}
-
-	public void setChunkData(int var1, int var2, int var3, int var4, int var5, int var6, byte[] var7) {
-		int var8 = var1 >> 4;
-		int var9 = var3 >> 4;
-		int var10 = var1 + var4 - 1 >> 4;
-		int var11 = var3 + var6 - 1 >> 4;
-		int var12 = 0;
-		int var13 = var2;
-		int var14 = var2 + var5;
-		if(var2 < 0) {
-			var13 = 0;
-		}
-
-		if(var14 > 128) {
-			var14 = 128;
-		}
-
-		for(int var15 = var8; var15 <= var10; ++var15) {
-			int var16 = var1 - var15 * 16;
-			int var17 = var1 + var4 - var15 * 16;
-			if(var16 < 0) {
-				var16 = 0;
-			}
-
-			if(var17 > 16) {
-				var17 = 16;
-			}
-
-			for(int var18 = var9; var18 <= var11; ++var18) {
-				int var19 = var3 - var18 * 16;
-				int var20 = var3 + var6 - var18 * 16;
-				if(var19 < 0) {
-					var19 = 0;
-				}
-
-				if(var20 > 16) {
-					var20 = 16;
-				}
-
-				var12 = this.getChunkFromChunkCoords(var15, var18).setChunkData(var7, var16, var13, var19, var17, var14, var20, var12);
-				this.markBlocksDirty(var15 * 16 + var16, var13, var18 * 16 + var19, var15 * 16 + var17, var14, var18 * 16 + var20);
+			int a = this.getBlockId(paramInt1, paramInt2, paramInt3);
+			return a != 0 && Block.blocksList[a].isPoweringTo(this, paramInt1, paramInt2, paramInt3, paramInt4);
+		}
+	}
+
+	public boolean isBlockIndirectlyGettingPowered(int n, int n2, int n3) {
+		return this.isBlockIndirectlyProvidingPowerTo(n, n2 - 1, n3, 0) || this.isBlockIndirectlyProvidingPowerTo(n, n2 + 1, n3, 1) || this.isBlockIndirectlyProvidingPowerTo(n, n2, n3 - 1, 2) || this.isBlockIndirectlyProvidingPowerTo(n, n2, n3 + 1, 3) || this.isBlockIndirectlyProvidingPowerTo(n - 1, n2, n3, 4) || this.isBlockIndirectlyProvidingPowerTo(n + 1, n2, n3, 5);
+	}
+
+	public EntityPlayer getClosestPlayerToEntity(Entity kh, double n) {
+		return this.getClosestPlayer(kh.posX, kh.posY, kh.posZ, n);
+	}
+
+	public EntityPlayer getClosestPlayer(double n, double n2, double n3, double n4) {
+		double n5 = -1.0D;
+		EntityPlayer dm = null;
+
+		for(int i = 0; i < this.playerEntities.size(); ++i) {
+			EntityPlayer dm2 = (EntityPlayer)this.playerEntities.get(i);
+			double d = dm2.getDistanceSq(n, n2, n3);
+			if((n4 < 0.0D || d < n4 * n4) && (n5 == -1.0D || d < n5)) {
+				n5 = d;
+				dm = dm2;
+			}
+		}
+
+		return dm;
+	}
+
+	public void setChunkData(int n, int n2, int n3, int n4, int n5, int n6, byte[] array) {
+		int n7 = n >> 4;
+		int n8 = n3 >> 4;
+		int n9 = n + n4 - 1 >> 4;
+		int n10 = n3 + n6 - 1 >> 4;
+		int a = 0;
+		int n11 = n2;
+		int n12 = n2 + n5;
+		if(n2 < 0) {
+			n11 = 0;
+		}
+
+		if(n12 > 128) {
+			n12 = 128;
+		}
+
+		for(int i = n7; i <= n9; ++i) {
+			int n13 = n - i * 16;
+			int n14 = n + n4 - i * 16;
+			if(n13 < 0) {
+				n13 = 0;
+			}
+
+			if(n14 > 16) {
+				n14 = 16;
+			}
+
+			for(int j = n8; j <= n10; ++j) {
+				int n15 = n3 - j * 16;
+				int n16 = n3 + n6 - j * 16;
+				if(n15 < 0) {
+					n15 = 0;
+				}
+
+				if(n16 > 16) {
+					n16 = 16;
+				}
+
+				a = this.getChunkFromChunkCoords(i, j).setChunkData(array, n13, n11, n15, n14, n12, n16, a);
+				this.markBlocksDirty(i * 16 + n13, n11, j * 16 + n15, i * 16 + n14, n12, j * 16 + n16);
 			}
 		}
 
@@ -1886,50 +1803,39 @@
 
 	public void checkSessionLock() {
 		try {
-			File var1 = new File(this.saveDirectory, "session.lock");
-			DataInputStream var2 = new DataInputStream(new FileInputStream(var1));
+			DataInputStream ex = new DataInputStream(new FileInputStream(new File(this.saveDirectory, "session.lock")));
 
 			try {
-				if(var2.readLong() != this.lockTimestamp) {
+				if(ex.readLong() != this.lockTimestamp) {
 					throw new MinecraftException("The save is being accessed from another location, aborting");
 				}
 			} finally {
-				var2.close();
+				ex.close();
 			}
 
-		} catch (IOException var7) {
+		} catch (IOException var6) {
 			throw new MinecraftException("Failed to check session lock, aborting");
 		}
 	}
 
-	public void setWorldTime(long var1) {
-		this.worldTime = var1;
+	public void setWorldTime(long c) {
+		this.worldTime = c;
 	}
 
-	public void joinEntityInSurroundings(Entity var1) {
-		int var2 = MathHelper.floor_double(var1.posX / 16.0D);
-		int var3 = MathHelper.floor_double(var1.posZ / 16.0D);
-		byte var4 = 2;
+	public void joinEntityInSurroundings(Entity kh) {
+		int b = MathHelper.floor_double(kh.posX / 16.0D);
+		int b2 = MathHelper.floor_double(kh.posZ / 16.0D);
+		byte n = 2;
 
-		for(int var5 = var2 - var4; var5 <= var2 + var4; ++var5) {
-			for(int var6 = var3 - var4; var6 <= var3 + var4; ++var6) {
-				this.getChunkFromChunkCoords(var5, var6);
+		for(int i = b - n; i <= b + n; ++i) {
+			for(int j = b2 - n; j <= b2 + n; ++j) {
+				this.getChunkFromChunkCoords(i, j);
 			}
 		}
 
-		if(!this.loadedEntityList.contains(var1)) {
+		if(!this.loadedEntityList.contains(kh)) {
 			System.out.println("REINSERTING PLAYER!");
-			this.loadedEntityList.add(var1);
-		}
-
-	}
-
-	static {
-		float var0 = 0.05F;
-
-		for(int var1 = 0; var1 <= 15; ++var1) {
-			float var2 = 1.0F - (float)var1 / 15.0F;
-			lightBrightnessTable[var1] = (1.0F - var2) / (var2 * 3.0F + 1.0F) * (1.0F - var0) + var0;
+			this.loadedEntityList.add(kh);
 		}
 
 	}
--- net/minecraft/src/GuiMainMenu.java
+++ net/minecraft/src/GuiMainMenu.java
@@ -11,7 +11,7 @@
 
 public class GuiMainMenu extends GuiScreen {
 	private static final Random rand = new Random();
-	String[] logoBlockLayers = new String[]{" *   * * *   * *** *** *** *** *** ***", " ** ** * **  * *   *   * * * * *    * ", " * * * * * * * **  *   **  *** **   * ", " *   * * *  ** *   *   * * * * *    * ", " *   * * *   * *** *** * * * * *    * "};
+	String[] logoBlockLayers = new String[]{"*** ***  *   * ***", "*   *  * ** ** *  ", "*** ***  * * * ***", "  * *  * *   * *  ", "*** ***  *   * *  "};
 	private LogoEffectRandomizer[][] logoEffects;
 	private float updateCounter = 0.0F;
 	private String splashString = "missingno";
@@ -57,9 +57,7 @@
 	public void initGui() {
 		Calendar var1 = Calendar.getInstance();
 		var1.setTime(new Date());
-		if(var1.get(2) + 1 == 11 && var1.get(5) == 9) {
-			this.splashString = "Happy birthday, ez!";
-		} else if(var1.get(2) + 1 == 6 && var1.get(5) == 1) {
+                if(var1.get(2) + 1 == 6 && var1.get(5) == 1) {
 			this.splashString = "Happy birthday, Notch!";
 		} else if(var1.get(2) + 1 == 12 && var1.get(5) == 24) {
 			this.splashString = "Merry X-mas!";
@@ -69,10 +67,10 @@
 
 		this.controlList.clear();
 		this.controlList.add(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 48, "Singleplayer"));
-		this.controlList.add(new GuiButton(2, this.width / 2 - 100, this.height / 4 + 72, "Multiplayer"));
-		this.controlList.add(new GuiButton(3, this.width / 2 - 100, this.height / 4 + 96, "Play tutorial level"));
-		this.controlList.add(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 120 + 12, "Options..."));
-		((GuiButton)this.controlList.get(2)).enabled = false;
+		this.controlList.add(new GuiButton(2, this.width / 2 - 100, this.height / 4 + 72, "Multiplayer is disabled"));
+		this.controlList.add(new GuiButton(3, this.width / 2 - 100, this.height / 4 + 96, "Options"));
+		this.controlList.add(new GuiButton(4, this.width / 2 - 100, this.height / 4 + 120 + 12, "Quit game"));
+		((GuiButton)this.controlList.get(1)).enabled = false;
 		if(this.mc.session == null) {
 			((GuiButton)this.controlList.get(1)).enabled = false;
 		}
@@ -80,16 +78,18 @@
 	}
 
 	protected void actionPerformed(GuiButton var1) {
-		if(var1.id == 0) {
+
+	    if(var1.id == 4) {
+            this.mc.shutdown();
+		}
+		
+		if(var1.id == 3) {
 			this.mc.displayGuiScreen(new GuiOptions(this, this.mc.options));
 		}
 
 		if(var1.id == 1) {
 			this.mc.displayGuiScreen(new GuiSelectWorld(this));
-		}
-
-		if(var1.id == 2) {
-			this.mc.displayGuiScreen(new GuiMultiplayer(this));
+			
 		}
 
 	}
@@ -109,16 +109,16 @@
 		GL11.glScalef(var5, var5, var5);
 		this.drawCenteredString(this.fontRenderer, this.splashString, 0, -8, 16776960);
 		GL11.glPopMatrix();
-		String var6 = "Copyright Mojang Specifications. Do not distribute.";
+		String var6 = "Copyright Mojang. Do not distribute.";
 		this.drawString(this.fontRenderer, var6, this.width - this.fontRenderer.getStringWidth(var6) - 2, this.height - 10, 16777215);
 		long var7 = Runtime.getRuntime().maxMemory();
 		long var9 = Runtime.getRuntime().totalMemory();
 		long var11 = Runtime.getRuntime().freeMemory();
 		long var13 = var7 - var11;
-		var6 = "Free memory: " + var13 * 100L / var7 + "% of " + var7 / 1024L / 1024L + "MB";
-		this.drawString(this.fontRenderer, var6, this.width - this.fontRenderer.getStringWidth(var6) - 2, 2, 8421504);
-		var6 = "Allocated memory: " + var9 * 100L / var7 + "% (" + var9 / 1024L / 1024L + "MB)";
-		this.drawString(this.fontRenderer, var6, this.width - this.fontRenderer.getStringWidth(var6) - 2, 12, 8421504);
+		//var6 = "Free memory: " + var13 * 100L / var7 + "% of " + var7 / 1024L / 1024L + "MB";
+		//this.drawString(this.fontRenderer, var6, this.width - this.fontRenderer.getStringWidth(var6) - 2, 2, 8421504);
+		//var6 = "Allocated memory: " + var9 * 100L / var7 + "% (" + var9 / 1024L / 1024L + "MB)";
+		//this.drawString(this.fontRenderer, var6, this.width - this.fontRenderer.getStringWidth(var6) - 2, 12, 8421504);
 		super.drawScreen(var1, var2, var3);
 	}
 
@@ -199,7 +199,7 @@
 						GL11.glTranslatef((float)var7, (float)var6, var10);
 						GL11.glScalef(var11, var11, var11);
 						GL11.glRotatef(var13, 0.0F, 1.0F, 0.0F);
-						var5.renderBlockAsItem(Block.stone, var12);
+						var5.renderBlockAsItem(Block.planksWhite, var12);
 						GL11.glPopMatrix();
 					}
 				}
--- net/minecraft/src/MathHelper.java
+++ net/minecraft/src/MathHelper.java
@@ -3,55 +3,68 @@
 public class MathHelper {
 	private static float[] SIN_TABLE = new float[65536];
 
-	public static final float sin(float var0) {
-		return SIN_TABLE[(int)(var0 * 10430.378F) & '\uffff'];
-	}
-
-	public static final float cos(float var0) {
-		return SIN_TABLE[(int)(var0 * 10430.378F + 16384.0F) & '\uffff'];
-	}
-
-	public static final float sqrt_float(float var0) {
-		return (float)Math.sqrt((double)var0);
-	}
-
-	public static final float sqrt_double(double var0) {
-		return (float)Math.sqrt(var0);
-	}
-
-	public static int floor_float(float var0) {
-		int var1 = (int)var0;
-		return var0 < (float)var1 ? var1 - 1 : var1;
-	}
-
-	public static int floor_double(double var0) {
-		int var2 = (int)var0;
-		return var0 < (double)var2 ? var2 - 1 : var2;
-	}
-
-	public static float abs(float var0) {
-		return var0 >= 0.0F ? var0 : -var0;
-	}
-
-	public static double abs_max(double var0, double var2) {
-		if(var0 < 0.0D) {
-			var0 = -var0;
-		}
-
-		if(var2 < 0.0D) {
-			var2 = -var2;
-		}
-
-		return var0 > var2 ? var0 : var2;
-	}
-
-	public static int bucketInt(int var0, int var1) {
-		return var0 < 0 ? -((-var0 - 1) / var1) - 1 : var0 / var1;
+	public static final float sin(float value) {
+		return SIN_TABLE[(int)(value * 10430.378F) & 65535];
+	}
+
+	public static final float cos(float value) {
+		return SIN_TABLE[(int)(value * 10430.378F + 16384.0F) & 65535];
+	}
+
+	public static final float sqrt_float(float value) {
+		return (float)Math.sqrt((double)value);
+	}
+
+	public static final float sqrt_double(double value) {
+		return (float)Math.sqrt(value);
+	}
+
+	public static int floor_float(float value) {
+		int i1 = (int)value;
+		return value < (float)i1 ? i1 - 1 : i1;
+	}
+
+	public static int floor_double(double value) {
+		int i2 = (int)value;
+		return value < (double)i2 ? i2 - 1 : i2;
+	}
+
+	public static float abs(float value) {
+		return value >= 0.0F ? value : -value;
+	}
+
+	public static double abs_max(double value1, double value2) {
+		if(value1 < 0.0D) {
+			value1 = -value1;
+		}
+
+		if(value2 < 0.0D) {
+			value2 = -value2;
+		}
+
+		return value1 > value2 ? value1 : value2;
+	}
+
+	public static int bucketInt(int value1, int value2) {
+		return value1 < 0 ? -((-value1 - 1) / value2) - 1 : value1 / value2;
+	}
+	
+	public static float wrapAngleTo180_float(float var0) {
+		var0 %= 360.0F;
+		if(var0 >= 180.0F) {
+			var0 -= 360.0F;
+		}
+
+		if(var0 < -180.0F) {
+			var0 += 360.0F;
+		}
+
+		return var0;
 	}
 
 	static {
-		for(int var0 = 0; var0 < 65536; ++var0) {
-			SIN_TABLE[var0] = (float)Math.sin((double)var0 * Math.PI * 2.0D / 65536.0D);
+		for(int i0 = 0; i0 < 65536; ++i0) {
+			SIN_TABLE[i0] = (float)Math.sin((double)i0 * Math.PI * 2.0D / 65536.0D);
 		}
 
 	}
--- net/minecraft/src/GuiIngame.java
+++ net/minecraft/src/GuiIngame.java
@@ -4,7 +4,9 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
+
 import net.minecraft.client.Minecraft;
+
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
@@ -21,103 +23,110 @@
 	public float damageGuiPartialTime;
 	float prevVignetteBrightness = 1.0F;
 
-	public GuiIngame(Minecraft var1) {
-		this.mc = var1;
+	public GuiIngame(Minecraft minecraft) {
+		this.mc = minecraft;
 	}
 
-	public void renderGameOverlay(float var1, boolean var2, int var3, int var4) {
-		ScaledResolution var5 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
-		int var6 = var5.getScaledWidth();
-		int var7 = var5.getScaledHeight();
-		FontRenderer var8 = this.mc.fontRenderer;
+	public void renderGameOverlay(float renderPartialTick, boolean hasScreen, int width, int height) {
+		ScaledResolution scaledResolution5 = new ScaledResolution(this.mc.displayWidth, this.mc.displayHeight);
+		int i6 = scaledResolution5.getScaledWidth();
+		int i7 = scaledResolution5.getScaledHeight();
+		FontRenderer fontRenderer8 = this.mc.fontRenderer;
 		this.mc.entityRenderer.setupOverlayRendering();
 		GL11.glEnable(GL11.GL_BLEND);
 		if(this.mc.options.fancyGraphics) {
-			this.renderVignette(this.mc.thePlayer.getBrightness(var1), var6, var7);
+			this.renderVignette(this.mc.thePlayer.getBrightness(renderPartialTick), i6, i7);
 		}
 
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/gui.png"));
-		InventoryPlayer var9 = this.mc.thePlayer.inventory;
+		InventoryPlayer inventoryPlayer9 = this.mc.thePlayer.inventory;
 		this.zLevel = -90.0F;
-		this.drawTexturedModalRect(var6 / 2 - 91, var7 - 22, 0, 0, 182, 22);
-		this.drawTexturedModalRect(var6 / 2 - 91 - 1 + var9.currentItem * 20, var7 - 22 - 1, 0, 22, 24, 22);
+		this.drawTexturedModalRect(i6 / 2 - 91, i7 - 22, 0, 0, 182, 22);
+		this.drawTexturedModalRect(i6 / 2 - 91 - 1 + inventoryPlayer9.currentItem * 20, i7 - 22 - 1, 0, 22, 24, 22);
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/gui/icons.png"));
 		GL11.glEnable(GL11.GL_BLEND);
 		GL11.glBlendFunc(GL11.GL_ONE_MINUS_DST_COLOR, GL11.GL_ONE_MINUS_SRC_COLOR);
-		this.drawTexturedModalRect(var6 / 2 - 7, var7 / 2 - 7, 0, 0, 16, 16);
+		this.drawTexturedModalRect(i6 / 2 - 7, i7 / 2 - 7, 0, 0, 16, 16);
 		GL11.glDisable(GL11.GL_BLEND);
-		boolean var10 = this.mc.thePlayer.heartsLife / 3 % 2 == 1;
+		boolean z10 = this.mc.thePlayer.heartsLife / 3 % 2 == 1;
 		if(this.mc.thePlayer.heartsLife < 10) {
-			var10 = false;
+			z10 = false;
 		}
 
-		int var11 = this.mc.thePlayer.health;
-		int var12 = this.mc.thePlayer.prevHealth;
+		int i11 = this.mc.thePlayer.health;
+		int i12 = this.mc.thePlayer.prevHealth;
 		this.rand.setSeed((long)(this.updateCounter * 312871));
-		int var13;
-		int var14;
-		int var15;
+		int i13;
+		int i14;
+		int i15;
+		
+		int var22;
+		int var23;
+		int var24;
+		int var47;
+
+		
 		if(this.mc.playerController.shouldDrawHUD()) {
-			var13 = this.mc.thePlayer.getPlayerArmorValue();
-
-			int var16;
-			for(var14 = 0; var14 < 10; ++var14) {
-				var15 = var7 - 32;
-				if(var13 > 0) {
-					var16 = var6 / 2 + 91 - var14 * 8 - 9;
-					if(var14 * 2 + 1 < var13) {
-						this.drawTexturedModalRect(var16, var15, 34, 9, 9, 9);
-					}
-
-					if(var14 * 2 + 1 == var13) {
-						this.drawTexturedModalRect(var16, var15, 25, 9, 9, 9);
-					}
-
-					if(var14 * 2 + 1 > var13) {
-						this.drawTexturedModalRect(var16, var15, 16, 9, 9, 9);
-					}
-				}
-
-				byte var25 = 0;
-				if(var10) {
-					var25 = 1;
-				}
-
-				int var17 = var6 / 2 - 91 + var14 * 8;
-				if(var11 <= 4) {
-					var15 += this.rand.nextInt(2);
-				}
-
-				this.drawTexturedModalRect(var17, var15, 16 + var25 * 9, 0, 9, 9);
-				if(var10) {
-					if(var14 * 2 + 1 < var12) {
-						this.drawTexturedModalRect(var17, var15, 70, 0, 9, 9);
-					}
-
-					if(var14 * 2 + 1 == var12) {
-						this.drawTexturedModalRect(var17, var15, 79, 0, 9, 9);
-					}
-				}
-
-				if(var14 * 2 + 1 < var11) {
-					this.drawTexturedModalRect(var17, var15, 52, 0, 9, 9);
-				}
-
-				if(var14 * 2 + 1 == var11) {
-					this.drawTexturedModalRect(var17, var15, 61, 0, 9, 9);
+			i13 = this.mc.thePlayer.getPlayerArmorValue();
+
+			int i16;
+			for(i14 = 0; i14 < 10; ++i14) {
+				i15 = i7 - 32;
+				if(i13 > 0) {
+					i16 = i6 / 2 + 91 - i14 * 8 - 9;
+					if(i14 * 2 + 1 < i13) {
+						this.drawTexturedModalRect(i16, i15, 34, 9, 9, 9);
+					}
+
+					if(i14 * 2 + 1 == i13) {
+						this.drawTexturedModalRect(i16, i15, 25, 9, 9, 9);
+					}
+
+					if(i14 * 2 + 1 > i13) {
+						this.drawTexturedModalRect(i16, i15, 16, 9, 9, 9);
+					}
+				}
+
+				byte b25 = 0;
+				if(z10) {
+					b25 = 1;
+				}
+
+				int i17 = i6 / 2 - 91 + i14 * 8;
+				if(i11 <= 4) {
+					i15 += this.rand.nextInt(2);
+				}
+
+				this.drawTexturedModalRect(i17, i15, 16 + b25 * 9, 0, 9, 9);
+				if(z10) {
+					if(i14 * 2 + 1 < i12) {
+						this.drawTexturedModalRect(i17, i15, 70, 0, 9, 9);
+					}
+
+					if(i14 * 2 + 1 == i12) {
+						this.drawTexturedModalRect(i17, i15, 79, 0, 9, 9);
+					}
+				}
+
+				if(i14 * 2 + 1 < i11) {
+					this.drawTexturedModalRect(i17, i15, 52, 0, 9, 9);
+				}
+
+				if(i14 * 2 + 1 == i11) {
+					this.drawTexturedModalRect(i17, i15, 61, 0, 9, 9);
 				}
 			}
 
 			if(this.mc.thePlayer.isInsideOfMaterial(Material.water)) {
-				var14 = (int)Math.ceil((double)(this.mc.thePlayer.air - 2) * 10.0D / 300.0D);
-				var15 = (int)Math.ceil((double)this.mc.thePlayer.air * 10.0D / 300.0D) - var14;
+				i14 = (int)Math.ceil((double)(this.mc.thePlayer.air - 2) * 10.0D / 300.0D);
+				i15 = (int)Math.ceil((double)this.mc.thePlayer.air * 10.0D / 300.0D) - i14;
 
-				for(var16 = 0; var16 < var14 + var15; ++var16) {
-					if(var16 < var14) {
-						this.drawTexturedModalRect(var6 / 2 - 91 + var16 * 8, var7 - 32 - 9, 16, 18, 9, 9);
+				for(i16 = 0; i16 < i14 + i15; ++i16) {
+					if(i16 < i14) {
+						this.drawTexturedModalRect(i6 / 2 - 91 + i16 * 8, i7 - 32 - 9, 16, 18, 9, 9);
 					} else {
-						this.drawTexturedModalRect(var6 / 2 - 91 + var16 * 8, var7 - 32 - 9, 25, 18, 9, 9);
+						this.drawTexturedModalRect(i6 / 2 - 91 + i16 * 8, i7 - 32 - 9, 25, 18, 9, 9);
 					}
 				}
 			}
@@ -130,90 +139,137 @@
 		RenderHelper.enableStandardItemLighting();
 		GL11.glPopMatrix();
 
-		for(var13 = 0; var13 < 9; ++var13) {
-			var14 = var6 / 2 - 90 + var13 * 20 + 2;
-			var15 = var7 - 16 - 3;
-			this.renderInventorySlot(var13, var14, var15, var1);
+		for(i13 = 0; i13 < 9; ++i13) {
+			i14 = i6 / 2 - 90 + i13 * 20 + 2;
+			i15 = i7 - 16 - 3;
+			this.renderInventorySlot(i13, i14, i15, renderPartialTick);
 		}
 
 		RenderHelper.disableStandardItemLighting();
 		GL11.glDisable(GL12.GL_RESCALE_NORMAL);
-		String var21;
-		if(Keyboard.isKeyDown(Keyboard.KEY_F3)) {
-			var8.drawStringWithShadow("Minecraft Alpha v1.1.2_01 (" + this.mc.debug + ")", 2, 2, 16777215);
-			var8.drawStringWithShadow(this.mc.debugInfoRenders(), 2, 12, 16777215);
-			var8.drawStringWithShadow(this.mc.getEntityDebug(), 2, 22, 16777215);
-			var8.drawStringWithShadow(this.mc.debugInfoEntities(), 2, 32, 16777215);
-			long var22 = Runtime.getRuntime().maxMemory();
-			long var27 = Runtime.getRuntime().totalMemory();
-			long var28 = Runtime.getRuntime().freeMemory();
-			long var19 = var27 - var28;
-			var21 = "Used memory: " + var19 * 100L / var22 + "% (" + var19 / 1024L / 1024L + "MB) of " + var22 / 1024L / 1024L + "MB";
-			this.drawString(var8, var21, var6 - var8.getStringWidth(var21) - 2, 2, 14737632);
-			var21 = "Allocated memory: " + var27 * 100L / var22 + "% (" + var27 / 1024L / 1024L + "MB)";
-			this.drawString(var8, var21, var6 - var8.getStringWidth(var21) - 2, 12, 14737632);
+		String string21;
+		if(this.mc.options.showDebugInfo) {
+			
+			fontRenderer8.drawStringWithShadow("SBMF v1.1.6", 2, 2, 0x9E512C);
+			//fontRenderer8.drawStringWithShadow("SBMF 1.1.3", 2 + fontRenderer8.getStringWidth("Minecraft "), 2, 0x00A800);
+			fontRenderer8.drawStringWithShadow(" (" + this.mc.debug + ")", 2 + fontRenderer8.getStringWidth("SBMF v1.1.6"), 2, 0xFCFC54);
+			
+			fontRenderer8.drawStringWithShadow(this.mc.debugInfoRenders(), 2, 12, 16777215);
+			fontRenderer8.drawStringWithShadow(this.mc.getEntityDebug(), 2, 22, 16777215);
+			fontRenderer8.drawStringWithShadow(this.mc.debugInfoEntities(), 2, 32, 16777215);
+			
+			long j22 = Runtime.getRuntime().maxMemory();
+			long j27 = Runtime.getRuntime().totalMemory();
+			long j28 = Runtime.getRuntime().freeMemory();
+			long j19 = j27 - j28;
+			string21 = "Used memory: " + j19 * 100L / j22 + "% (" + j19 / 1024L / 1024L + "MB) of " + j22 / 1024L / 1024L + "MB";
+			this.drawString(fontRenderer8, string21, i6 - fontRenderer8.getStringWidth(string21) - 2, 2, 14737632);
+			string21 = "Allocated memory: " + j27 * 100L / j22 + "% (" + j27 / 1024L / 1024L + "MB)";
+			this.drawString(fontRenderer8, string21, i6 - fontRenderer8.getStringWidth(string21) - 2, 12, 14737632);
+			
+			var47 = MathHelper.floor_double(this.mc.thePlayer.posX);
+			var22 = MathHelper.floor_double(this.mc.thePlayer.posY);
+			var23 = MathHelper.floor_double(this.mc.thePlayer.posZ);
+			
+			fontRenderer8.drawStringWithShadow("X", 2, 102, 0xFC5454);
+			fontRenderer8.drawStringWithShadow("Y", 2 + fontRenderer8.getStringWidth("X"), 102, 0x54FC54);
+			fontRenderer8.drawStringWithShadow("Z", 2 + fontRenderer8.getStringWidth("X" + "Y"), 102, 0x54FCFC);
+			fontRenderer8.drawStringWithShadow(String.format(": %.4f ", Double.valueOf(this.mc.thePlayer.posX)), 2 + fontRenderer8.getStringWidth("X" + "Y" + "Z"), 102, 0xFC5454);
+			fontRenderer8.drawStringWithShadow(String.format(" %.4f ", Double.valueOf(this.mc.thePlayer.posY)), 2 + fontRenderer8.getStringWidth("X" + "Y" + "Z" + String.format(": %.4f ", Double.valueOf(this.mc.thePlayer.posX))), 102, 0x54FC54);
+			fontRenderer8.drawStringWithShadow(String.format(" %.4f", Double.valueOf(this.mc.thePlayer.posZ)), 2 + fontRenderer8.getStringWidth("X" + "Y" + "Z" + String.format(": %.4f ", Double.valueOf(this.mc.thePlayer.posX)) + String.format(" %.4f ", Double.valueOf(this.mc.thePlayer.posY))), 102, 0x54FCFC);
+			
+			fontRenderer8.drawStringWithShadow("SPAWN ", 2, 112, 0x00A8FC);
+			fontRenderer8.drawStringWithShadow("X", 2 + fontRenderer8.getStringWidth("SPAWN "), 112, 0xFC5454);
+			fontRenderer8.drawStringWithShadow("Y", 2 + fontRenderer8.getStringWidth("SPAWN " + "X"), 112, 0x54FC54);
+			fontRenderer8.drawStringWithShadow("Z", 2 + fontRenderer8.getStringWidth("SPAWN " + "X" + "Y"), 112, 0x54FCFC);
+			fontRenderer8.drawStringWithShadow(": " + this.mc.theWorld.spawnX, 2 + fontRenderer8.getStringWidth("SPAWN " + "X" + "Y" + "Z"), 112, 0xFC5454);
+			fontRenderer8.drawStringWithShadow(" " + this.mc.theWorld.spawnY, 2 + fontRenderer8.getStringWidth("SPAWN " + "X" + "Y" + "Z" + ": " + this.mc.theWorld.spawnX), 112, 0x54FC54);
+			fontRenderer8.drawStringWithShadow(" " + this.mc.theWorld.spawnZ, 2 + fontRenderer8.getStringWidth("SPAWN " + "X" + "Y" + "Z" + ": " + this.mc.theWorld.spawnX + " " + this.mc.theWorld.spawnY), 112, 0x54FCFC);
+			
+			var24 = MathHelper.floor_double((double)(this.mc.thePlayer.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;
+			this.drawString(fontRenderer8, "Direction: " + var24 + " (" + Direction.directions[var24] + ") / " + MathHelper.wrapAngleTo180_float(this.mc.thePlayer.rotationYaw), 2, 122, 0xFFFFFF);
+			
+			if(this.mc.theWorld != null && this.mc.theWorld.blockExists(var47, var22, var23)) {
+				Chunk var50 = this.mc.theWorld.getChunkFromBlockCoords(var47, var23);
+
+				fontRenderer8.drawStringWithShadow("Block Light: ", 2, 132, 0x00A8FC);
+				fontRenderer8.drawStringWithShadow("" + var50.getSavedLightValue(EnumSkyBlock.Block, var47 & 15, var22, var23 & 15), 2 + fontRenderer8.getStringWidth("Block Light: "), 132, 0x54FC54);
+				fontRenderer8.drawStringWithShadow(", Sky Light: ", 2 + fontRenderer8.getStringWidth("Block Light: " + var50.getSavedLightValue(EnumSkyBlock.Block, var47 & 15, var22, var23 & 15)), 132, 0x00A8FC);
+				fontRenderer8.drawStringWithShadow("" + var50.getSavedLightValue(EnumSkyBlock.Sky, var47 & 15, var22, var23 & 15), 2 + fontRenderer8.getStringWidth("Block Light: " + var50.getSavedLightValue(EnumSkyBlock.Block, var47 & 15, var22, var23 & 15) + " Sky Light: "), 132, 0x54FC54);
+				fontRenderer8.drawStringWithShadow(", Combined Light: ", 2 + fontRenderer8.getStringWidth("Block Light: " + var50.getSavedLightValue(EnumSkyBlock.Block, var47 & 15, var22, var23 & 15) + " Sky Light: " +  + var50.getSavedLightValue(EnumSkyBlock.Sky, var47 & 15, var22, var23 & 15)), 132, 0x00A8FC);
+				fontRenderer8.drawStringWithShadow("" + var50.getBlockLightValue(var47 & 15, var22, var23 & 15, 0), 2 + fontRenderer8.getStringWidth("Block Light: " + var50.getSavedLightValue(EnumSkyBlock.Block, var47 & 15, var22, var23 & 15) + " Sky Light: " +  + var50.getSavedLightValue(EnumSkyBlock.Sky, var47 & 15, var22, var23 & 15) + " Combined Light: "), 132, 0x54FC54);
+			}
+			
+			
+			fontRenderer8.drawStringWithShadow("On Ground:", 2, 142, 0x00A8FC);
+			fontRenderer8.drawStringWithShadow(String.format(" %b", Boolean.valueOf(this.mc.thePlayer.onGround)), 2 + fontRenderer8.getStringWidth("On Ground:"), 142, 0x54FC54);
+			fontRenderer8.drawStringWithShadow(", ", 2 + fontRenderer8.getStringWidth("On Ground:" + String.format(" %b", Boolean.valueOf(this.mc.thePlayer.onGround))), 142, 0xFFFFFF);
+			fontRenderer8.drawStringWithShadow("Highest Block:", 2 + fontRenderer8.getStringWidth("On Ground:" + String.format(" %b", Boolean.valueOf(this.mc.thePlayer.onGround)) + ", "), 142, 0x00A8FC);
+			fontRenderer8.drawStringWithShadow(String.format(" %d", Integer.valueOf(this.mc.theWorld.getHeightValue(var47, var23))), 2 + fontRenderer8.getStringWidth("On Ground:" + String.format(" %b", Boolean.valueOf(this.mc.thePlayer.onGround)) + ", " + "Highest Block:"), 142, 0x54FC54);
+			
+			
 		} else {
-			var8.drawStringWithShadow("Minecraft Alpha v1.1.2_01", 2, 2, 16777215);
+			fontRenderer8.drawStringWithShadow("SBMF v1.1.6", 2, 2, 0xFFFFFF);
 		}
 
 		if(this.recordPlayingUpFor > 0) {
-			float var23 = (float)this.recordPlayingUpFor - var1;
-			var14 = (int)(var23 * 256.0F / 20.0F);
-			if(var14 > 255) {
-				var14 = 255;
+			float f23 = (float)this.recordPlayingUpFor - renderPartialTick;
+			i14 = (int)(f23 * 256.0F / 20.0F);
+			if(i14 > 255) {
+				i14 = 255;
 			}
 
-			if(var14 > 0) {
+			if(i14 > 0) {
 				GL11.glPushMatrix();
-				GL11.glTranslatef((float)(var6 / 2), (float)(var7 - 48), 0.0F);
+				GL11.glTranslatef((float)(i6 / 2), (float)(i7 - 48), 0.0F);
 				GL11.glEnable(GL11.GL_BLEND);
 				GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-				var15 = Color.HSBtoRGB(var23 / 50.0F, 0.7F, 0.6F) & 16777215;
-				var8.drawString(this.recordPlaying, -var8.getStringWidth(this.recordPlaying) / 2, -4, var15 + (var14 << 24));
+				i15 = Color.HSBtoRGB(f23 / 50.0F, 0.7F, 0.6F) & 0xFFFFFF;
+				fontRenderer8.drawString(this.recordPlaying, -fontRenderer8.getStringWidth(this.recordPlaying) / 2, -4, i15 + (i14 << 24));
 				GL11.glDisable(GL11.GL_BLEND);
 				GL11.glPopMatrix();
 			}
 		}
 
-		byte var24 = 10;
-		boolean var26 = false;
+		byte b24 = 10;
+		boolean z26 = false;
 		if(this.mc.currentScreen instanceof GuiChat) {
-			var24 = 20;
-			var26 = true;
+			b24 = 20;
+			z26 = true;
 		}
 
 		GL11.glEnable(GL11.GL_BLEND);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 		GL11.glDisable(GL11.GL_ALPHA_TEST);
 		GL11.glPushMatrix();
-		GL11.glTranslatef(0.0F, (float)(var7 - 48), 0.0F);
-
-		for(var15 = 0; var15 < this.chatMessageList.size() && var15 < var24; ++var15) {
-			if(((ChatLine)this.chatMessageList.get(var15)).updateCounter < 200 || var26) {
-				double var29 = (double)((ChatLine)this.chatMessageList.get(var15)).updateCounter / 200.0D;
-				var29 = 1.0D - var29;
-				var29 *= 10.0D;
-				if(var29 < 0.0D) {
-					var29 = 0.0D;
-				}
-
-				if(var29 > 1.0D) {
-					var29 = 1.0D;
-				}
-
-				var29 *= var29;
-				int var18 = (int)(255.0D * var29);
-				if(var26) {
-					var18 = 255;
-				}
-
-				if(var18 > 0) {
-					byte var30 = 2;
-					int var20 = -var15 * 9;
-					var21 = ((ChatLine)this.chatMessageList.get(var15)).message;
-					this.drawRect(var30, var20 - 1, var30 + 320, var20 + 8, var18 / 2 << 24);
+		GL11.glTranslatef(0.0F, (float)(i7 - 48), 0.0F);
+
+		for(i15 = 0; i15 < this.chatMessageList.size() && i15 < b24; ++i15) {
+			if(((ChatLine)this.chatMessageList.get(i15)).updateCounter < 200 || z26) {
+				double d29 = (double)((ChatLine)this.chatMessageList.get(i15)).updateCounter / 200.0D;
+				d29 = 1.0D - d29;
+				d29 *= 10.0D;
+				if(d29 < 0.0D) {
+					d29 = 0.0D;
+				}
+
+				if(d29 > 1.0D) {
+					d29 = 1.0D;
+				}
+
+				d29 *= d29;
+				int i18 = (int)(255.0D * d29);
+				if(z26) {
+					i18 = 255;
+				}
+
+				if(i18 > 0) {
+					byte b30 = 2;
+					int i20 = -i15 * 9;
+					string21 = ((ChatLine)this.chatMessageList.get(i15)).message;
+					this.drawRect(b30, i20 - 1, b30 + 320, i20 + 8, i18 / 2 << 24);
 					GL11.glEnable(GL11.GL_BLEND);
-					var8.drawStringWithShadow(var21, var30, var20, 16777215 + (var18 << 24));
+					fontRenderer8.drawStringWithShadow(string21, b30, i20, 0xFFFFFF + (i18 << 24));
 				}
 			}
 		}
@@ -223,53 +279,53 @@
 		GL11.glDisable(GL11.GL_BLEND);
 	}
 
-	private void renderVignette(float var1, int var2, int var3) {
-		var1 = 1.0F - var1;
-		if(var1 < 0.0F) {
-			var1 = 0.0F;
-		}
-
-		if(var1 > 1.0F) {
-			var1 = 1.0F;
-		}
-
-		this.prevVignetteBrightness = (float)((double)this.prevVignetteBrightness + (double)(var1 - this.prevVignetteBrightness) * 0.01D);
+	private void renderVignette(float brightness, int width, int height) {
+		brightness = 1.0F - brightness;
+		if(brightness < 0.0F) {
+			brightness = 0.0F;
+		}
+
+		if(brightness > 1.0F) {
+			brightness = 1.0F;
+		}
+
+		this.prevVignetteBrightness = (float)((double)this.prevVignetteBrightness + (double)(brightness - this.prevVignetteBrightness) * 0.01D);
 		GL11.glDisable(GL11.GL_DEPTH_TEST);
 		GL11.glDepthMask(false);
 		GL11.glBlendFunc(GL11.GL_ZERO, GL11.GL_ONE_MINUS_SRC_COLOR);
 		GL11.glColor4f(this.prevVignetteBrightness, this.prevVignetteBrightness, this.prevVignetteBrightness, 1.0F);
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.mc.renderEngine.getTexture("/misc/vignette.png"));
-		Tessellator var4 = Tessellator.instance;
-		var4.startDrawingQuads();
-		var4.addVertexWithUV(0.0D, (double)var3, -90.0D, 0.0D, 1.0D);
-		var4.addVertexWithUV((double)var2, (double)var3, -90.0D, 1.0D, 1.0D);
-		var4.addVertexWithUV((double)var2, 0.0D, -90.0D, 1.0D, 0.0D);
-		var4.addVertexWithUV(0.0D, 0.0D, -90.0D, 0.0D, 0.0D);
-		var4.draw();
+		Tessellator tessellator4 = Tessellator.instance;
+		tessellator4.startDrawingQuads();
+		tessellator4.addVertexWithUV(0.0D, (double)height, -90.0D, 0.0D, 1.0D);
+		tessellator4.addVertexWithUV((double)width, (double)height, -90.0D, 1.0D, 1.0D);
+		tessellator4.addVertexWithUV((double)width, 0.0D, -90.0D, 1.0D, 0.0D);
+		tessellator4.addVertexWithUV(0.0D, 0.0D, -90.0D, 0.0D, 0.0D);
+		tessellator4.draw();
 		GL11.glDepthMask(true);
 		GL11.glEnable(GL11.GL_DEPTH_TEST);
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 	}
 
-	private void renderInventorySlot(int var1, int var2, int var3, float var4) {
-		ItemStack var5 = this.mc.thePlayer.inventory.mainInventory[var1];
-		if(var5 != null) {
-			float var6 = (float)var5.animationsToGo - var4;
-			if(var6 > 0.0F) {
+	private void renderInventorySlot(int i1, int i2, int i3, float renderPartialTick) {
+		ItemStack itemStack5 = this.mc.thePlayer.inventory.mainInventory[i1];
+		if(itemStack5 != null) {
+			float f6 = (float)itemStack5.animationsToGo - renderPartialTick;
+			if(f6 > 0.0F) {
 				GL11.glPushMatrix();
-				float var7 = 1.0F + var6 / 5.0F;
-				GL11.glTranslatef((float)(var2 + 8), (float)(var3 + 12), 0.0F);
-				GL11.glScalef(1.0F / var7, (var7 + 1.0F) / 2.0F, 1.0F);
-				GL11.glTranslatef((float)(-(var2 + 8)), (float)(-(var3 + 12)), 0.0F);
+				float f7 = 1.0F + f6 / 5.0F;
+				GL11.glTranslatef((float)(i2 + 8), (float)(i3 + 12), 0.0F);
+				GL11.glScalef(1.0F / f7, (f7 + 1.0F) / 2.0F, 1.0F);
+				GL11.glTranslatef((float)(-(i2 + 8)), (float)(-(i3 + 12)), 0.0F);
 			}
 
-			itemRenderer.renderItemIntoGUI(this.mc.fontRenderer, this.mc.renderEngine, var5, var2, var3);
-			if(var6 > 0.0F) {
+			itemRenderer.renderItemIntoGUI(this.mc.fontRenderer, this.mc.renderEngine, itemStack5, i2, i3);
+			if(f6 > 0.0F) {
 				GL11.glPopMatrix();
 			}
 
-			itemRenderer.renderItemOverlayIntoGUI(this.mc.fontRenderer, this.mc.renderEngine, var5, var2, var3);
+			itemRenderer.renderItemOverlayIntoGUI(this.mc.fontRenderer, this.mc.renderEngine, itemStack5, i2, i3);
 		}
 	}
 
@@ -280,23 +336,23 @@
 
 		++this.updateCounter;
 
-		for(int var1 = 0; var1 < this.chatMessageList.size(); ++var1) {
-			++((ChatLine)this.chatMessageList.get(var1)).updateCounter;
+		for(int i1 = 0; i1 < this.chatMessageList.size(); ++i1) {
+			++((ChatLine)this.chatMessageList.get(i1)).updateCounter;
 		}
 
 	}
 
-	public void addChatMessage(String var1) {
-		while(this.mc.fontRenderer.getStringWidth(var1) > 320) {
-			int var2;
-			for(var2 = 1; var2 < var1.length() && this.mc.fontRenderer.getStringWidth(var1.substring(0, var2 + 1)) <= 320; ++var2) {
+	public void addChatMessage(String message) {
+		while(this.mc.fontRenderer.getStringWidth(message) > 320) {
+			int i2;
+			for(i2 = 1; i2 < message.length() && this.mc.fontRenderer.getStringWidth(message.substring(0, i2 + 1)) <= 320; ++i2) {
 			}
 
-			this.addChatMessage(var1.substring(0, var2));
-			var1 = var1.substring(var2);
+			this.addChatMessage(message.substring(0, i2));
+			message = message.substring(i2);
 		}
 
-		this.chatMessageList.add(0, new ChatLine(var1));
+		this.chatMessageList.add(0, new ChatLine(message));
 
 		while(this.chatMessageList.size() > 50) {
 			this.chatMessageList.remove(this.chatMessageList.size() - 1);
@@ -304,8 +360,8 @@
 
 	}
 
-	public void setRecordPlayingMessage(String var1) {
-		this.recordPlaying = "Now playing: " + var1;
+	public void setRecordPlayingMessage(String record) {
+		this.recordPlaying = "Now playing: " + record;
 		this.recordPlayingUpFor = 60;
 	}
 }
--- net/minecraft/src/TileEntityFurnace.java
+++ net/minecraft/src/TileEntityFurnace.java
@@ -173,7 +173,7 @@
 	}
 
 	private int getCookedItem(int var1) {
-		return var1 == Block.oreIron.blockID ? Item.ingotIron.shiftedIndex : (var1 == Block.oreGold.blockID ? Item.ingotGold.shiftedIndex : (var1 == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex : (var1 == Block.sand.blockID ? Block.glass.blockID : (var1 == Item.porkRaw.shiftedIndex ? Item.porkCooked.shiftedIndex : (var1 == Block.cobblestone.blockID ? Block.stone.blockID : (var1 == Item.clay.shiftedIndex ? Item.brick.shiftedIndex : -1))))));
+		return var1 == Block.oreIron.blockID ? Item.ingotIron.shiftedIndex : (var1 == Block.oreGold.blockID ? Item.ingotGold.shiftedIndex : (var1 == Block.oreDiamond.blockID ? Item.diamond.shiftedIndex : (var1 == Block.sand.blockID ? Block.glass.blockID : (var1 == Item.porkRaw.shiftedIndex ? Item.porkCooked.shiftedIndex : (var1 == Block.cobblestone.blockID ? Block.stone.blockID : (var1 == Item.egg.shiftedIndex ? Item.eggCooked.shiftedIndex : (var1 == Block.oreTitanium.blockID ? Item.ingotTitanium.shiftedIndex : (var1 == Block.oreCooper2723.blockID ? Item.ingotCooper.shiftedIndex : (var1 == Item.clay.shiftedIndex ? Item.brick.shiftedIndex : -1)))))))));
 	}
 
 	private int getItemBurnTime(ItemStack var1) {
--- net/minecraft/src/CraftingManager.java
+++ net/minecraft/src/CraftingManager.java
@@ -20,22 +20,41 @@
 		(new RecipesFood()).addRecipes(this);
 		(new RecipesCrafting()).addRecipes(this);
 		(new RecipesArmor()).addRecipes(this);
+                this.addRecipe(new ItemStack(Item.bed, 1), new Object[]{"###", "XXX", Character.valueOf('#'), Block.cloth, Character.valueOf('X'), Block.planks});
+                this.addRecipe(new ItemStack(Item.compressedBed, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.bed});
+                this.addRecipe(new ItemStack(Item.compressedCompressedBed, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.compressedBed});
+                this.addRecipe(new ItemStack(Block.bedrock, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.compressedCompressedBed});
 		this.addRecipe(new ItemStack(Item.paper, 3), new Object[]{"###", Character.valueOf('#'), Item.reed});
 		this.addRecipe(new ItemStack(Item.book, 1), new Object[]{"#", "#", "#", Character.valueOf('#'), Item.paper});
-		this.addRecipe(new ItemStack(Block.fence, 2), new Object[]{"###", "###", Character.valueOf('#'), Item.stick});
+		this.addRecipe(new ItemStack(Block.fence, 3), new Object[]{"###", "###", Character.valueOf('#'), Item.stick});
 		this.addRecipe(new ItemStack(Block.jukebox, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.diamond});
 		this.addRecipe(new ItemStack(Block.bookshelf, 1), new Object[]{"###", "XXX", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.book});
 		this.addRecipe(new ItemStack(Block.blockSnow, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.snowball});
 		this.addRecipe(new ItemStack(Block.blockClay, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.clay});
 		this.addRecipe(new ItemStack(Block.brick, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.brick});
-		this.addRecipe(new ItemStack(Block.cloth, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Item.silk});
+		this.addRecipe(new ItemStack(Block.cloth, 1), new Object[]{"##", "##", Character.valueOf('#'), Item.silk});
 		this.addRecipe(new ItemStack(Block.tnt, 1), new Object[]{"X#X", "#X#", "X#X", Character.valueOf('X'), Item.gunpowder, Character.valueOf('#'), Block.sand});
-		this.addRecipe(new ItemStack(Block.stairSingle, 3), new Object[]{"###", Character.valueOf('#'), Block.cobblestone});
-		this.addRecipe(new ItemStack(Block.ladder, 1), new Object[]{"# #", "###", "# #", Character.valueOf('#'), Item.stick});
-		this.addRecipe(new ItemStack(Item.doorWood, 1), new Object[]{"##", "##", "##", Character.valueOf('#'), Block.planks});
-		this.addRecipe(new ItemStack(Item.doorSteel, 1), new Object[]{"##", "##", "##", Character.valueOf('#'), Item.ingotIron});
-		this.addRecipe(new ItemStack(Item.sign, 1), new Object[]{"###", "###", " X ", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Block.stairSingle, 6), new Object[]{"###", Character.valueOf('#'), Block.cobblestone});
+		this.addRecipe(new ItemStack(Block.ladder, 3), new Object[]{"# #", "###", "# #", Character.valueOf('#'), Item.stick});
+		this.addRecipe(new ItemStack(Item.doorWood, 3), new Object[]{"##", "##", "##", Character.valueOf('#'), Block.planks});
+		this.addRecipe(new ItemStack(Item.doorSteel, 3), new Object[]{"##", "##", "##", Character.valueOf('#'), Item.ingotIron});
+		this.addRecipe(new ItemStack(Item.sign, 3), new Object[]{"###", "###", " X ", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.stick});
 		this.addRecipe(new ItemStack(Block.planks, 4), new Object[]{"#", Character.valueOf('#'), Block.wood});
+		
+		this.addRecipe(new ItemStack(Block.planksGreen, 8), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.greenDye});
+		this.addRecipe(new ItemStack(Block.planksBlack, 8), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.blackDye});
+		this.addRecipe(new ItemStack(Block.planksBlue, 8), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.blueDye});
+		this.addRecipe(new ItemStack(Block.planksLightBlue, 8), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.blueLightDye});
+		this.addRecipe(new ItemStack(Block.planksLime, 8), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.limeDye});
+		this.addRecipe(new ItemStack(Block.planksBrown, 8), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.brownDye});
+		this.addRecipe(new ItemStack(Block.planksOrange, 8), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.orangeDye});
+		this.addRecipe(new ItemStack(Block.planksBlue, 8), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.blueDye});
+		this.addRecipe(new ItemStack(Block.planksRed, 8), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.redDye});
+		this.addRecipe(new ItemStack(Block.planksWhite, 8), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.whiteDye});
+		this.addRecipe(new ItemStack(Block.planksPink, 8), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.pinkDye});
+		this.addRecipe(new ItemStack(Block.planksYellow, 8), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.yellowDye});
+		this.addRecipe(new ItemStack(Block.planksPurple, 8), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.planks, Character.valueOf('X'), Item.purpleDye});
+		
 		this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", Character.valueOf('#'), Block.planks});
 		this.addRecipe(new ItemStack(Block.torch, 4), new Object[]{"X", "#", Character.valueOf('X'), Item.coal, Character.valueOf('#'), Item.stick});
 		this.addRecipe(new ItemStack(Item.bowlEmpty, 4), new Object[]{"# #", " # ", Character.valueOf('#'), Block.planks});
@@ -47,9 +66,26 @@
 		this.addRecipe(new ItemStack(Item.bucketEmpty, 1), new Object[]{"# #", " # ", Character.valueOf('#'), Item.ingotIron});
 		this.addRecipe(new ItemStack(Item.striker, 1), new Object[]{"A ", " B", Character.valueOf('A'), Item.ingotIron, Character.valueOf('B'), Item.flint});
 		this.addRecipe(new ItemStack(Item.bread, 1), new Object[]{"###", Character.valueOf('#'), Item.wheat});
-		this.addRecipe(new ItemStack(Block.stairCompactWood, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.planks});
+		
+		this.addRecipe(new ItemStack(Block.stairCompactWoodGreen, 6), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.planksGreen});
+		this.addRecipe(new ItemStack(Block.stairCompactWoodBlack, 6), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.planksBlack});
+		this.addRecipe(new ItemStack(Block.stairCompactWoodBlue, 6), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.planksBlue});
+		this.addRecipe(new ItemStack(Block.stairCompactWoodLightBlue, 6), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.planksLightBlue});
+		this.addRecipe(new ItemStack(Block.stairCompactWoodLime, 6), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.planksLime});
+		this.addRecipe(new ItemStack(Block.stairCompactWoodBrown, 6), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.planksBrown});
+		this.addRecipe(new ItemStack(Block.stairCompactWoodOrange, 6), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.planksOrange});
+		this.addRecipe(new ItemStack(Block.stairCompactWoodRed, 6), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.planksRed});
+		this.addRecipe(new ItemStack(Block.stairCompactWoodWhite, 6), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.planksWhite});
+		this.addRecipe(new ItemStack(Block.stairCompactWoodPink, 6), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.planksPink});
+		this.addRecipe(new ItemStack(Block.stairCompactWoodYellow, 6), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.planksYellow});
+		this.addRecipe(new ItemStack(Block.stairCompactWoodPurple, 6), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.planksPurple});
+		this.addRecipe(new ItemStack(Block.stairCompactstoneSmooth, 6), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.stoneSmooth});
+		this.addRecipe(new ItemStack(Block.stairCompactstoneBricks, 6), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.stoneBricks});
+		this.addRecipe(new ItemStack(Block.stairCompactDeepslate, 6), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.deepslate});
+		
 		this.addRecipe(new ItemStack(Item.fishingRod, 1), new Object[]{"  #", " #X", "# X", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Item.silk});
-		this.addRecipe(new ItemStack(Block.stairCompactStone, 4), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.cobblestone});
+		this.addRecipe(new ItemStack(Block.stairCompactStone, 6), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.cobblestone});
+		this.addRecipe(new ItemStack(Block.stairCompactBrick, 6), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.brick});
 		this.addRecipe(new ItemStack(Item.painting, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Item.stick, Character.valueOf('X'), Block.cloth});
 		this.addRecipe(new ItemStack(Item.appleGold, 1), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.blockGold, Character.valueOf('X'), Item.appleRed});
 		this.addRecipe(new ItemStack(Block.lever, 1), new Object[]{"X", "#", Character.valueOf('#'), Block.cobblestone, Character.valueOf('X'), Item.stick});
@@ -58,6 +94,150 @@
 		this.addRecipe(new ItemStack(Block.button, 1), new Object[]{"#", "#", Character.valueOf('#'), Block.stone});
 		this.addRecipe(new ItemStack(Block.pressurePlateStone, 1), new Object[]{"###", Character.valueOf('#'), Block.stone});
 		this.addRecipe(new ItemStack(Block.pressurePlateWood, 1), new Object[]{"###", Character.valueOf('#'), Block.planks});
+		
+		this.addRecipe(new ItemStack(Item.greenDye, 2), new Object[]{"#", Character.valueOf('#'), Block.cactus});
+		this.addRecipe(new ItemStack(Item.blueLightDye, 2), new Object[]{"#", Character.valueOf('#'), Item.poison});
+		this.addRecipe(new ItemStack(Item.poison, 1), new Object[]{"#", Character.valueOf('#'), Item.blueReed});
+		this.addRecipe(new ItemStack(Item.blueDye, 2), new Object[]{"#", Character.valueOf('#'), Block.plantRed});
+		
+		this.addRecipe(new ItemStack(Item.blueLightDye, 2), new Object[]{"#  ", " X ", Character.valueOf('#'), Item.blueDye, Character.valueOf('X'), Item.whiteDye});
+		this.addRecipe(new ItemStack(Item.limeDye, 2), new Object[]{"#  ", " X ", Character.valueOf('#'), Item.greenDye, Character.valueOf('X'), Item.whiteDye});
+		
+		this.addRecipe(new ItemStack(Item.brownDye, 2), new Object[]{"#", Character.valueOf('#'), Block.dirt});
+		this.addRecipe(new ItemStack(Item.orangeDye, 2), new Object[]{"#", Character.valueOf('#'), Item.leather});
+		this.addRecipe(new ItemStack(Item.redDye, 2), new Object[]{"#"  , Character.valueOf('#'), Item.redstone});
+		this.addRecipe(new ItemStack(Item.whiteDye, 2), new Object[]{"#", Character.valueOf('#'), Block.cloth});
+		
+		this.addRecipe(new ItemStack(Item.pinkDye, 2), new Object[]{"#  ", " X ", Character.valueOf('#'), Item.redDye, Character.valueOf('X'), Item.whiteDye});
+		this.addRecipe(new ItemStack(Item.yellowDye, 2), new Object[]{"#  ", " X ", Character.valueOf('#'), Item.orangeDye, Character.valueOf('X'), Item.whiteDye});
+		this.addRecipe(new ItemStack(Item.purpleDye, 2), new Object[]{"#  ", " X ", Character.valueOf('#'), Item.pinkDye, Character.valueOf('X'), Item.blackDye});
+		this.addRecipe(new ItemStack(Item.blackDye, 2), new Object[]{"#", Character.valueOf('#'), Item.coal});
+		
+		this.addRecipe(new ItemStack(Block.stoneBricks, 4), new Object[]{"##", "##", Character.valueOf('#'), Block.stone});
+		this.addRecipe(new ItemStack(Block.stoneSmooth, 6), new Object[]{"###", "###", Character.valueOf('#'), Block.cobblestone});
+
+        	this.addRecipe(new ItemStack(Item.swordStone, 1), new Object[]{"#", "#", "X", Character.valueOf('#'), Block.deepslate, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.axeStone, 1), new Object[]{" ##", " X#", " X ", Character.valueOf('#'), Block.deepslate, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.axeStone, 1), new Object[]{"## ", "#X ", " X ", Character.valueOf('#'), Block.deepslate, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.shovelStone, 1), new Object[]{"#", "X", "X", Character.valueOf('#'), Block.deepslate, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.hoeStone, 1), new Object[]{" ##", " X ", " X ", Character.valueOf('#'), Block.deepslate, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.hoeStone, 1), new Object[]{"## ", " X ", " X ", Character.valueOf('#'), Block.deepslate, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.hoeStone, 1), new Object[]{"## ", "X  ", "X  ", Character.valueOf('#'), Block.deepslate, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.hoeStone, 1), new Object[]{" ##", "  X", "  X", Character.valueOf('#'), Block.deepslate, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.pickaxeStone, 1), new Object[]{"###", " X ", " X ", Character.valueOf('#'), Block.deepslate, Character.valueOf('X'), Item.stick});
+
+        this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", Character.valueOf('#'), Block.planksGreen});
+        this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", Character.valueOf('#'), Block.planksBlack});
+        this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", Character.valueOf('#'), Block.planksBlue});
+        this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", Character.valueOf('#'), Block.planksLightBlue});
+        this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", Character.valueOf('#'), Block.planksLime});
+        this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", Character.valueOf('#'), Block.planksBrown});
+        this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", Character.valueOf('#'), Block.planksOrange});
+        this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", Character.valueOf('#'), Block.planksRed});
+        this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", Character.valueOf('#'), Block.planksWhite});
+        this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", Character.valueOf('#'), Block.planksPink});
+        this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", Character.valueOf('#'), Block.planksWhite});
+        this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", Character.valueOf('#'), Block.planksYellow});
+        this.addRecipe(new ItemStack(Item.stick, 4), new Object[]{"#", "#", Character.valueOf('#'), Block.planksPurple});
+
+        this.addRecipe(new ItemStack(Block.chest, 1), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.planksGreen});
+        this.addRecipe(new ItemStack(Block.chest, 1), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.planksBlack});
+        this.addRecipe(new ItemStack(Block.chest, 1), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.planksBlue});
+        this.addRecipe(new ItemStack(Block.chest, 1), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.planksLightBlue});
+        this.addRecipe(new ItemStack(Block.chest, 1), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.planksLime});
+        this.addRecipe(new ItemStack(Block.chest, 1), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.planksBrown});
+        this.addRecipe(new ItemStack(Block.chest, 1), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.planksOrange});
+        this.addRecipe(new ItemStack(Block.chest, 1), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.planksRed});
+        this.addRecipe(new ItemStack(Block.chest, 1), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.planksWhite});
+        this.addRecipe(new ItemStack(Block.chest, 1), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.planksPink});
+        this.addRecipe(new ItemStack(Block.chest, 1), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.planksWhite});
+        this.addRecipe(new ItemStack(Block.chest, 1), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.planksYellow});
+        this.addRecipe(new ItemStack(Block.chest, 1), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.planksPurple});
+
+        this.addRecipe(new ItemStack(Block.nonfunctionalchest, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Block.planksGreen});
+        this.addRecipe(new ItemStack(Block.nonfunctionalchest, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Block.planksBlack});
+        this.addRecipe(new ItemStack(Block.nonfunctionalchest, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Block.planksBlue});
+        this.addRecipe(new ItemStack(Block.nonfunctionalchest, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Block.planksLightBlue});
+        this.addRecipe(new ItemStack(Block.nonfunctionalchest, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Block.planksLime});
+        this.addRecipe(new ItemStack(Block.nonfunctionalchest, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Block.planksBrown});
+        this.addRecipe(new ItemStack(Block.nonfunctionalchest, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Block.planksOrange});
+        this.addRecipe(new ItemStack(Block.nonfunctionalchest, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Block.planksRed});
+        this.addRecipe(new ItemStack(Block.nonfunctionalchest, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Block.planksWhite});
+        this.addRecipe(new ItemStack(Block.nonfunctionalchest, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Block.planksPink});
+        this.addRecipe(new ItemStack(Block.nonfunctionalchest, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Block.planksWhite});
+        this.addRecipe(new ItemStack(Block.nonfunctionalchest, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Block.planksYellow});
+        this.addRecipe(new ItemStack(Block.nonfunctionalchest, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Block.planksPurple});
+        this.addRecipe(new ItemStack(Block.nonfunctionalchest, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Block.planks});
+
+        this.addRecipe(new ItemStack(Block.workbench, 1), new Object[]{"##", "##", Character.valueOf('#'), Block.planksGreen});
+        this.addRecipe(new ItemStack(Block.workbench, 1), new Object[]{"##", "##", Character.valueOf('#'), Block.planksBlack});
+        this.addRecipe(new ItemStack(Block.workbench, 1), new Object[]{"##", "##", Character.valueOf('#'), Block.planksBlue});
+        this.addRecipe(new ItemStack(Block.workbench, 1), new Object[]{"##", "##", Character.valueOf('#'), Block.planksLightBlue});
+        this.addRecipe(new ItemStack(Block.workbench, 1), new Object[]{"##", "##", Character.valueOf('#'), Block.planksLime});
+        this.addRecipe(new ItemStack(Block.workbench, 1), new Object[]{"##", "##", Character.valueOf('#'), Block.planksBrown});
+        this.addRecipe(new ItemStack(Block.workbench, 1), new Object[]{"##", "##", Character.valueOf('#'), Block.planksOrange});
+        this.addRecipe(new ItemStack(Block.workbench, 1), new Object[]{"##", "##", Character.valueOf('#'), Block.planksRed});
+        this.addRecipe(new ItemStack(Block.workbench, 1), new Object[]{"##", "##", Character.valueOf('#'), Block.planksWhite});
+        this.addRecipe(new ItemStack(Block.workbench, 1), new Object[]{"##", "##", Character.valueOf('#'), Block.planksPink});
+        this.addRecipe(new ItemStack(Block.workbench, 1), new Object[]{"##", "##", Character.valueOf('#'), Block.planksWhite});
+        this.addRecipe(new ItemStack(Block.workbench, 1), new Object[]{"##", "##", Character.valueOf('#'), Block.planksYellow});
+        this.addRecipe(new ItemStack(Block.workbench, 1), new Object[]{"##", "##", Character.valueOf('#'), Block.planksPurple});
+
+        this.addRecipe(new ItemStack(Block.barrel, 1), new Object[]{"###", "   ", "###", Character.valueOf('#'), Block.planksBrown});
+        this.addRecipe(new ItemStack(Block.blockCooper, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Item.ingotCooper});
+
+        this.addRecipe(new ItemStack(Block.stoneOvenIdle, 1), new Object[]{"###", "# #", "###", Character.valueOf('#'), Block.deepslate});
+	this.addRecipe(new ItemStack(Block.torchBlock, 1), new Object[]{"##", "##", Character.valueOf('#'), Block.torch});
+        this.addRecipe(new ItemStack(Item.stupidBucket, 1), new Object[]{"#X#", " # ", Character.valueOf('#'), Item.ingotIron, Character.valueOf('X'), Block.blockSteel});
+        this.addRecipe(new ItemStack(Block.redstoneBlock, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Item.redstone});
+        this.addRecipe(new ItemStack(Block.blockCoal, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Item.coal});
+        this.addRecipe(new ItemStack(Block.sandstone, 1), new Object[]{"##", "##", Character.valueOf('#'), Block.sand});
+        this.addRecipe(new ItemStack(Block.redstoneBlock, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Item.redstone});
+        this.addRecipe(new ItemStack(Item.redstone, 9), new Object[]{"#", Character.valueOf('#'), Block.redstoneBlock});
+	this.addRecipe(new ItemStack(Item.ingotCooper, 9), new Object[]{"#", Character.valueOf('#'), Block.blockCooper});
+        	
+        	this.addRecipe(new ItemStack(Item.swordCooper, 1), new Object[]{"#", "#", "X", Character.valueOf('#'), Item.ingotCooper, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.axeCooper, 1), new Object[]{" ##", " X#", " X ", Character.valueOf('#'), Item.ingotCooper, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.axeCooper, 1), new Object[]{"## ", "#X ", " X ", Character.valueOf('#'), Item.ingotCooper, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.shovelCooper, 1), new Object[]{"#", "X", "X", Character.valueOf('#'), Item.ingotCooper, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.hoeCooper, 1), new Object[]{" ##", " X ", " X ", Character.valueOf('#'), Item.ingotCooper, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.hoeCooper, 1), new Object[]{"## ", " X ", " X ", Character.valueOf('#'), Item.ingotCooper, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.hoeCooper, 1), new Object[]{"## ", "X  ", "X  ", Character.valueOf('#'), Item.ingotCooper, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.hoeCooper, 1), new Object[]{" ##", "  X", "  X", Character.valueOf('#'), Item.ingotCooper, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.pickaxeCooper, 1), new Object[]{"###", " X ", " X ", Character.valueOf('#'), Item.ingotCooper, Character.valueOf('X'), Item.stick});
+
+        	this.addRecipe(new ItemStack(Item.swordOre, 1), new Object[]{"#", "#", "X", Character.valueOf('#'), Item.ingotOre, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.axeOre, 1), new Object[]{" ##", " X#", " X ", Character.valueOf('#'), Item.ingotOre, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.axeOre, 1), new Object[]{"## ", "#X ", " X ", Character.valueOf('#'), Item.ingotOre, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.shovelOre, 1), new Object[]{"#", "X", "X", Character.valueOf('#'), Item.ingotOre, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.hoeOre, 1), new Object[]{" ##", " X ", " X ", Character.valueOf('#'), Item.ingotOre, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.hoeOre, 1), new Object[]{"## ", " X ", " X ", Character.valueOf('#'), Item.ingotOre, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.hoeOre, 1), new Object[]{"## ", "X  ", "X  ", Character.valueOf('#'), Item.ingotOre, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.hoeOre, 1), new Object[]{" ##", "  X", "  X", Character.valueOf('#'), Item.ingotOre, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.pickaxeOre, 1), new Object[]{"###", " X ", " X ", Character.valueOf('#'), Item.ingotOre, Character.valueOf('X'), Item.stick});
+		this.addRecipe(new ItemStack(Item.ingotOre, 1), new Object[]{"#XY", Character.valueOf('#'), Item.ingotTitanium, Character.valueOf('X'), Item.diamond, Character.valueOf('Y'), Item.ingotGold});
+
+		this.addRecipe(new ItemStack(Block.blockTitanium, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Item.ingotTitanium});
+		this.addRecipe(new ItemStack(Block.blockOre, 1), new Object[]{"###", "###", "###", Character.valueOf('#'), Item.ingotOre});
+		this.addRecipe(new ItemStack(Item.coal, 9), new Object[]{"#", Character.valueOf('#'), Block.blockCoal});
+		this.addRecipe(new ItemStack(Item.ingotTitanium, 9), new Object[]{"#", Character.valueOf('#'), Block.blockTitanium});
+		this.addRecipe(new ItemStack(Item.ingotOre, 9), new Object[]{"#", Character.valueOf('#'), Block.blockOre});
+		this.addRecipe(new ItemStack(Block.railLadder, 3), new Object[]{"# #", "###", "# #", Character.valueOf('#'), Item.ingotIron});
+		this.addRecipe(new ItemStack(Block.Ukraine, 1), new Object[]{"#", "X", Character.valueOf('#'), Block.planksLightBlue, Character.valueOf('X'), Block.planksYellow});
+		this.addRecipe(new ItemStack(Block.mason1, 1), new Object[]{"#", "X", Character.valueOf('#'), Block.bedrock, Character.valueOf('X'), Block.Ukraine});
+		this.addRecipe(new ItemStack(Block.mason2, 1), new Object[]{"X", "#", Character.valueOf('#'), Block.bedrock, Character.valueOf('X'), Block.Ukraine});
+		this.addRecipe(new ItemStack(Block.mason3, 1), new Object[]{"X#", Character.valueOf('#'), Block.bedrock, Character.valueOf('X'), Block.Ukraine});
+		this.addRecipe(new ItemStack(Block.mason4, 1), new Object[]{" #", "X ", Character.valueOf('#'), Block.bedrock, Character.valueOf('X'), Block.Ukraine});
+		this.addRecipe(new ItemStack(Block.blockFurnace, 1), new Object[]{"##", "##", Character.valueOf('#'), Block.stoneOvenIdle});
+		this.addRecipe(new ItemStack(Block.blueBrick, 8), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Item.blueDye, Character.valueOf('X'), Block.brick});
+		this.addRecipe(new ItemStack(Block.blockCooperBlue, 8), new Object[]{"###", "#X#", "###", Character.valueOf('#'), Block.blockCooper, Character.valueOf('X'), Item.bucketWater});
+
+		this.addRecipe(new ItemStack(Block.stairCompactCooper, 6), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.blockCooper});
+		this.addRecipe(new ItemStack(Block.stairCompactCooperBlue, 6), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.blockCooperBlue});
+		this.addRecipe(new ItemStack(Block.stairCompactFurnace, 6), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.blockFurnace});
+		this.addRecipe(new ItemStack(Block.stairCompactSandstone, 6), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.sandstone});
+		this.addRecipe(new ItemStack(Block.stairCompactBlueBrick, 6), new Object[]{"#  ", "## ", "###", Character.valueOf('#'), Block.blueBrick});
+
 		Collections.sort(this.recipes, new RecipeSorter(this));
 		System.out.println(this.recipes.size() + " recipes");
 	}
--- net/minecraft/src/EntityBoat.java
+++ net/minecraft/src/EntityBoat.java
@@ -51,14 +51,14 @@
 		this.damageTaken += var2 * 10;
 		if(this.damageTaken > 40) {
 			int var3;
-			for(var3 = 0; var3 < 3; ++var3) {
-				this.entityDropItem(Block.planks.blockID, 1, 0.0F);
+			for(var3 = 0; var3 < 1; ++var3) {
+				this.entityDropItem(Item.boat.shiftedIndex, 1, 0.0F);
 			}
 
 			for(var3 = 0; var3 < 2; ++var3) {
-				this.entityDropItem(Item.stick.shiftedIndex, 1, 0.0F);
+		    //this.entityDropItem(Item.stick.shiftedIndex, 0, 0.0F);
 			}
-
+			
 			this.setEntityDead();
 		}
 
@@ -150,15 +150,15 @@
 		}
 
 		if(this.isCollidedHorizontally && var8 > 0.15D) {
-			this.setEntityDead();
+			//this.setEntityDead();
 
 			int var24;
 			for(var24 = 0; var24 < 3; ++var24) {
-				this.entityDropItem(Block.planks.blockID, 1, 0.0F);
+				//this.entityDropItem(Block.planks.blockID, 1, 0.0F);
 			}
 
 			for(var24 = 0; var24 < 2; ++var24) {
-				this.entityDropItem(Item.stick.shiftedIndex, 1, 0.0F);
+				//this.entityDropItem(Item.stick.shiftedIndex, 1, 0.0F);
 			}
 		} else {
 			this.motionX *= (double)0.99F;
--- net/minecraft/src/ChunkProviderGenerate.java
+++ net/minecraft/src/ChunkProviderGenerate.java
@@ -125,8 +125,8 @@
 
 				for(int var15 = 127; var15 >= 0; --var15) {
 					int var16 = (var7 * 16 + var8) * 128 + var15;
-					if(var15 <= 0 + this.rand.nextInt(6) - 1) {
-						var3[var16] = (byte)Block.bedrock.blockID;
+					if(var15 <= 9) {
+						var3[var16] = (byte)Block.smoothdeepslate.blockID;
 					} else {
 						byte var17 = var3[var16];
 						if(var17 == 0) {
@@ -312,7 +312,7 @@
 			(new WorldGenDungeons()).generate(this.worldObj, this.rand, var13, var14, var15);
 		}
 
-		for(var12 = 0; var12 < 10; ++var12) {
+		for(var12 = 0; var12 < 20; ++var12) {
 			var13 = var4 + this.rand.nextInt(16);
 			var14 = this.rand.nextInt(128);
 			var15 = var5 + this.rand.nextInt(16);
@@ -323,6 +323,13 @@
 			var13 = var4 + this.rand.nextInt(16);
 			var14 = this.rand.nextInt(128);
 			var15 = var5 + this.rand.nextInt(16);
+			(new WorldGenPinkClay(32)).generate(this.worldObj, this.rand, var13, var14, var15);
+		}
+
+		for(var12 = 0; var12 < 20; ++var12) {
+			var13 = var4 + this.rand.nextInt(16);
+			var14 = this.rand.nextInt(128);
+			var15 = var5 + this.rand.nextInt(16);
 			(new WorldGenMinable(Block.dirt.blockID, 32)).generate(this.worldObj, this.rand, var13, var14, var15);
 		}
 
@@ -333,6 +340,14 @@
 			(new WorldGenMinable(Block.gravel.blockID, 32)).generate(this.worldObj, this.rand, var13, var14, var15);
 		}
 
+		for(var12 = 0; var12 < 10; ++var12) {
+			var13 = var4 + this.rand.nextInt(16);
+			var14 = this.rand.nextInt(128);
+			var15 = var5 + this.rand.nextInt(16);
+			(new WorldGenMinable(Block.moss.blockID, 32)).generate(this.worldObj, this.rand, var13, var14, var15);
+		}
+
+
 		for(var12 = 0; var12 < 20; ++var12) {
 			var13 = var4 + this.rand.nextInt(16);
 			var14 = this.rand.nextInt(128);
@@ -368,11 +383,28 @@
 			(new WorldGenMinable(Block.oreDiamond.blockID, 7)).generate(this.worldObj, this.rand, var13, var14, var15);
 		}
 
+		for(var12 = 0; var12 < 1; ++var12) {
+			var13 = var4 + this.rand.nextInt(16);
+			var14 = this.rand.nextInt(10);
+			var15 = var5 + this.rand.nextInt(16);
+			(new WorldGenSomeStrangeOre(Block.oreTitanium.blockID, 5)).generate(this.worldObj, this.rand, var13, var14, var15);
+		}
+
+			for(var12 = 0; var12 < 24; ++var12) {
+			var13 = var4 + this.rand.nextInt(16);
+			var14 = this.rand.nextInt(128);
+			var15 = var5 + this.rand.nextInt(16);
+			(new WorldGenMinable(Block.oreCooper2723.blockID, 24)).generate(this.worldObj, this.rand, var13, var14, var15);
+		}
+
+
 		var10 = 0.5D;
 		var12 = (int)((this.mobSpawnerNoise.generateNoiseOctaves((double)var4 * var10, (double)var5 * var10) / 8.0D + this.rand.nextDouble() * 4.0D + 4.0D) / 3.0D);
 		if(var12 < 0) {
 			var12 = 0;
 		}
+		
+var12 = var12 + 6;
 
 		if(this.rand.nextInt(10) == 0) {
 			++var12;
@@ -382,7 +414,7 @@
 		if(this.rand.nextInt(10) == 0) {
 			var18 = new WorldGenBigTree();
 		}
-
+		
 		int var16;
 		for(var14 = 0; var14 < var12; ++var14) {
 			var15 = var4 + this.rand.nextInt(16) + 8;
@@ -391,6 +423,8 @@
 			((WorldGenerator)var18).generate(this.worldObj, this.rand, var15, this.worldObj.getHeightValue(var15, var16), var16);
 		}
 
+
+
 		int var17;
 		for(var14 = 0; var14 < 2; ++var14) {
 			var15 = var4 + this.rand.nextInt(16) + 8;
@@ -420,14 +454,21 @@
 			(new WorldGenFlowers(Block.mushroomRed.blockID)).generate(this.worldObj, this.rand, var14, var15, var16);
 		}
 
-		for(var14 = 0; var14 < 10; ++var14) {
+		for(var14 = 0; var14 < 20; ++var14) {
 			var15 = var4 + this.rand.nextInt(16) + 8;
 			var16 = this.rand.nextInt(128);
 			var17 = var5 + this.rand.nextInt(16) + 8;
 			(new WorldGenReed()).generate(this.worldObj, this.rand, var15, var16, var17);
 		}
 
-		for(var14 = 0; var14 < 1; ++var14) {
+		for(var14 = 0; var14 < 20; ++var14) {
+			var15 = var4 + this.rand.nextInt(16) + 8;
+			var16 = this.rand.nextInt(128);
+			var17 = var5 + this.rand.nextInt(16) + 8;
+			(new WorldGenBlueReed()).generate(this.worldObj, this.rand, var15, var16, var17);
+		}
+
+		for(var14 = 0; var14 < 10; ++var14) {
 			var15 = var4 + this.rand.nextInt(16) + 8;
 			var16 = this.rand.nextInt(128);
 			var17 = var5 + this.rand.nextInt(16) + 8;
--- /dev/null
+++ net/minecraft/src/Direction.java
@@ -1,0 +1,17 @@
+package net.minecraft.src;
+
+public class Direction {
+	public static final int[] offsetX = new int[]{0, -1, 0, 1};
+	public static final int[] offsetZ = new int[]{1, 0, -1, 0};
+	public static final String[] directions = new String[]{"SOUTH", "WEST", "NORTH", "EAST"};
+	public static final int[] directionToFacing = new int[]{3, 4, 2, 5};
+	public static final int[] facingToDirection = new int[]{-1, -1, 2, 0, 1, 3};
+	public static final int[] rotateOpposite = new int[]{2, 3, 0, 1};
+	public static final int[] rotateRight = new int[]{1, 2, 3, 0};
+	public static final int[] rotateLeft = new int[]{3, 0, 1, 2};
+	public static final int[][] bedDirection = new int[][]{{1, 0, 3, 2, 5, 4}, {1, 0, 5, 4, 2, 3}, {1, 0, 2, 3, 4, 5}, {1, 0, 4, 5, 3, 2}};
+
+	public static int getMovementDirection(double var0, double var2) {
+		return MathHelper.abs((float)var0) > MathHelper.abs((float)var2) ? (var0 > 0.0D ? 1 : 3) : (var2 > 0.0D ? 2 : 0);
+	}
+}
--- net/minecraft/src/Explosion.java
+++ net/minecraft/src/Explosion.java
@@ -115,8 +115,8 @@
 				var57 *= var43;
 				var37 *= var43;
 				var39 *= var43;
-				var1.spawnParticle("explode", (var29 + var3 * 1.0D) / 2.0D, (var55 + var5 * 1.0D) / 2.0D, (var56 + var7 * 1.0D) / 2.0D, var57, var37, var39);
-				var1.spawnParticle("smoke", var29, var55, var56, var57, var37, var39);
+				//var1.spawnParticle("explode", (var29 + var3 * 1.0D) / 2.0D, (var55 + var5 * 1.0D) / 2.0D, (var56 + var7 * 1.0D) / 2.0D, var57, var37, var39);
+				//var1.spawnParticle("smoke", var29, var55, var56, var57, var37, var39);
 			}
 
 			if(var54 > 0) {
--- net/minecraft/src/Chunk.java
+++ net/minecraft/src/Chunk.java
@@ -27,7 +27,7 @@
 	public boolean hasEntities;
 	public long lastSaveTime;
 
-	public Chunk(World var1, int var2, int var3) {
+	public Chunk(World d, int j, int k) {
 		this.chunkTileEntityMap = new HashMap();
 		this.entities = new List[8];
 		this.isTerrainPopulated = false;
@@ -35,389 +35,383 @@
 		this.isChunkRendered = false;
 		this.hasEntities = false;
 		this.lastSaveTime = 0L;
-		this.worldObj = var1;
-		this.xPosition = var2;
-		this.zPosition = var3;
+		this.worldObj = d;
+		this.xPosition = j;
+		this.zPosition = k;
 		this.heightMap = new byte[256];
 
-		for(int var4 = 0; var4 < this.entities.length; ++var4) {
-			this.entities[var4] = new ArrayList();
+		for(int i = 0; i < this.entities.length; ++i) {
+			this.entities[i] = new ArrayList();
 		}
 
 	}
 
-	public Chunk(World var1, byte[] var2, int var3, int var4) {
-		this(var1, var3, var4);
-		this.blocks = var2;
-		this.data = new NibbleArray(var2.length);
-		this.skylightMap = new NibbleArray(var2.length);
-		this.blocklightMap = new NibbleArray(var2.length);
-	}
-
-	public boolean isAtLocation(int var1, int var2) {
-		return var1 == this.xPosition && var2 == this.zPosition;
-	}
-
-	public int getHeightValue(int var1, int var2) {
-		return this.heightMap[var2 << 4 | var1] & 255;
+	public Chunk(World cn, byte[] b, int n, int n2) {
+		this(cn, n, n2);
+		this.blocks = b;
+		this.data = new NibbleArray(b.length);
+		this.skylightMap = new NibbleArray(b.length);
+		this.blocklightMap = new NibbleArray(b.length);
+	}
+
+	public boolean isAtLocation(int n, int n2) {
+		return n == this.xPosition && n2 == this.zPosition;
+	}
+
+	public int getHeightValue(int n, int n2) {
+		return this.heightMap[n2 << 4 | n] & 255;
 	}
 
 	public void doNothing() {
 	}
 
 	public void generateHeightMap() {
-		int var1 = 127;
-
-		for(int var2 = 0; var2 < 16; ++var2) {
-			for(int var3 = 0; var3 < 16; ++var3) {
-				int var4 = 127;
-
-				for(int var5 = var2 << 11 | var3 << 7; var4 > 0 && Block.lightOpacity[this.blocks[var5 + var4 - 1]] == 0; --var4) {
+		int i = 127;
+
+		for(int j = 0; j < 16; ++j) {
+			for(int k = 0; k < 16; ++k) {
+				int n = 127;
+
+				for(int n2 = j << 11 | k << 7; n > 0 && Block.lightOpacity[this.blocks[n2 + n - 1]] == 0; --n) {
 				}
 
-				this.heightMap[var3 << 4 | var2] = (byte)var4;
-				if(var4 < var1) {
-					var1 = var4;
+				this.heightMap[k << 4 | j] = (byte)n;
+				if(n < i) {
+					i = n;
 				}
 			}
 		}
 
-		this.height = var1;
+		this.height = i;
 		this.isModified = true;
 	}
 
 	public void generateSkylightMap() {
-		int var1 = 127;
+		int i = 127;
 
-		int var2;
-		int var3;
-		for(var2 = 0; var2 < 16; ++var2) {
-			for(var3 = 0; var3 < 16; ++var3) {
-				this.heightMap[var3 << 4 | var2] = -128;
-				this.relightBlock(var2, 127, var3);
-				if((this.heightMap[var3 << 4 | var2] & 255) < var1) {
-					var1 = this.heightMap[var3 << 4 | var2] & 255;
+		int l;
+		int n;
+		for(l = 0; l < 16; ++l) {
+			for(n = 0; n < 16; ++n) {
+				this.heightMap[n << 4 | l] = -128;
+				this.relightBlock(l, 127, n);
+				if((this.heightMap[n << 4 | l] & 255) < i) {
+					i = this.heightMap[n << 4 | l] & 255;
 				}
 			}
 		}
 
-		this.height = var1;
+		this.height = i;
 
-		for(var2 = 0; var2 < 16; ++var2) {
-			for(var3 = 0; var3 < 16; ++var3) {
-				this.updateSkylight_do(var2, var3);
+		for(l = 0; l < 16; ++l) {
+			for(n = 0; n < 16; ++n) {
+				this.updateSkylight_do(l, n);
 			}
 		}
 
 		this.isModified = true;
 	}
 
-	private void updateSkylight_do(int var1, int var2) {
-		int var3 = this.getHeightValue(var1, var2);
-		int var4 = this.xPosition * 16 + var1;
-		int var5 = this.zPosition * 16 + var2;
-		this.checkSkylightNeighborUpdate(var4 - 1, var5, var3);
-		this.checkSkylightNeighborUpdate(var4 + 1, var5, var3);
-		this.checkSkylightNeighborUpdate(var4, var5 - 1, var3);
-		this.checkSkylightNeighborUpdate(var4, var5 + 1, var3);
+	private void updateSkylight_do(int n, int n2) {
+		int b = this.getHeightValue(n, n2);
+		int n3 = this.xPosition * 16 + n;
+		int n4 = this.zPosition * 16 + n2;
+		this.checkSkylightNeighborUpdate(n3 - 1, n4, b);
+		this.checkSkylightNeighborUpdate(n3 + 1, n4, b);
+		this.checkSkylightNeighborUpdate(n3, n4 - 1, b);
+		this.checkSkylightNeighborUpdate(n3, n4 + 1, b);
 	}
 
-	private void checkSkylightNeighborUpdate(int var1, int var2, int var3) {
-		int var4 = this.worldObj.getHeightValue(var1, var2);
-		if(var4 > var3) {
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var1, var3, var2, var1, var4, var2);
-		} else if(var4 < var3) {
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var1, var4, var2, var1, var3, var2);
+	private void checkSkylightNeighborUpdate(int n, int n2, int n3) {
+		int c = this.worldObj.getHeightValue(n, n2);
+		if(c > n3) {
+			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, n, n3, n2, n, c, n2);
+		} else if(c < n3) {
+			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, n, c, n2, n, n3, n2);
 		}
 
 		this.isModified = true;
 	}
 
-	private void relightBlock(int var1, int var2, int var3) {
-		int var4 = this.heightMap[var3 << 4 | var1] & 255;
-		int var5 = var4;
-		if(var2 > var4) {
-			var5 = var2;
-		}
-
-		for(int var6 = var1 << 11 | var3 << 7; var5 > 0 && Block.lightOpacity[this.blocks[var6 + var5 - 1]] == 0; --var5) {
-		}
-
-		if(var5 != var4) {
-			this.worldObj.markBlocksDirtyVertical(var1, var3, var5, var4);
-			this.heightMap[var3 << 4 | var1] = (byte)var5;
-			int var7;
-			int var8;
-			int var9;
-			if(var5 < this.height) {
-				this.height = var5;
+	private void relightBlock(int n, int n2, int n3) {
+		int i = this.heightMap[n3 << 4 | n] & 255;
+		int n4 = i;
+		if(n2 > i) {
+			i = n2;
+		}
+
+		int n6;
+		for(n6 = n << 11 | n3 << 7; i > 0 && Block.lightOpacity[this.blocks[n6 + i - 1] & 255] == 0; --i) {
+		}
+
+		if(i != n4) {
+			this.worldObj.markBlocksDirtyVertical(n, n3, i, n4);
+			this.heightMap[n3 << 4 | n] = (byte)i;
+			int n7;
+			int n10;
+			if(i < this.height) {
+				this.height = i;
 			} else {
-				var7 = 127;
+				n6 = 127;
 
-				for(var8 = 0; var8 < 16; ++var8) {
-					for(var9 = 0; var9 < 16; ++var9) {
-						if((this.heightMap[var9 << 4 | var8] & 255) < var7) {
-							var7 = this.heightMap[var9 << 4 | var8] & 255;
+				for(n7 = 0; n7 < 16; ++n7) {
+					for(n10 = 0; n10 < 16; ++n10) {
+						if((this.heightMap[n10 << 4 | n7] & 255) < n6) {
+							n6 = this.heightMap[n10 << 4 | n7] & 255;
 						}
 					}
 				}
 
-				this.height = var7;
+				this.height = n6;
 			}
 
-			var7 = this.xPosition * 16 + var1;
-			var8 = this.zPosition * 16 + var3;
-			if(var5 < var4) {
-				for(var9 = var5; var9 < var4; ++var9) {
-					this.skylightMap.set(var1, var9, var3, 15);
+			n6 = this.xPosition * 16 + n;
+			n7 = this.zPosition * 16 + n3;
+			if(i < n4) {
+				for(n10 = i; n10 < n4; ++n10) {
+					this.skylightMap.set(n, n10, n3, 15);
 				}
 			} else {
-				this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var7, var4, var8, var7, var5, var8);
-
-				for(var9 = var4; var9 < var5; ++var9) {
-					this.skylightMap.set(var1, var9, var3, 0);
-				}
-			}
-
-			var9 = 15;
-
-			int var10;
-			for(var10 = var5; var5 > 0 && var9 > 0; this.skylightMap.set(var1, var5, var3, var9)) {
-				--var5;
-				int var11 = Block.lightOpacity[this.getBlockID(var1, var5, var3)];
-				if(var11 == 0) {
-					var11 = 1;
-				}
-
-				var9 -= var11;
-				if(var9 < 0) {
-					var9 = 0;
-				}
-			}
-
-			while(var5 > 0 && Block.lightOpacity[this.getBlockID(var1, var5 - 1, var3)] == 0) {
-				--var5;
-			}
-
-			if(var5 != var10) {
-				this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var7 - 1, var5, var8 - 1, var7 + 1, var10, var8 + 1);
-			}
-
-			this.isModified = true;
-		}
-	}
-
-	public int getBlockID(int var1, int var2, int var3) {
-		return this.blocks[var1 << 11 | var3 << 7 | var2];
-	}
-
-	public boolean setBlockIDWithMetadata(int var1, int var2, int var3, int var4, int var5) {
-		byte var6 = (byte)var4;
-		int var7 = this.heightMap[var3 << 4 | var1] & 255;
-		int var8 = this.blocks[var1 << 11 | var3 << 7 | var2] & 255;
-		if(var8 == var4 && this.data.get(var1, var2, var3) == var5) {
-			return false;
-		} else {
-			int var9 = this.xPosition * 16 + var1;
-			int var10 = this.zPosition * 16 + var3;
-			this.blocks[var1 << 11 | var3 << 7 | var2] = var6;
-			if(var8 != 0 && !this.worldObj.multiplayerWorld) {
-				Block.blocksList[var8].onBlockRemoval(this.worldObj, var9, var2, var10);
-			}
-
-			this.data.set(var1, var2, var3, var5);
-			if(Block.lightOpacity[var6] != 0) {
-				if(var2 >= var7) {
-					this.relightBlock(var1, var2 + 1, var3);
-				}
-			} else if(var2 == var7 - 1) {
-				this.relightBlock(var1, var2, var3);
-			}
-
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var9, var2, var10, var9, var2, var10);
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Block, var9, var2, var10, var9, var2, var10);
-			this.updateSkylight_do(var1, var3);
-			if(var4 != 0) {
-				Block.blocksList[var4].onBlockAdded(this.worldObj, var9, var2, var10);
-			}
-
-			this.isModified = true;
-			return true;
-		}
-	}
-
-	public boolean setBlockID(int var1, int var2, int var3, int var4) {
-		byte var5 = (byte)var4;
-		int var6 = this.heightMap[var3 << 4 | var1] & 255;
-		int var7 = this.blocks[var1 << 11 | var3 << 7 | var2] & 255;
-		if(var7 == var4) {
-			return false;
-		} else {
-			int var8 = this.xPosition * 16 + var1;
-			int var9 = this.zPosition * 16 + var3;
-			this.blocks[var1 << 11 | var3 << 7 | var2] = var5;
-			if(var7 != 0) {
-				Block.blocksList[var7].onBlockRemoval(this.worldObj, var8, var2, var9);
-			}
-
-			this.data.set(var1, var2, var3, 0);
-			if(Block.lightOpacity[var5] != 0) {
-				if(var2 >= var6) {
-					this.relightBlock(var1, var2 + 1, var3);
-				}
-			} else if(var2 == var6 - 1) {
-				this.relightBlock(var1, var2, var3);
-			}
-
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, var8, var2, var9, var8, var2, var9);
-			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Block, var8, var2, var9, var8, var2, var9);
-			this.updateSkylight_do(var1, var3);
-			if(var4 != 0 && !this.worldObj.multiplayerWorld) {
-				Block.blocksList[var4].onBlockAdded(this.worldObj, var8, var2, var9);
-			}
-
-			this.isModified = true;
-			return true;
-		}
-	}
-
-	public int getBlockMetadata(int var1, int var2, int var3) {
-		return this.data.get(var1, var2, var3);
-	}
-
-	public void setBlockMetadata(int var1, int var2, int var3, int var4) {
-		this.isModified = true;
-		this.data.set(var1, var2, var3, var4);
-	}
-
-	public int getSavedLightValue(EnumSkyBlock var1, int var2, int var3, int var4) {
-		return var1 == EnumSkyBlock.Sky ? this.skylightMap.get(var2, var3, var4) : (var1 == EnumSkyBlock.Block ? this.blocklightMap.get(var2, var3, var4) : 0);
-	}
-
-	public void setLightValue(EnumSkyBlock var1, int var2, int var3, int var4, int var5) {
-		this.isModified = true;
-		if(var1 == EnumSkyBlock.Sky) {
-			this.skylightMap.set(var2, var3, var4, var5);
-		} else {
-			if(var1 != EnumSkyBlock.Block) {
+				this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, n6, n4, n7, n6, i, n7);
+
+				for(n10 = n4; n10 < i; ++n10) {
+					this.skylightMap.set(n, n10, n3, 0);
+				}
+			}
+
+			n10 = 15;
+
+			int n11;
+			for(n11 = i; i > 0 && n10 > 0; this.skylightMap.set(n, i, n3, n10)) {
+				--i;
+				int n12 = Block.lightOpacity[this.getBlockID(n, i, n3)];
+				if(n12 == 0) {
+					n12 = 1;
+				}
+
+				n10 -= n12;
+				if(n10 < 0) {
+					n10 = 0;
+				}
+			}
+
+			while(i > 0 && Block.lightOpacity[this.getBlockID(n, i - 1, n3)] == 0) {
+				--i;
+			}
+
+			if(i != n11) {
+				this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, n6 - 1, i, n7 - 1, n6 + 1, n11, n7 + 1);
+			}
+
+			this.isModified = true;
+		}
+	}
+
+	public int getBlockID(int n, int n2, int n3) {
+		return this.blocks[n << 11 | n3 << 7 | n2] & 255;
+	}
+
+	public boolean setBlockIDWithMetadata(int n, int n2, int n3, int n4, int n5) {
+		byte b = (byte)n4;
+		int n6 = this.heightMap[n3 << 4 | n] & 255;
+		int n7 = this.blocks[n << 11 | n3 << 7 | n2] & 255;
+		if(n7 == n4 && this.data.get(n, n2, n3) == n5) {
+			return false;
+		} else {
+			int n8 = this.xPosition * 16 + n;
+			int n9 = this.zPosition * 16 + n3;
+			this.blocks[n << 11 | n3 << 7 | n2] = b;
+			if(n7 != 0 && !this.worldObj.multiplayerWorld) {
+				Block.blocksList[n7].onBlockRemoval(this.worldObj, n8, n2, n9);
+			}
+
+			this.data.set(n, n2, n3, n5);
+			if(Block.lightOpacity[b] != 0) {
+				if(n2 >= n6) {
+					this.relightBlock(n, n2 + 1, n3);
+				}
+			} else if(n2 == n6 - 1) {
+				this.relightBlock(n, n2, n3);
+			}
+
+			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, n8, n2, n9, n8, n2, n9);
+			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Block, n8, n2, n9, n8, n2, n9);
+			this.updateSkylight_do(n, n3);
+			if(n4 != 0) {
+				Block.blocksList[n4].onBlockAdded(this.worldObj, n8, n2, n9);
+			}
+
+			return this.isModified = true;
+		}
+	}
+
+	public boolean setBlockID(int n, int n2, int n3, int n4) {
+		byte b = (byte)n4;
+		int n5 = this.heightMap[n3 << 4 | n] & 255;
+		int n6 = this.blocks[n << 11 | n3 << 7 | n2] & 255;
+		if(n6 == n4) {
+			return false;
+		} else {
+			int n7 = this.xPosition * 16 + n;
+			int n8 = this.zPosition * 16 + n3;
+			this.blocks[n << 11 | n3 << 7 | n2] = b;
+			if(n6 != 0) {
+				Block.blocksList[n6].onBlockRemoval(this.worldObj, n7, n2, n8);
+			}
+
+			this.data.set(n, n2, n3, 0);
+			if(Block.lightOpacity[b & 255] != 0) {
+				if(n2 >= n5) {
+					this.relightBlock(n, n2 + 1, n3);
+				}
+			} else if(n2 == n5 - 1) {
+				this.relightBlock(n, n2, n3);
+			}
+
+			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Sky, n7, n2, n8, n7, n2, n8);
+			this.worldObj.scheduleLightingUpdate(EnumSkyBlock.Block, n7, n2, n8, n7, n2, n8);
+			this.updateSkylight_do(n, n3);
+			if(n4 != 0 && !this.worldObj.multiplayerWorld) {
+				Block.blocksList[n4].onBlockAdded(this.worldObj, n7, n2, n8);
+			}
+
+			return this.isModified = true;
+		}
+	}
+
+	public int getBlockMetadata(int n, int n2, int n3) {
+		return this.data.get(n, n2, n3);
+	}
+
+	public void setBlockMetadata(int n, int n2, int n3, int n4) {
+		this.isModified = true;
+		this.data.set(n, n2, n3, n4);
+	}
+
+	public int getSavedLightValue(EnumSkyBlock by, int n, int n2, int n3) {
+		return by == EnumSkyBlock.Sky ? this.skylightMap.get(n, n2, n3) : (by == EnumSkyBlock.Block ? this.blocklightMap.get(n, n2, n3) : 0);
+	}
+
+	public void setLightValue(EnumSkyBlock by, int n, int n2, int n3, int n4) {
+		this.isModified = true;
+		if(by == EnumSkyBlock.Sky) {
+			this.skylightMap.set(n, n2, n3, n4);
+		} else {
+			if(by != EnumSkyBlock.Block) {
 				return;
 			}
 
-			this.blocklightMap.set(var2, var3, var4, var5);
+			this.blocklightMap.set(n, n2, n3, n4);
 		}
 
 	}
 
-	public int getBlockLightValue(int var1, int var2, int var3, int var4) {
-		int var5 = this.skylightMap.get(var1, var2, var3);
-		if(var5 > 0) {
+	public int getBlockLightValue(int n, int n2, int n3, int n4) {
+		int a = this.skylightMap.get(n, n2, n3);
+		if(a > 0) {
 			isLit = true;
 		}
 
-		var5 -= var4;
-		int var6 = this.blocklightMap.get(var1, var2, var3);
-		if(var6 > var5) {
-			var5 = var6;
+		int n5 = a - n4;
+		int a2 = this.blocklightMap.get(n, n2, n3);
+		if(a2 > n5) {
+			n5 = a2;
 		}
 
-		return var5;
+		return n5;
 	}
 
-	public void addEntity(Entity var1) {
+	public void addEntity(Entity obj) {
 		if(!this.isChunkRendered) {
 			this.hasEntities = true;
-			int var2 = MathHelper.floor_double(var1.posX / 16.0D);
-			int var3 = MathHelper.floor_double(var1.posZ / 16.0D);
-			if(var2 != this.xPosition || var3 != this.zPosition) {
-				System.out.println("Wrong location! " + var1);
-			}
-
-			int var4 = MathHelper.floor_double(var1.posY / 16.0D);
-			if(var4 < 0) {
-				var4 = 0;
-			}
-
-			if(var4 >= this.entities.length) {
-				var4 = this.entities.length - 1;
-			}
-
-			var1.addedToChunk = true;
-			var1.chunkCoordX = this.xPosition;
-			var1.chunkCoordY = var4;
-			var1.chunkCoordZ = this.zPosition;
-			this.entities[var4].add(var1);
-		}
-	}
-
-	public void removeEntity(Entity var1) {
-		this.removeEntityAtIndex(var1, var1.chunkCoordY);
-	}
-
-	public void removeEntityAtIndex(Entity var1, int var2) {
-		if(var2 < 0) {
-			var2 = 0;
-		}
-
-		if(var2 >= this.entities.length) {
-			var2 = this.entities.length - 1;
-		}
-
-		this.entities[var2].remove(var1);
-	}
-
-	public boolean canBlockSeeTheSky(int var1, int var2, int var3) {
-		return var2 >= (this.heightMap[var3 << 4 | var1] & 255);
-	}
-
-	public TileEntity getChunkBlockTileEntity(int var1, int var2, int var3) {
-		ChunkPosition var4 = new ChunkPosition(var1, var2, var3);
-		TileEntity var5 = (TileEntity)this.chunkTileEntityMap.get(var4);
-		if(var5 == null) {
-			int var6 = this.getBlockID(var1, var2, var3);
-			if(!Block.isBlockContainer[var6]) {
+			int b = MathHelper.floor_double(obj.posX / 16.0D);
+			int b2 = MathHelper.floor_double(obj.posZ / 16.0D);
+			if(b != this.xPosition || b2 != this.zPosition) {
+				System.out.println("Wrong location! " + obj);
+			}
+
+			int b3 = MathHelper.floor_double(obj.posY / 16.0D);
+			if(b3 < 0) {
+				b3 = 0;
+			}
+
+			if(b3 >= this.entities.length) {
+				b3 = this.entities.length - 1;
+			}
+
+			obj.addedToChunk = true;
+			obj.chunkCoordX = this.xPosition;
+			obj.chunkCoordY = b3;
+			obj.chunkCoordZ = this.zPosition;
+			this.entities[b3].add(obj);
+		}
+	}
+
+	public void removeEntity(Entity kh) {
+		this.removeEntityAtIndex(kh, kh.chunkCoordY);
+	}
+
+	public void removeEntityAtIndex(Entity kh, int n) {
+		if(n < 0) {
+			n = 0;
+		}
+
+		if(n >= this.entities.length) {
+			n = this.entities.length - 1;
+		}
+
+		this.entities[n].remove(kh);
+	}
+
+	public boolean canBlockSeeTheSky(int n, int n2, int n3) {
+		return n2 >= (this.heightMap[n3 << 4 | n] & 255);
+	}
+
+	public TileEntity getChunkBlockTileEntity(int n, int n2, int n3) {
+		ChunkPosition mt = new ChunkPosition(n, n2, n3);
+		TileEntity ic = (TileEntity)this.chunkTileEntityMap.get(mt);
+		if(ic == null) {
+			int a = this.getBlockID(n, n2, n3);
+			if(!Block.isBlockContainer[a]) {
 				return null;
 			}
 
-			BlockContainer var7 = (BlockContainer)Block.blocksList[var6];
-			var7.onBlockAdded(this.worldObj, this.xPosition * 16 + var1, var2, this.zPosition * 16 + var3);
-			var5 = (TileEntity)this.chunkTileEntityMap.get(var4);
+			((BlockContainer)Block.blocksList[a]).onBlockAdded(this.worldObj, this.xPosition * 16 + n, n2, this.zPosition * 16 + n3);
+			ic = (TileEntity)this.chunkTileEntityMap.get(mt);
 		}
 
-		return var5;
-	}
-
-	public void addTileEntity(TileEntity var1) {
-		int var2 = var1.xCoord - this.xPosition * 16;
-		int var3 = var1.yCoord;
-		int var4 = var1.zCoord - this.zPosition * 16;
-		this.setChunkBlockTileEntity(var2, var3, var4, var1);
-	}
-
-	public void setChunkBlockTileEntity(int var1, int var2, int var3, TileEntity var4) {
-		ChunkPosition var5 = new ChunkPosition(var1, var2, var3);
-		var4.worldObj = this.worldObj;
-		var4.xCoord = this.xPosition * 16 + var1;
-		var4.yCoord = var2;
-		var4.zCoord = this.zPosition * 16 + var3;
-		if(this.getBlockID(var1, var2, var3) != 0 && Block.blocksList[this.getBlockID(var1, var2, var3)] instanceof BlockContainer) {
+		return ic;
+	}
+
+	public void addTileEntity(TileEntity ic) {
+		this.setChunkBlockTileEntity(ic.xCoord - this.xPosition * 16, ic.yCoord, ic.zCoord - this.zPosition * 16, ic);
+	}
+
+	public void setChunkBlockTileEntity(int n, int g, int n2, TileEntity ic) {
+		ChunkPosition mt = new ChunkPosition(n, g, n2);
+		ic.worldObj = this.worldObj;
+		ic.xCoord = this.xPosition * 16 + n;
+		ic.yCoord = g;
+		ic.zCoord = this.zPosition * 16 + n2;
+		if(this.getBlockID(n, g, n2) != 0 && Block.blocksList[this.getBlockID(n, g, n2)] instanceof BlockContainer) {
 			if(this.isChunkLoaded) {
-				if(this.chunkTileEntityMap.get(var5) != null) {
-					this.worldObj.loadedTileEntityList.remove(this.chunkTileEntityMap.get(var5));
+				if(this.chunkTileEntityMap.get(mt) != null) {
+					this.worldObj.loadedTileEntityList.remove(this.chunkTileEntityMap.get(mt));
 				}
 
-				this.worldObj.loadedTileEntityList.add(var4);
+				this.worldObj.loadedTileEntityList.add(ic);
 			}
 
-			this.chunkTileEntityMap.put(var5, var4);
+			this.chunkTileEntityMap.put(mt, ic);
 		} else {
 			System.out.println("Attempted to place a tile entity where there was no entity tile!");
 		}
 	}
 
-	public void removeChunkBlockTileEntity(int var1, int var2, int var3) {
-		ChunkPosition var4 = new ChunkPosition(var1, var2, var3);
+	public void removeChunkBlockTileEntity(int n, int n2, int n3) {
+		ChunkPosition mt = new ChunkPosition(n, n2, n3);
 		if(this.isChunkLoaded) {
-			this.worldObj.loadedTileEntityList.remove(this.chunkTileEntityMap.remove(var4));
+			this.worldObj.loadedTileEntityList.remove(this.chunkTileEntityMap.remove(mt));
 		}
 
 	}
@@ -426,8 +420,8 @@
 		this.isChunkLoaded = true;
 		this.worldObj.loadedTileEntityList.addAll(this.chunkTileEntityMap.values());
 
-		for(int var1 = 0; var1 < this.entities.length; ++var1) {
-			this.worldObj.addLoadedEntities(this.entities[var1]);
+		for(int i = 0; i < this.entities.length; ++i) {
+			this.worldObj.addLoadedEntities(this.entities[i]);
 		}
 
 	}
@@ -436,8 +430,8 @@
 		this.isChunkLoaded = false;
 		this.worldObj.loadedTileEntityList.removeAll(this.chunkTileEntityMap.values());
 
-		for(int var1 = 0; var1 < this.entities.length; ++var1) {
-			this.worldObj.unloadEntities(this.entities[var1]);
+		for(int i = 0; i < this.entities.length; ++i) {
+			this.worldObj.unloadEntities(this.entities[i]);
 		}
 
 	}
@@ -446,105 +440,105 @@
 		this.isModified = true;
 	}
 
-	public void getEntitiesWithinAABBForEntity(Entity var1, AxisAlignedBB var2, List var3) {
-		int var4 = MathHelper.floor_double((var2.minY - 2.0D) / 16.0D);
-		int var5 = MathHelper.floor_double((var2.maxY + 2.0D) / 16.0D);
-		if(var4 < 0) {
-			var4 = 0;
-		}
-
-		if(var5 >= this.entities.length) {
-			var5 = this.entities.length - 1;
-		}
-
-		for(int var6 = var4; var6 <= var5; ++var6) {
-			List var7 = this.entities[var6];
-
-			for(int var8 = 0; var8 < var7.size(); ++var8) {
-				Entity var9 = (Entity)var7.get(var8);
-				if(var9 != var1 && var9.boundingBox.intersectsWith(var2)) {
-					var3.add(var9);
-				}
-			}
-		}
-
-	}
-
-	public void getEntitiesOfTypeWithinAAAB(Class var1, AxisAlignedBB var2, List var3) {
-		int var4 = MathHelper.floor_double((var2.minY - 2.0D) / 16.0D);
-		int var5 = MathHelper.floor_double((var2.maxY + 2.0D) / 16.0D);
-		if(var4 < 0) {
-			var4 = 0;
-		}
-
-		if(var5 >= this.entities.length) {
-			var5 = this.entities.length - 1;
-		}
-
-		for(int var6 = var4; var6 <= var5; ++var6) {
-			List var7 = this.entities[var6];
-
-			for(int var8 = 0; var8 < var7.size(); ++var8) {
-				Entity var9 = (Entity)var7.get(var8);
-				if(var1.isAssignableFrom(var9.getClass()) && var9.boundingBox.intersectsWith(var2)) {
-					var3.add(var9);
-				}
-			}
-		}
-
-	}
-
-	public boolean needsSaving(boolean var1) {
-		return this.neverSave ? false : (this.hasEntities && this.worldObj.worldTime != this.lastSaveTime ? true : this.isModified);
-	}
-
-	public int setChunkData(byte[] var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8) {
-		int var9;
-		int var10;
-		int var11;
-		int var12;
-		for(var9 = var2; var9 < var5; ++var9) {
-			for(var10 = var4; var10 < var7; ++var10) {
-				var11 = var9 << 11 | var10 << 7 | var3;
-				var12 = var6 - var3;
-				System.arraycopy(var1, var8, this.blocks, var11, var12);
-				var8 += var12;
+	public void getEntitiesWithinAABBForEntity(Entity kh, AxisAlignedBB cf, List list) {
+		int b = MathHelper.floor_double((cf.minY - 2.0D) / 16.0D);
+		int b2 = MathHelper.floor_double((cf.maxY + 2.0D) / 16.0D);
+		if(b < 0) {
+			b = 0;
+		}
+
+		if(b2 >= this.entities.length) {
+			b2 = this.entities.length - 1;
+		}
+
+		for(int i = b; i <= b2; ++i) {
+			List list2 = this.entities[i];
+
+			for(int j = 0; j < list2.size(); ++j) {
+				Entity kh2 = (Entity)list2.get(j);
+				if(kh2 != kh && kh2.boundingBox.intersectsWith(cf)) {
+					list.add(kh2);
+				}
+			}
+		}
+
+	}
+
+	public void getEntitiesOfTypeWithinAAAB(Class clazz, AxisAlignedBB cf, List list) {
+		int b = MathHelper.floor_double((cf.minY - 2.0D) / 16.0D);
+		int b2 = MathHelper.floor_double((cf.maxY + 2.0D) / 16.0D);
+		if(b < 0) {
+			b = 0;
+		}
+
+		if(b2 >= this.entities.length) {
+			b2 = this.entities.length - 1;
+		}
+
+		for(int i = b; i <= b2; ++i) {
+			List list2 = this.entities[i];
+
+			for(int j = 0; j < list2.size(); ++j) {
+				Entity kh = (Entity)list2.get(j);
+				if(clazz.isAssignableFrom(kh.getClass()) && kh.boundingBox.intersectsWith(cf)) {
+					list.add(kh);
+				}
+			}
+		}
+
+	}
+
+	public boolean needsSaving(boolean b) {
+		return !this.neverSave && (this.hasEntities && this.worldObj.worldTime != this.lastSaveTime || this.isModified);
+	}
+
+	public int setChunkData(byte[] array, int n, int n2, int n3, int n4, int n5, int n6, int n7) {
+		int n16;
+		int n17;
+		int n18;
+		int n19;
+		for(n16 = n; n16 < n4; ++n16) {
+			for(n17 = n3; n17 < n6; ++n17) {
+				n18 = n16 << 11 | n17 << 7 | n2;
+				n19 = n5 - n2;
+				System.arraycopy(array, n7, this.blocks, n18, n19);
+				n7 += n19;
 			}
 		}
 
 		this.generateHeightMap();
 
-		for(var9 = var2; var9 < var5; ++var9) {
-			for(var10 = var4; var10 < var7; ++var10) {
-				var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
-				var12 = (var6 - var3) / 2;
-				System.arraycopy(var1, var8, this.data.data, var11, var12);
-				var8 += var12;
-			}
-		}
-
-		for(var9 = var2; var9 < var5; ++var9) {
-			for(var10 = var4; var10 < var7; ++var10) {
-				var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
-				var12 = (var6 - var3) / 2;
-				System.arraycopy(var1, var8, this.blocklightMap.data, var11, var12);
-				var8 += var12;
-			}
-		}
-
-		for(var9 = var2; var9 < var5; ++var9) {
-			for(var10 = var4; var10 < var7; ++var10) {
-				var11 = (var9 << 11 | var10 << 7 | var3) >> 1;
-				var12 = (var6 - var3) / 2;
-				System.arraycopy(var1, var8, this.skylightMap.data, var11, var12);
-				var8 += var12;
-			}
-		}
-
-		return var8;
+		for(n16 = n; n16 < n4; ++n16) {
+			for(n17 = n3; n17 < n6; ++n17) {
+				n18 = (n16 << 11 | n17 << 7 | n2) >> 1;
+				n19 = (n5 - n2) / 2;
+				System.arraycopy(array, n7, this.data.data, n18, n19);
+				n7 += n19;
+			}
+		}
+
+		for(n16 = n; n16 < n4; ++n16) {
+			for(n17 = n3; n17 < n6; ++n17) {
+				n18 = (n16 << 11 | n17 << 7 | n2) >> 1;
+				n19 = (n5 - n2) / 2;
+				System.arraycopy(array, n7, this.blocklightMap.data, n18, n19);
+				n7 += n19;
+			}
+		}
+
+		for(n16 = n; n16 < n4; ++n16) {
+			for(n17 = n3; n17 < n6; ++n17) {
+				n18 = (n16 << 11 | n17 << 7 | n2) >> 1;
+				n19 = (n5 - n2) / 2;
+				System.arraycopy(array, n7, this.skylightMap.data, n18, n19);
+				n7 += n19;
+			}
+		}
+
+		return n7;
 	}
 
-	public Random getRandomWithSeed(long var1) {
-		return new Random(this.worldObj.randomSeed + (long)(this.xPosition * this.xPosition * 4987142) + (long)(this.xPosition * 5947611) + (long)(this.zPosition * this.zPosition) * 4392871L + (long)(this.zPosition * 389711) ^ var1);
+	public Random getRandomWithSeed(long n) {
+		return new Random(this.worldObj.randomSeed + (long)(this.xPosition * this.xPosition * 4987142) + (long)(this.xPosition * 5947611) + (long)(this.zPosition * this.zPosition) * 4392871L + (long)(this.zPosition * 389711) ^ n);
 	}
 }
--- /dev/null
+++ net/minecraft/src/BlockReedBlu.java
@@ -1,0 +1,73 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockReedBlu extends Block {
+	protected BlockReedBlu(int var1, int var2) {
+		super(var1, Material.plants);
+		this.blockIndexInTexture = var2;
+		float var3 = 6.0F / 16.0F;
+		this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, 1.0F, 0.5F + var3);
+		this.setTickOnLoad(true);
+	}
+
+	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
+		if(var1.getBlockId(var2, var3 + 1, var4) == 0) {
+			int var6;
+			for(var6 = 1; var1.getBlockId(var2, var3 - var6, var4) == this.blockID; ++var6) {
+			}
+
+			if(var6 < 3) {
+				int var7 = var1.getBlockMetadata(var2, var3, var4);
+				if(var7 == 15) {
+					var1.setBlockWithNotify(var2, var3 + 1, var4, this.blockID);
+					var1.setBlockMetadataWithNotify(var2, var3, var4, 0);
+				} else {
+					var1.setBlockMetadataWithNotify(var2, var3, var4, var7 + 1);
+				}
+			}
+		}
+
+	}
+
+	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
+		int var5 = var1.getBlockId(var2, var3 - 1, var4);
+		return var5 == this.blockID ? true : (var5 != Block.grass.blockID && var5 != Block.dirt.blockID ? false : (var1.getBlockMaterial(var2 - 1, var3 - 1, var4) == Material.water ? true : (var1.getBlockMaterial(var2 + 1, var3 - 1, var4) == Material.water ? true : (var1.getBlockMaterial(var2, var3 - 1, var4 - 1) == Material.water ? true : var1.getBlockMaterial(var2, var3 - 1, var4 + 1) == Material.water))));
+	}
+
+	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
+		this.checkBlockCoordValid(var1, var2, var3, var4);
+	}
+
+	protected final void checkBlockCoordValid(World var1, int var2, int var3, int var4) {
+		if(!this.canBlockStay(var1, var2, var3, var4)) {
+			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
+			var1.setBlockWithNotify(var2, var3, var4, 0);
+		}
+
+	}
+
+	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
+		return this.canPlaceBlockAt(var1, var2, var3, var4);
+	}
+
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+		return null;
+	}
+
+	public int idDropped(int var1, Random var2) {
+		return Item.blueReed.shiftedIndex;
+	}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	public boolean renderAsNormalBlock() {
+		return false;
+	}
+
+	public int getRenderType() {
+		return 1;
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockNonFunctionalChest.java
@@ -1,0 +1,196 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockNonFunctionalChest extends BlockContainer {
+	private Random random = new Random();
+
+	protected BlockNonFunctionalChest(int var1) {
+		super(var1, Material.wood);
+		this.blockIndexInTexture = 26;
+	}
+
+	public int getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+		if(var5 == 1) {
+			return this.blockIndexInTexture - 1;
+		} else if(var5 == 0) {
+			return this.blockIndexInTexture - 1;
+		} else {
+			int var6 = var1.getBlockId(var2, var3, var4 - 1);
+			int var7 = var1.getBlockId(var2, var3, var4 + 1);
+			int var8 = var1.getBlockId(var2 - 1, var3, var4);
+			int var9 = var1.getBlockId(var2 + 1, var3, var4);
+			int var10;
+			int var11;
+			int var12;
+			byte var13;
+			if(var6 != this.blockID && var7 != this.blockID) {
+				if(var8 != this.blockID && var9 != this.blockID) {
+					byte var14 = 3;
+					if(Block.opaqueCubeLookup[var6] && !Block.opaqueCubeLookup[var7]) {
+						var14 = 3;
+					}
+
+					if(Block.opaqueCubeLookup[var7] && !Block.opaqueCubeLookup[var6]) {
+						var14 = 2;
+					}
+
+					if(Block.opaqueCubeLookup[var8] && !Block.opaqueCubeLookup[var9]) {
+						var14 = 5;
+					}
+
+					if(Block.opaqueCubeLookup[var9] && !Block.opaqueCubeLookup[var8]) {
+						var14 = 4;
+					}
+
+					return var5 == var14 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture;
+				} else if(var5 != 4 && var5 != 5) {
+					var10 = 0;
+					if(var8 == this.blockID) {
+						var10 = -1;
+					}
+
+					var11 = var1.getBlockId(var8 == this.blockID ? var2 - 1 : var2 + 1, var3, var4 - 1);
+					var12 = var1.getBlockId(var8 == this.blockID ? var2 - 1 : var2 + 1, var3, var4 + 1);
+					if(var5 == 3) {
+						var10 = -1 - var10;
+					}
+
+					var13 = 3;
+					if((Block.opaqueCubeLookup[var6] || Block.opaqueCubeLookup[var11]) && !Block.opaqueCubeLookup[var7] && !Block.opaqueCubeLookup[var12]) {
+						var13 = 3;
+					}
+
+					if((Block.opaqueCubeLookup[var7] || Block.opaqueCubeLookup[var12]) && !Block.opaqueCubeLookup[var6] && !Block.opaqueCubeLookup[var11]) {
+						var13 = 2;
+					}
+
+					return (var5 == var13 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture + 32) + var10;
+				} else {
+					return this.blockIndexInTexture;
+				}
+			} else if(var5 != 2 && var5 != 3) {
+				var10 = 0;
+				if(var6 == this.blockID) {
+					var10 = -1;
+				}
+
+				var11 = var1.getBlockId(var2 - 1, var3, var6 == this.blockID ? var4 - 1 : var4 + 1);
+				var12 = var1.getBlockId(var2 + 1, var3, var6 == this.blockID ? var4 - 1 : var4 + 1);
+				if(var5 == 4) {
+					var10 = -1 - var10;
+				}
+
+				var13 = 5;
+				if((Block.opaqueCubeLookup[var8] || Block.opaqueCubeLookup[var11]) && !Block.opaqueCubeLookup[var9] && !Block.opaqueCubeLookup[var12]) {
+					var13 = 5;
+				}
+
+				if((Block.opaqueCubeLookup[var9] || Block.opaqueCubeLookup[var12]) && !Block.opaqueCubeLookup[var8] && !Block.opaqueCubeLookup[var11]) {
+					var13 = 4;
+				}
+
+				return (var5 == var13 ? this.blockIndexInTexture + 16 : this.blockIndexInTexture + 32) + var10;
+			} else {
+				return this.blockIndexInTexture;
+			}
+		}
+	}
+
+	public int getBlockTextureFromSide(int var1) {
+		return var1 == 1 ? this.blockIndexInTexture - 1 : (var1 == 0 ? this.blockIndexInTexture - 1 : (var1 == 3 ? this.blockIndexInTexture + 1 : this.blockIndexInTexture));
+	}
+
+	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
+		int var5 = 0;
+		if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID) {
+			++var5;
+		}
+
+		if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID) {
+			++var5;
+		}
+
+		if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID) {
+			++var5;
+		}
+
+		if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID) {
+			++var5;
+		}
+
+		return var5 > 1 ? false : (this.isThereANeighborChest(var1, var2 - 1, var3, var4) ? false : (this.isThereANeighborChest(var1, var2 + 1, var3, var4) ? false : (this.isThereANeighborChest(var1, var2, var3, var4 - 1) ? false : !this.isThereANeighborChest(var1, var2, var3, var4 + 1))));
+	}
+
+	private boolean isThereANeighborChest(World var1, int var2, int var3, int var4) {
+		return var1.getBlockId(var2, var3, var4) != this.blockID ? false : (var1.getBlockId(var2 - 1, var3, var4) == this.blockID ? true : (var1.getBlockId(var2 + 1, var3, var4) == this.blockID ? true : (var1.getBlockId(var2, var3, var4 - 1) == this.blockID ? true : var1.getBlockId(var2, var3, var4 + 1) == this.blockID)));
+	}
+
+	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
+		TileEntityChest var5 = (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4);
+
+		for(int var6 = 0; var6 < var5.getSizeInventory(); ++var6) {
+			ItemStack var7 = var5.getStackInSlot(var6);
+			if(var7 != null) {
+				float var8 = this.random.nextFloat() * 0.8F + 0.1F;
+				float var9 = this.random.nextFloat() * 0.8F + 0.1F;
+				float var10 = this.random.nextFloat() * 0.8F + 0.1F;
+
+				while(var7.stackSize > 0) {
+					int var11 = this.random.nextInt(21) + 10;
+					if(var11 > var7.stackSize) {
+						var11 = var7.stackSize;
+					}
+
+					var7.stackSize -= var11;
+					EntityItem var12 = new EntityItem(var1, (double)((float)var2 + var8), (double)((float)var3 + var9), (double)((float)var4 + var10), new ItemStack(var7.itemID, var11, var7.itemDmg));
+					float var13 = 0.05F;
+					var12.motionX = (double)((float)this.random.nextGaussian() * var13);
+					var12.motionY = (double)((float)this.random.nextGaussian() * var13 + 0.2F);
+					var12.motionZ = (double)((float)this.random.nextGaussian() * var13);
+					var1.spawnEntityInWorld(var12);
+				}
+			}
+		}
+
+		super.onBlockRemoval(var1, var2, var3, var4);
+	}
+
+	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
+		Object var6 = (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4);
+		if(var1.isBlockNormalCube(var2, var3 + 1, var4)) {
+			return true;
+		} else if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID && var1.isBlockNormalCube(var2 - 1, var3 + 1, var4)) {
+			return true;
+		} else if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID && var1.isBlockNormalCube(var2 + 1, var3 + 1, var4)) {
+			return true;
+		} else if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID && var1.isBlockNormalCube(var2, var3 + 1, var4 - 1)) {
+			return true;
+		} else if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID && var1.isBlockNormalCube(var2, var3 + 1, var4 + 1)) {
+			return true;
+		} else {
+			if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID) {
+				var6 = new InventoryLargeChest("Large chest", (TileEntityChest)var1.getBlockTileEntity(var2 - 1, var3, var4), (IInventory)var6);
+			}
+
+			if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID) {
+				var6 = new InventoryLargeChest("Large chest", (IInventory)var6, (TileEntityChest)var1.getBlockTileEntity(var2 + 1, var3, var4));
+			}
+
+			if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID) {
+				var6 = new InventoryLargeChest("Large chest", (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4 - 1), (IInventory)var6);
+			}
+
+			if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID) {
+				var6 = new InventoryLargeChest("Large chest", (IInventory)var6, (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4 + 1));
+			}
+
+			//var5.displayGUIChest((IInventory)var6);
+			return true;
+		}
+	}
+
+	protected TileEntity getBlockEntity() {
+		return new TileEntityChest();
+	}
+}
--- net/minecraft/client/Minecraft.java
+++ net/minecraft/client/Minecraft.java
@@ -8,6 +8,7 @@
 import java.awt.Frame;
 import java.awt.Graphics;
 import java.io.File;
+
 import net.minecraft.src.AxisAlignedBB;
 import net.minecraft.src.Block;
 import net.minecraft.src.EffectRenderer;
@@ -39,7 +40,6 @@
 import net.minecraft.src.MouseHelper;
 import net.minecraft.src.MovementInputFromOptions;
 import net.minecraft.src.MovingObjectPosition;
-import net.minecraft.src.OSMap;
 import net.minecraft.src.OpenGlCapsChecker;
 import net.minecraft.src.PlayerController;
 import net.minecraft.src.PlayerControllerCreative;
@@ -47,6 +47,7 @@
 import net.minecraft.src.RenderGlobal;
 import net.minecraft.src.RenderManager;
 import net.minecraft.src.ScaledResolution;
+import net.minecraft.src.ScreenShotHelper;
 import net.minecraft.src.Session;
 import net.minecraft.src.SoundManager;
 import net.minecraft.src.Tessellator;
@@ -63,6 +64,7 @@
 import net.minecraft.src.Vec3D;
 import net.minecraft.src.World;
 import net.minecraft.src.WorldRenderer;
+
 import org.lwjgl.LWJGLException;
 import org.lwjgl.input.Controllers;
 import org.lwjgl.input.Keyboard;
@@ -124,33 +126,34 @@
 	public boolean isRaining = false;
 	long systemTime = System.currentTimeMillis();
 	private int joinPlayerCounter = 0;
+	boolean isTakingScreenshot = false;
 
-	public Minecraft(Component var1, Canvas var2, MinecraftApplet var3, int var4, int var5, boolean var6) {
-		this.tempDisplayWidth = var4;
-		this.tempDisplayHeight = var5;
-		this.fullscreen = var6;
-		this.mcApplet = var3;
+	public Minecraft(Component component, Canvas canvas, MinecraftApplet mcApplet, int width, int height, boolean fullscreen) {
+		this.tempDisplayWidth = width;
+		this.tempDisplayHeight = height;
+		this.fullscreen = fullscreen;
+		this.mcApplet = mcApplet;
 		new ThreadSleepForever(this, "Timer hack thread");
-		this.mcCanvas = var2;
-		this.displayWidth = var4;
-		this.displayHeight = var5;
-		this.fullscreen = var6;
+		this.mcCanvas = canvas;
+		this.displayWidth = width;
+		this.displayHeight = height;
+		this.fullscreen = fullscreen;
 	}
 
-	public abstract void displayUnexpectedThrowable(UnexpectedThrowable var1);
+	public abstract void displayUnexpectedThrowable(UnexpectedThrowable unexpectedThrowable1);
 
-	public void setServer(String var1, int var2) {
-		this.serverName = var1;
-		this.serverPort = var2;
+	public void setServer(String string1, int i2) {
+		this.serverName = string1;
+		this.serverPort = i2;
 	}
 
 	public void startGame() throws LWJGLException {
 		if(this.mcCanvas != null) {
-			Graphics var1 = this.mcCanvas.getGraphics();
-			if(var1 != null) {
-				var1.setColor(Color.BLACK);
-				var1.fillRect(0, 0, this.displayWidth, this.displayHeight);
-				var1.dispose();
+			Graphics graphics1 = this.mcCanvas.getGraphics();
+			if(graphics1 != null) {
+				graphics1.setColor(Color.BLACK);
+				graphics1.fillRect(0, 0, this.displayWidth, this.displayHeight);
+				graphics1.dispose();
 			}
 
 			Display.setParent(this.mcCanvas);
@@ -169,16 +172,16 @@
 			Display.setDisplayMode(new DisplayMode(this.displayWidth, this.displayHeight));
 		}
 
-		Display.setTitle("Minecraft Minecraft Alpha v1.1.2_01");
+		Display.setTitle("SBMF v1.1.6");
 
 		try {
 			Display.create();
-		} catch (LWJGLException var6) {
-			var6.printStackTrace();
+		} catch (LWJGLException lWJGLException6) {
+			lWJGLException6.printStackTrace();
 
 			try {
 				Thread.sleep(1000L);
-			} catch (InterruptedException var5) {
+			} catch (InterruptedException interruptedException5) {
 			}
 
 			Display.create();
@@ -196,8 +199,8 @@
 
 		try {
 			Controllers.create();
-		} catch (Exception var4) {
-			var4.printStackTrace();
+		} catch (Exception exception4) {
+			exception4.printStackTrace();
 		}
 
 		this.checkGLError("Pre startup");
@@ -229,7 +232,7 @@
 		try {
 			this.downloadResourcesThread = new ThreadDownloadResources(this.mcDataDir, this);
 			this.downloadResourcesThread.start();
-		} catch (Exception var3) {
+		} catch (Exception exception3) {
 		}
 
 		this.checkGLError("Post startup");
@@ -243,35 +246,35 @@
 	}
 
 	private void loadScreen() throws LWJGLException {
-		ScaledResolution var1 = new ScaledResolution(this.displayWidth, this.displayHeight);
-		int var2 = var1.getScaledWidth();
-		int var3 = var1.getScaledHeight();
-		GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT | GL11.GL_COLOR_BUFFER_BIT);
+		ScaledResolution scaledResolution1 = new ScaledResolution(this.displayWidth, this.displayHeight);
+		int i2 = scaledResolution1.getScaledWidth();
+		int i3 = scaledResolution1.getScaledHeight();
+		GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
 		GL11.glMatrixMode(GL11.GL_PROJECTION);
 		GL11.glLoadIdentity();
-		GL11.glOrtho(0.0D, (double)var2, (double)var3, 0.0D, 1000.0D, 3000.0D);
+		GL11.glOrtho(0.0D, (double)i2, (double)i3, 0.0D, 1000.0D, 3000.0D);
 		GL11.glMatrixMode(GL11.GL_MODELVIEW);
 		GL11.glLoadIdentity();
 		GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
 		GL11.glViewport(0, 0, this.displayWidth, this.displayHeight);
 		GL11.glClearColor(0.0F, 0.0F, 0.0F, 0.0F);
-		Tessellator var4 = Tessellator.instance;
+		Tessellator tessellator4 = Tessellator.instance;
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glEnable(GL11.GL_TEXTURE_2D);
 		GL11.glDisable(GL11.GL_FOG);
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/title/mojang.png"));
-		var4.startDrawingQuads();
-		var4.setColorOpaque_I(16777215);
-		var4.addVertexWithUV(0.0D, (double)this.displayHeight, 0.0D, 0.0D, 0.0D);
-		var4.addVertexWithUV((double)this.displayWidth, (double)this.displayHeight, 0.0D, 0.0D, 0.0D);
-		var4.addVertexWithUV((double)this.displayWidth, 0.0D, 0.0D, 0.0D, 0.0D);
-		var4.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
-		var4.draw();
-		short var5 = 256;
-		short var6 = 256;
+		tessellator4.startDrawingQuads();
+		tessellator4.setColorOpaque_I(0xFFFFFF);
+		tessellator4.addVertexWithUV(0.0D, (double)this.displayHeight, 0.0D, 0.0D, 0.0D);
+		tessellator4.addVertexWithUV((double)this.displayWidth, (double)this.displayHeight, 0.0D, 0.0D, 0.0D);
+		tessellator4.addVertexWithUV((double)this.displayWidth, 0.0D, 0.0D, 0.0D, 0.0D);
+		tessellator4.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
+		tessellator4.draw();
+		short s5 = 256;
+		short s6 = 256;
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		var4.setColorOpaque_I(16777215);
-		this.scaledTessellator((this.displayWidth / 2 - var5) / 2, (this.displayHeight / 2 - var6) / 2, 0, 0, var5, var6);
+		tessellator4.setColorOpaque_I(0xFFFFFF);
+		this.scaledTessellator((this.displayWidth / 2 - s5) / 2, (this.displayHeight / 2 - s6) / 2, 0, 0, s5, s6);
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glDisable(GL11.GL_FOG);
 		GL11.glEnable(GL11.GL_ALPHA_TEST);
@@ -279,16 +282,16 @@
 		Display.swapBuffers();
 	}
 
-	public void scaledTessellator(int var1, int var2, int var3, int var4, int var5, int var6) {
-		float var7 = 0.00390625F;
-		float var8 = 0.00390625F;
-		Tessellator var9 = Tessellator.instance;
-		var9.startDrawingQuads();
-		var9.addVertexWithUV((double)(var1 + 0), (double)(var2 + var6), 0.0D, (double)((float)(var3 + 0) * var7), (double)((float)(var4 + var6) * var8));
-		var9.addVertexWithUV((double)(var1 + var5), (double)(var2 + var6), 0.0D, (double)((float)(var3 + var5) * var7), (double)((float)(var4 + var6) * var8));
-		var9.addVertexWithUV((double)(var1 + var5), (double)(var2 + 0), 0.0D, (double)((float)(var3 + var5) * var7), (double)((float)(var4 + 0) * var8));
-		var9.addVertexWithUV((double)(var1 + 0), (double)(var2 + 0), 0.0D, (double)((float)(var3 + 0) * var7), (double)((float)(var4 + 0) * var8));
-		var9.draw();
+	public void scaledTessellator(int i1, int i2, int i3, int i4, int i5, int i6) {
+		float f7 = 0.00390625F;
+		float f8 = 0.00390625F;
+		Tessellator tessellator9 = Tessellator.instance;
+		tessellator9.startDrawingQuads();
+		tessellator9.addVertexWithUV((double)(i1 + 0), (double)(i2 + i6), 0.0D, (double)((float)(i3 + 0) * f7), (double)((float)(i4 + i6) * f8));
+		tessellator9.addVertexWithUV((double)(i1 + i5), (double)(i2 + i6), 0.0D, (double)((float)(i3 + i5) * f7), (double)((float)(i4 + i6) * f8));
+		tessellator9.addVertexWithUV((double)(i1 + i5), (double)(i2 + 0), 0.0D, (double)((float)(i3 + i5) * f7), (double)((float)(i4 + 0) * f8));
+		tessellator9.addVertexWithUV((double)(i1 + 0), (double)(i2 + 0), 0.0D, (double)((float)(i3 + 0) * f7), (double)((float)(i4 + 0) * f8));
+		tessellator9.draw();
 	}
 
 	public static File getMinecraftDir() {
@@ -299,60 +302,60 @@
 		return minecraftDir;
 	}
 
-	public static File getAppDir(String var0) {
-		String var1 = System.getProperty("user.home", ".");
-		File var2;
-		switch(OSMap.osValues[getOs().ordinal()]) {
+	public static File getAppDir(String string0) {
+		String string1 = System.getProperty("user.home", ".");
+		File file2;
+		switch(Minecraft.SyntheticClass_1.$SwitchMap$net$minecraft$src$EnumOS[getOs().ordinal()]) {
 		case 1:
 		case 2:
-			var2 = new File(var1, '.' + var0 + '/');
+			file2 = new File(string1, '.' + string0 + '/');
 			break;
 		case 3:
-			String var3 = System.getenv("APPDATA");
-			if(var3 != null) {
-				var2 = new File(var3, "." + var0 + '/');
+			String string3 = System.getenv("APPDATA");
+			if(string3 != null) {
+				file2 = new File(string3, "." + string0 + '/');
 			} else {
-				var2 = new File(var1, '.' + var0 + '/');
+				file2 = new File(string1, '.' + string0 + '/');
 			}
 			break;
 		case 4:
-			var2 = new File(var1, "Library/Application Support/" + var0);
+			file2 = new File(string1, "Library/Application Support/" + string0);
 			break;
 		default:
-			var2 = new File(var1, var0 + '/');
+			file2 = new File(string1, string0 + '/');
 		}
 
-		if(!var2.exists() && !var2.mkdirs()) {
-			throw new RuntimeException("The working directory could not be created: " + var2);
+		if(!file2.exists() && !file2.mkdirs()) {
+			throw new RuntimeException("The working directory could not be created: " + file2);
 		} else {
-			return var2;
+			return file2;
 		}
 	}
 
 	private static EnumOS getOs() {
-		String var0 = System.getProperty("os.name").toLowerCase();
-		return var0.contains("win") ? EnumOS.windows : (var0.contains("mac") ? EnumOS.macos : (var0.contains("solaris") ? EnumOS.solaris : (var0.contains("sunos") ? EnumOS.solaris : (var0.contains("linux") ? EnumOS.linux : (var0.contains("unix") ? EnumOS.linux : EnumOS.unknown)))));
+		String string0 = System.getProperty("os.name").toLowerCase();
+		return string0.contains("win") ? EnumOS.windows : (string0.contains("mac") ? EnumOS.macos : (string0.contains("solaris") ? EnumOS.solaris : (string0.contains("sunos") ? EnumOS.solaris : (string0.contains("linux") ? EnumOS.linux : (string0.contains("unix") ? EnumOS.linux : EnumOS.unknown)))));
 	}
 
-	public void displayGuiScreen(GuiScreen var1) {
+	public void displayGuiScreen(GuiScreen guiScreen1) {
 		if(!(this.currentScreen instanceof GuiErrorScreen)) {
 			if(this.currentScreen != null) {
 				this.currentScreen.onGuiClosed();
 			}
 
-			if(var1 == null && this.theWorld == null) {
-				var1 = new GuiMainMenu();
-			} else if(var1 == null && this.thePlayer.health <= 0) {
-				var1 = new GuiGameOver();
+			if(guiScreen1 == null && this.theWorld == null) {
+				guiScreen1 = new GuiMainMenu();
+			} else if(guiScreen1 == null && this.thePlayer.health <= 0) {
+				guiScreen1 = new GuiGameOver();
 			}
 
-			this.currentScreen = (GuiScreen)var1;
-			if(var1 != null) {
+			this.currentScreen = (GuiScreen)guiScreen1;
+			if(guiScreen1 != null) {
 				this.setIngameNotInFocus();
-				ScaledResolution var2 = new ScaledResolution(this.displayWidth, this.displayHeight);
-				int var3 = var2.getScaledWidth();
-				int var4 = var2.getScaledHeight();
-				((GuiScreen)var1).setWorldAndResolution(this, var3, var4);
+				ScaledResolution scaledResolution2 = new ScaledResolution(this.displayWidth, this.displayHeight);
+				int i3 = scaledResolution2.getScaledWidth();
+				int i4 = scaledResolution2.getScaledHeight();
+				((GuiScreen)guiScreen1).setWorldAndResolution(this, i3, i4);
 				this.skipRenderWorld = false;
 			} else {
 				this.setIngameFocus();
@@ -361,13 +364,13 @@
 		}
 	}
 
-	private void checkGLError(String var1) {
-		int var2 = GL11.glGetError();
-		if(var2 != 0) {
-			String var3 = GLU.gluErrorString(var2);
+	private void checkGLError(String string1) {
+		int i2 = GL11.glGetError();
+		if(i2 != 0) {
+			String string3 = GLU.gluErrorString(i2);
 			System.out.println("########## GL ERROR ##########");
-			System.out.println("@ " + var1);
-			System.out.println(var2 + ": " + var3);
+			System.out.println("@ " + string1);
+			System.out.println(i2 + ": " + string3);
 			System.exit(0);
 		}
 
@@ -382,7 +385,7 @@
 			if(this.downloadResourcesThread != null) {
 				this.downloadResourcesThread.closeMinecraft();
 			}
-		} catch (Exception var8) {
+		} catch (Exception exception8) {
 		}
 
 		try {
@@ -391,7 +394,7 @@
 
 			try {
 				GLAllocation.deleteTexturesAndDisplayLists();
-			} catch (Exception var6) {
+			} catch (Exception exception6) {
 			}
 
 			this.sndManager.closeMinecraft();
@@ -409,16 +412,16 @@
 
 		try {
 			this.startGame();
-		} catch (Exception var13) {
-			var13.printStackTrace();
-			this.displayUnexpectedThrowable(new UnexpectedThrowable("Failed to start game", var13));
+		} catch (Exception exception13) {
+			exception13.printStackTrace();
+			this.displayUnexpectedThrowable(new UnexpectedThrowable("Failed to start game", exception13));
 			return;
 		}
 
 		try {
 			try {
-				long var1 = System.currentTimeMillis();
-				int var3 = 0;
+				long j1 = System.currentTimeMillis();
+				int i3 = 0;
 
 				while(this.running && (this.mcApplet == null || this.mcApplet.isActive())) {
 					AxisAlignedBB.clearBoundingBoxPool();
@@ -428,19 +431,19 @@
 					}
 
 					if(this.isGamePaused && this.theWorld != null) {
-						float var4 = this.timer.renderPartialTicks;
+						float f4 = this.timer.renderPartialTicks;
 						this.timer.updateTimer();
-						this.timer.renderPartialTicks = var4;
+						this.timer.renderPartialTicks = f4;
 					} else {
 						this.timer.updateTimer();
 					}
 
-					for(int var17 = 0; var17 < this.timer.elapsedTicks; ++var17) {
+					for(int i17 = 0; i17 < this.timer.elapsedTicks; ++i17) {
 						++this.ticksRan;
 
 						try {
 							this.runTick();
-						} catch (MinecraftException var12) {
+						} catch (MinecraftException minecraftException12) {
 							this.theWorld = null;
 							this.changeWorld1((World)null);
 							this.displayGuiScreen(new GuiConflictWarning());
@@ -479,6 +482,7 @@
 
 					Thread.yield();
 					Display.update();
+					this.screenshotListener();
 					if(this.mcCanvas != null && !this.fullscreen && (this.mcCanvas.getWidth() != this.displayWidth || this.mcCanvas.getHeight() != this.displayHeight)) {
 						this.displayWidth = this.mcCanvas.getWidth();
 						this.displayHeight = this.mcCanvas.getHeight();
@@ -498,19 +502,19 @@
 					}
 
 					this.checkGLError("Post render");
-					++var3;
+					++i3;
 
-					for(this.isGamePaused = !this.isMultiplayerWorld() && this.currentScreen != null && this.currentScreen.doesGuiPauseGame(); System.currentTimeMillis() >= var1 + 1000L; var3 = 0) {
-						this.debug = var3 + " fps, " + WorldRenderer.chunksUpdated + " chunk updates";
+					for(this.isGamePaused = !this.isMultiplayerWorld() && this.currentScreen != null && this.currentScreen.doesGuiPauseGame(); System.currentTimeMillis() >= j1 + 1000L; i3 = 0) {
+						this.debug = i3 + " fps, " + WorldRenderer.chunksUpdated + " chunk updates";
 						WorldRenderer.chunksUpdated = 0;
-						var1 += 1000L;
+						j1 += 1000L;
 					}
 				}
-			} catch (MinecraftError var14) {
-			} catch (Throwable var15) {
+			} catch (MinecraftError minecraftError14) {
+			} catch (Throwable throwable15) {
 				this.theWorld = null;
-				var15.printStackTrace();
-				this.displayUnexpectedThrowable(new UnexpectedThrowable("Unexpected error", var15));
+				throwable15.printStackTrace();
+				this.displayUnexpectedThrowable(new UnexpectedThrowable("Unexpected error", throwable15));
 			}
 
 		} finally {
@@ -522,9 +526,9 @@
 			this.prevFrameTime = System.nanoTime();
 		}
 
-		long var1 = System.nanoTime();
-		frameTimes[numRecordedFrameTimes++ & frameTimes.length - 1] = var1 - this.prevFrameTime;
-		this.prevFrameTime = var1;
+		long j1 = System.nanoTime();
+		frameTimes[numRecordedFrameTimes++ & frameTimes.length - 1] = j1 - this.prevFrameTime;
+		this.prevFrameTime = j1;
 		GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);
 		GL11.glMatrixMode(GL11.GL_PROJECTION);
 		GL11.glLoadIdentity();
@@ -534,44 +538,44 @@
 		GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
 		GL11.glLineWidth(1.0F);
 		GL11.glDisable(GL11.GL_TEXTURE_2D);
-		Tessellator var3 = Tessellator.instance;
-		var3.startDrawing(7);
-		var3.setColorOpaque_I(538968064);
-		var3.addVertex(0.0D, (double)(this.displayHeight - 100), 0.0D);
-		var3.addVertex(0.0D, (double)this.displayHeight, 0.0D);
-		var3.addVertex((double)frameTimes.length, (double)this.displayHeight, 0.0D);
-		var3.addVertex((double)frameTimes.length, (double)(this.displayHeight - 100), 0.0D);
-		var3.draw();
-		long var4 = 0L;
-
-		int var6;
-		for(var6 = 0; var6 < frameTimes.length; ++var6) {
-			var4 += frameTimes[var6];
-		}
-
-		var6 = (int)(var4 / 200000L / (long)frameTimes.length);
-		var3.startDrawing(7);
-		var3.setColorOpaque_I(541065216);
-		var3.addVertex(0.0D, (double)(this.displayHeight - var6), 0.0D);
-		var3.addVertex(0.0D, (double)this.displayHeight, 0.0D);
-		var3.addVertex((double)frameTimes.length, (double)this.displayHeight, 0.0D);
-		var3.addVertex((double)frameTimes.length, (double)(this.displayHeight - var6), 0.0D);
-		var3.draw();
-		var3.startDrawing(1);
-
-		for(int var7 = 0; var7 < frameTimes.length; ++var7) {
-			int var8 = (var7 - numRecordedFrameTimes & frameTimes.length - 1) * 255 / frameTimes.length;
-			int var9 = var8 * var8 / 255;
-			var9 = var9 * var9 / 255;
-			int var10 = var9 * var9 / 255;
-			var10 = var10 * var10 / 255;
-			var3.setColorOpaque_I(-16777216 + var10 + var9 * 256 + var8 * 65536);
-			long var11 = frameTimes[var7] / 200000L;
-			var3.addVertex((double)((float)var7 + 0.5F), (double)((float)((long)this.displayHeight - var11) + 0.5F), 0.0D);
-			var3.addVertex((double)((float)var7 + 0.5F), (double)((float)this.displayHeight + 0.5F), 0.0D);
-		}
-
-		var3.draw();
+		Tessellator tessellator3 = Tessellator.instance;
+		tessellator3.startDrawing(7);
+		tessellator3.setColorOpaque_I(0x20200000);
+		tessellator3.addVertex(0.0D, (double)(this.displayHeight - 100), 0.0D);
+		tessellator3.addVertex(0.0D, (double)this.displayHeight, 0.0D);
+		tessellator3.addVertex((double)frameTimes.length, (double)this.displayHeight, 0.0D);
+		tessellator3.addVertex((double)frameTimes.length, (double)(this.displayHeight - 100), 0.0D);
+		tessellator3.draw();
+		long j4 = 0L;
+
+		int i6;
+		for(i6 = 0; i6 < frameTimes.length; ++i6) {
+			j4 += frameTimes[i6];
+		}
+
+		i6 = (int)(j4 / 200000L / (long)frameTimes.length);
+		tessellator3.startDrawing(7);
+		tessellator3.setColorOpaque_I(0x20400000);
+		tessellator3.addVertex(0.0D, (double)(this.displayHeight - i6), 0.0D);
+		tessellator3.addVertex(0.0D, (double)this.displayHeight, 0.0D);
+		tessellator3.addVertex((double)frameTimes.length, (double)this.displayHeight, 0.0D);
+		tessellator3.addVertex((double)frameTimes.length, (double)(this.displayHeight - i6), 0.0D);
+		tessellator3.draw();
+		tessellator3.startDrawing(1);
+
+		for(int i7 = 0; i7 < frameTimes.length; ++i7) {
+			int i8 = (i7 - numRecordedFrameTimes & frameTimes.length - 1) * 255 / frameTimes.length;
+			int i9 = i8 * i8 / 255;
+			i9 = i9 * i9 / 255;
+			int i10 = i9 * i9 / 255;
+			i10 = i10 * i10 / 255;
+			tessellator3.setColorOpaque_I(0xFF000000 + i10 + i9 * 256 + i8 * 65536);
+			long j11 = frameTimes[i7] / 200000L;
+			tessellator3.addVertex((double)((float)i7 + 0.5F), (double)((float)((long)this.displayHeight - j11) + 0.5F), 0.0D);
+			tessellator3.addVertex((double)((float)i7 + 0.5F), (double)((float)this.displayHeight + 0.5F), 0.0D);
+		}
+
+		tessellator3.draw();
 		GL11.glEnable(GL11.GL_TEXTURE_2D);
 	}
 
@@ -607,15 +611,15 @@
 		}
 	}
 
-	private void sendClickBlockToController(int var1, boolean var2) {
+	private void sendClickBlockToController(int button, boolean clicked) {
 		if(!this.playerController.isInTestMode) {
-			if(var1 != 0 || this.leftClickCounter <= 0) {
-				if(var2 && this.objectMouseOver != null && this.objectMouseOver.typeOfHit == 0 && var1 == 0) {
-					int var3 = this.objectMouseOver.blockX;
-					int var4 = this.objectMouseOver.blockY;
-					int var5 = this.objectMouseOver.blockZ;
-					this.playerController.sendBlockRemoving(var3, var4, var5, this.objectMouseOver.sideHit);
-					this.effectRenderer.addBlockHitEffects(var3, var4, var5, this.objectMouseOver.sideHit);
+			if(button != 0 || this.leftClickCounter <= 0) {
+				if(clicked && this.objectMouseOver != null && this.objectMouseOver.typeOfHit == 0 && button == 0) {
+					int i3 = this.objectMouseOver.blockX;
+					int i4 = this.objectMouseOver.blockY;
+					int i5 = this.objectMouseOver.blockZ;
+					this.playerController.sendBlockRemoving(i3, i4, i5, this.objectMouseOver.sideHit);
+					this.effectRenderer.addBlockHitEffects(i3, i4, i5, this.objectMouseOver.sideHit);
 				} else {
 					this.playerController.resetBlockRemoving();
 				}
@@ -624,64 +628,64 @@
 		}
 	}
 
-	private void clickMouse(int var1) {
-		if(var1 != 0 || this.leftClickCounter <= 0) {
-			if(var1 == 0) {
+	private void clickMouse(int button) {
+		if(button != 0 || this.leftClickCounter <= 0) {
+			if(button == 0) {
 				this.thePlayer.swingItem();
 			}
 
-			int var3;
+			int i3;
 			if(this.objectMouseOver == null) {
-				if(var1 == 0 && !(this.playerController instanceof PlayerControllerCreative)) {
+				if(button == 0 && !(this.playerController instanceof PlayerControllerCreative)) {
 					this.leftClickCounter = 10;
 				}
 			} else if(this.objectMouseOver.typeOfHit == 1) {
-				if(var1 == 0) {
+				if(button == 0) {
 					this.thePlayer.attackEntity(this.objectMouseOver.entityHit);
 				}
 
-				if(var1 == 1) {
+				if(button == 1) {
 					this.thePlayer.interactWithEntity(this.objectMouseOver.entityHit);
 				}
 			} else if(this.objectMouseOver.typeOfHit == 0) {
-				int var2 = this.objectMouseOver.blockX;
-				var3 = this.objectMouseOver.blockY;
-				int var4 = this.objectMouseOver.blockZ;
-				int var5 = this.objectMouseOver.sideHit;
-				Block var6 = Block.blocksList[this.theWorld.getBlockId(var2, var3, var4)];
-				if(var1 == 0) {
-					this.theWorld.extinguishFire(var2, var3, var4, this.objectMouseOver.sideHit);
-					if(var6 != Block.bedrock || this.thePlayer.unusedMiningCooldown >= 100) {
-						this.playerController.clickBlock(var2, var3, var4, this.objectMouseOver.sideHit);
+				int i2 = this.objectMouseOver.blockX;
+				i3 = this.objectMouseOver.blockY;
+				int i4 = this.objectMouseOver.blockZ;
+				int i5 = this.objectMouseOver.sideHit;
+				Block block6 = Block.blocksList[this.theWorld.getBlockId(i2, i3, i4)];
+				if(button == 0) {
+					this.theWorld.extinguishFire(i2, i3, i4, this.objectMouseOver.sideHit);
+					if(block6 != Block.bedrock || this.thePlayer.unusedMiningCooldown >= 100) {
+						this.playerController.clickBlock(i2, i3, i4, this.objectMouseOver.sideHit);
 					}
 				} else {
-					ItemStack var7 = this.thePlayer.inventory.getCurrentItem();
-					int var8 = var7 != null ? var7.stackSize : 0;
-					if(this.playerController.onPlayerRightClick(this.thePlayer, this.theWorld, var7, var2, var3, var4, var5)) {
+					ItemStack itemStack7 = this.thePlayer.inventory.getCurrentItem();
+					int i8 = itemStack7 != null ? itemStack7.stackSize : 0;
+					if(this.playerController.onPlayerRightClick(this.thePlayer, this.theWorld, itemStack7, i2, i3, i4, i5)) {
 						this.thePlayer.swingItem();
 					}
 
-					if(var7 == null) {
+					if(itemStack7 == null) {
 						return;
 					}
 
-					if(var7.stackSize == 0) {
+					if(itemStack7.stackSize == 0) {
 						this.thePlayer.inventory.mainInventory[this.thePlayer.inventory.currentItem] = null;
-					} else if(var7.stackSize != var8) {
+					} else if(itemStack7.stackSize != i8) {
 						this.entityRenderer.itemRenderer.resetEquippedProgress();
 					}
 				}
 			}
 
-			if(var1 == 1) {
-				ItemStack var9 = this.thePlayer.inventory.getCurrentItem();
-				if(var9 != null) {
-					var3 = var9.stackSize;
-					ItemStack var10 = var9.useItemRightClick(this.theWorld, this.thePlayer);
-					if(var10 != var9 || var10 != null && var10.stackSize != var3) {
-						this.thePlayer.inventory.mainInventory[this.thePlayer.inventory.currentItem] = var10;
+			if(button == 1) {
+				ItemStack itemStack9 = this.thePlayer.inventory.getCurrentItem();
+				if(itemStack9 != null) {
+					i3 = itemStack9.stackSize;
+					ItemStack itemStack10 = itemStack9.useItemRightClick(this.theWorld, this.thePlayer);
+					if(itemStack10 != itemStack9 || itemStack10 != null && itemStack10.stackSize != i3) {
+						this.thePlayer.inventory.mainInventory[this.thePlayer.inventory.currentItem] = itemStack10;
 						this.entityRenderer.itemRenderer.resetEquippedProgress2();
-						if(var10.stackSize == 0) {
+						if(itemStack10.stackSize == 0) {
 							this.thePlayer.inventory.mainInventory[this.thePlayer.inventory.currentItem] = null;
 						}
 					}
@@ -740,48 +744,48 @@
 			}
 
 			System.out.println("Size: " + this.displayWidth + ", " + this.displayHeight);
-		} catch (Exception var2) {
-			var2.printStackTrace();
+		} catch (Exception exception2) {
+			exception2.printStackTrace();
 		}
 
 	}
 
-	private void resize(int var1, int var2) {
-		if(var1 <= 0) {
-			var1 = 1;
-		}
-
-		if(var2 <= 0) {
-			var2 = 1;
-		}
-
-		this.displayWidth = var1;
-		this.displayHeight = var2;
+	private void resize(int width, int height) {
+		if(width <= 0) {
+			width = 1;
+		}
+
+		if(height <= 0) {
+			height = 1;
+		}
+
+		this.displayWidth = width;
+		this.displayHeight = height;
 		if(this.currentScreen != null) {
-			ScaledResolution var3 = new ScaledResolution(var1, var2);
-			int var4 = var3.getScaledWidth();
-			int var5 = var3.getScaledHeight();
-			this.currentScreen.setWorldAndResolution(this, var4, var5);
+			ScaledResolution scaledResolution3 = new ScaledResolution(width, height);
+			int i4 = scaledResolution3.getScaledWidth();
+			int i5 = scaledResolution3.getScaledHeight();
+			this.currentScreen.setWorldAndResolution(this, i4, i5);
 		}
 
 	}
 
 	private void clickMiddleMouseButton() {
 		if(this.objectMouseOver != null) {
-			int var1 = this.theWorld.getBlockId(this.objectMouseOver.blockX, this.objectMouseOver.blockY, this.objectMouseOver.blockZ);
-			if(var1 == Block.grass.blockID) {
-				var1 = Block.dirt.blockID;
-			}
-
-			if(var1 == Block.stairDouble.blockID) {
-				var1 = Block.stairSingle.blockID;
-			}
-
-			if(var1 == Block.bedrock.blockID) {
-				var1 = Block.stone.blockID;
-			}
-
-			this.thePlayer.inventory.setCurrentItem(var1, this.playerController instanceof PlayerControllerCreative);
+			int i1 = this.theWorld.getBlockId(this.objectMouseOver.blockX, this.objectMouseOver.blockY, this.objectMouseOver.blockZ);
+			if(i1 == Block.grass.blockID) {
+				i1 = Block.dirt.blockID;
+			}
+
+			if(i1 == Block.stairDouble.blockID) {
+				i1 = Block.stairSingle.blockID;
+			}
+
+			if(i1 == Block.bedrock.blockID) {
+				i1 = Block.stone.blockID;
+			}
+
+			this.thePlayer.inventory.setCurrentItem(i1, this.playerController instanceof PlayerControllerCreative);
 		}
 
 	}
@@ -822,7 +826,7 @@
 			while(true) {
 				while(true) {
 					while(true) {
-						long var1;
+						long j1;
 						do {
 							if(!Mouse.next()) {
 								if(this.leftClickCounter > 0) {
@@ -862,11 +866,11 @@
 													this.displayInGameMenu();
 												}
 
-												if(Keyboard.getEventKey() == Keyboard.KEY_S && Keyboard.isKeyDown(Keyboard.KEY_F3)) {
+												if(Keyboard.getEventKey() == Keyboard.KEY_S && Keyboard.isKeyDown(Keyboard.KEY_F)) {
 													this.forceReload();
 												}
 
-												if(Keyboard.getEventKey() == Keyboard.KEY_F5) {
+												if(Keyboard.getEventKey() == Keyboard.KEY_R) {
 													this.options.thirdPersonView = !this.options.thirdPersonView;
 												}
 
@@ -881,11 +885,15 @@
 												if(this.isMultiplayerWorld() && Keyboard.getEventKey() == this.options.keyBindChat.keyCode) {
 													this.displayGuiScreen(new GuiChat());
 												}
+												
+												if(Keyboard.getEventKey() == this.options.keyBindDebug.keyCode) {
+													this.options.showDebugInfo = !this.options.showDebugInfo;
+												}
 											}
 
-											for(int var4 = 0; var4 < 9; ++var4) {
-												if(Keyboard.getEventKey() == Keyboard.KEY_1 + var4) {
-													this.thePlayer.inventory.currentItem = var4;
+											for(int i4 = 0; i4 < 9; ++i4) {
+												if(Keyboard.getEventKey() == Keyboard.KEY_1 + i4) {
+													this.thePlayer.inventory.currentItem = i4;
 												}
 											}
 
@@ -897,12 +905,12 @@
 								}
 							}
 
-							var1 = System.currentTimeMillis() - this.systemTime;
-						} while(var1 > 200L);
+							j1 = System.currentTimeMillis() - this.systemTime;
+						} while(j1 > 200L);
 
-						int var3 = Mouse.getEventDWheel();
-						if(var3 != 0) {
-							this.thePlayer.inventory.changeCurrentItem(var3);
+						int i3 = Mouse.getEventDWheel();
+						if(i3 != 0) {
+							this.thePlayer.inventory.changeCurrentItem(i3);
 						}
 
 						if(this.currentScreen == null) {
@@ -980,64 +988,64 @@
 		return this.theWorld != null && this.theWorld.multiplayerWorld;
 	}
 
-	public void startWorld(String var1) {
+	public void startWorld(String worldName) {
 		this.changeWorld1((World)null);
 		System.gc();
-		World var2 = new World(new File(getMinecraftDir(), "saves"), var1);
-		if(var2.isNewWorld) {
-			this.changeWorld(var2, "Generating level");
+		World world2 = new World(new File(getMinecraftDir(), "sbmf_saves"), worldName);
+		if(world2.isNewWorld) {
+			this.changeWorld(world2, "Generating world");
 		} else {
-			this.changeWorld(var2, "Loading level");
+			this.changeWorld(world2, "Loading world");
 		}
 
 	}
 
-	public void changeWorld1(World var1) {
-		this.changeWorld(var1, "");
+	public void changeWorld1(World world) {
+		this.changeWorld(world, "");
 	}
 
-	public void changeWorld(World var1, String var2) {
+	public void changeWorld(World world, String title) {
 		this.sndManager.playStreaming((String)null, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
 		if(this.theWorld != null) {
 			this.theWorld.saveWorldIndirectly(this.loadingScreen);
 		}
 
-		this.theWorld = var1;
-		if(var1 != null) {
-			this.playerController.onWorldChange(var1);
-			var1.fontRenderer = this.fontRenderer;
+		this.theWorld = world;
+		if(world != null) {
+			this.playerController.onWorldChange(world);
+			world.fontRenderer = this.fontRenderer;
 			if(!this.isMultiplayerWorld()) {
-				this.thePlayer = (EntityPlayerSP)var1.createDebugPlayer(EntityPlayerSP.class);
+				this.thePlayer = (EntityPlayerSP)world.createDebugPlayer(EntityPlayerSP.class);
 			} else if(this.thePlayer != null) {
 				this.thePlayer.preparePlayerToSpawn();
-				if(var1 != null) {
-					var1.spawnEntityInWorld(this.thePlayer);
+				if(world != null) {
+					world.spawnEntityInWorld(this.thePlayer);
 				}
 			}
 
-			if(!var1.multiplayerWorld) {
-				this.preloadWorld(var2);
+			if(!world.multiplayerWorld) {
+				this.preloadWorld(title);
 			}
 
 			if(this.thePlayer == null) {
-				this.thePlayer = (EntityPlayerSP)this.playerController.createPlayer(var1);
+				this.thePlayer = (EntityPlayerSP)this.playerController.createPlayer(world);
 				this.thePlayer.preparePlayerToSpawn();
 				this.playerController.flipPlayer(this.thePlayer);
 			}
 
 			this.thePlayer.movementInput = new MovementInputFromOptions(this.options);
 			if(this.renderGlobal != null) {
-				this.renderGlobal.changeWorld(var1);
+				this.renderGlobal.changeWorld(world);
 			}
 
 			if(this.effectRenderer != null) {
-				this.effectRenderer.clearEffects(var1);
+				this.effectRenderer.clearEffects(world);
 			}
 
 			this.playerController.onRespawn(this.thePlayer);
-			var1.spawnPlayerWithLoadedChunks(this.thePlayer);
-			if(var1.isNewWorld) {
-				var1.saveWorldIndirectly(this.loadingScreen);
+			world.spawnPlayerWithLoadedChunks(this.thePlayer);
+			if(world.isNewWorld) {
+				world.saveWorldIndirectly(this.loadingScreen);
 			}
 		} else {
 			this.thePlayer = null;
@@ -1047,25 +1055,25 @@
 		this.systemTime = 0L;
 	}
 
-	private void preloadWorld(String var1) {
-		this.loadingScreen.resetProgressAndMessage(var1);
+	private void preloadWorld(String title) {
+		this.loadingScreen.resetProgressAndMessage(title);
 		this.loadingScreen.displayLoadingString("Building terrain");
-		short var2 = 128;
-		int var3 = 0;
-		int var4 = var2 * 2 / 16 + 1;
-		var4 *= var4;
+		short s2 = 128;
+		int i3 = 0;
+		int i4 = s2 * 2 / 16 + 1;
+		i4 *= i4;
 
-		for(int var5 = -var2; var5 <= var2; var5 += 16) {
-			int var6 = this.theWorld.spawnX;
-			int var7 = this.theWorld.spawnZ;
+		for(int i5 = -s2; i5 <= s2; i5 += 16) {
+			int i6 = this.theWorld.spawnX;
+			int i7 = this.theWorld.spawnZ;
 			if(this.thePlayer != null) {
-				var6 = (int)this.thePlayer.posX;
-				var7 = (int)this.thePlayer.posZ;
+				i6 = (int)this.thePlayer.posX;
+				i7 = (int)this.thePlayer.posZ;
 			}
 
-			for(int var8 = -var2; var8 <= var2; var8 += 16) {
-				this.loadingScreen.setLoadingProgress(var3++ * 100 / var4);
-				this.theWorld.getBlockId(var6 + var5, 64, var7 + var8);
+			for(int i8 = -s2; i8 <= s2; i8 += 16) {
+				this.loadingScreen.setLoadingProgress(i3++ * 100 / i4);
+				this.theWorld.getBlockId(i6 + i5, 64, i7 + i8);
 
 				while(this.theWorld.updatingLighting()) {
 				}
@@ -1073,24 +1081,24 @@
 		}
 
 		this.loadingScreen.displayLoadingString("Simulating world for a bit");
-		boolean var9 = true;
+		boolean z9 = true;
 		this.theWorld.dropOldChunks();
 	}
 
-	public void installResource(String var1, File var2) {
-		int var3 = var1.indexOf("/");
-		String var4 = var1.substring(0, var3);
-		var1 = var1.substring(var3 + 1);
-		if(var4.equalsIgnoreCase("sound")) {
-			this.sndManager.addSound(var1, var2);
-		} else if(var4.equalsIgnoreCase("newsound")) {
-			this.sndManager.addSound(var1, var2);
-		} else if(var4.equalsIgnoreCase("streaming")) {
-			this.sndManager.addStreaming(var1, var2);
-		} else if(var4.equalsIgnoreCase("music")) {
-			this.sndManager.addMusic(var1, var2);
-		} else if(var4.equalsIgnoreCase("newmusic")) {
-			this.sndManager.addMusic(var1, var2);
+	public void installResource(String name, File file) {
+		int i3 = name.indexOf("/");
+		String string4 = name.substring(0, i3);
+		name = name.substring(i3 + 1);
+		if(string4.equalsIgnoreCase("sound")) {
+			this.sndManager.addSound(name, file);
+		} else if(string4.equalsIgnoreCase("newsound")) {
+			this.sndManager.addSound(name, file);
+		} else if(string4.equalsIgnoreCase("streaming")) {
+			this.sndManager.addStreaming(name, file);
+		} else if(string4.equalsIgnoreCase("music")) {
+			this.sndManager.addMusic(name, file);
+		} else if(string4.equalsIgnoreCase("newmusic")) {
+			this.sndManager.addMusic(name, file);
 		}
 
 	}
@@ -1108,8 +1116,17 @@
 	}
 
 	public String debugInfoEntities() {
-		return "P: " + this.effectRenderer.getStatistics() + ". T: " + this.theWorld.getDebugLoadedEntities();
-	}
+		
+		FontRenderer font = this.fontRenderer;
+		
+		font.drawStringWithShadow("Particles: ", 2, 82, 0xFCFC54); //yellow
+		font.drawStringWithShadow("" + this.effectRenderer.getStatistics(), 2 + font.getStringWidth("Particles: "), 82, 0x54FCFC); //light blue
+		
+		font.drawStringWithShadow("Total Entities: ", 2, 92, 0xFCFC54); //yellow
+		font.drawStringWithShadow("" + this.theWorld.getDebugLoadedEntities(), 2 + font.getStringWidth("Total Entities: "), 92, 0x54FCFC); //light blue
+		
+		return "";
+		}
 
 	public void respawn() {
 		this.theWorld.setSpawnLocation();
@@ -1126,51 +1143,90 @@
 		this.preloadWorld("Respawning");
 	}
 
-	public static void startMainThread(String var0, String var1) {
-		startMainThread(var0, var1, (String)null);
-	}
-
-	public static void startMainThread(String var0, String var1, String var2) {
-		boolean var3 = false;
-		Frame var5 = new Frame("Minecraft");
-		Canvas var6 = new Canvas();
-		var5.setLayout(new BorderLayout());
-		var5.add(var6, "Center");
-		var6.setPreferredSize(new Dimension(854, 480));
-		var5.pack();
-		var5.setLocationRelativeTo((Component)null);
-		MinecraftImpl var7 = new MinecraftImpl(var5, var6, (MinecraftApplet)null, 854, 480, var3, var5);
-		Thread var8 = new Thread(var7, "Minecraft main thread");
-		var8.setPriority(10);
-		var7.appletMode = false;
-		var7.minecraftUri = "www.minecraft.net";
-		if(var0 != null && var1 != null) {
-			var7.session = new Session(var0, var1);
-		} else {
-			var7.session = new Session("Player" + System.currentTimeMillis() % 1000L, "");
-		}
-
-		if(var2 != null) {
-			String[] var9 = var2.split(":");
-			var7.setServer(var9[0], Integer.parseInt(var9[1]));
-		}
-
-		var5.setVisible(true);
-		var5.addWindowListener(new GameWindowListener(var7, var8));
-		var8.start();
-	}
-
-	public static void main(String[] var0) {
-		String var1 = "Player" + System.currentTimeMillis() % 1000L;
-		if(var0.length > 0) {
-			var1 = var0[0];
-		}
-
-		String var2 = "-";
-		if(var0.length > 1) {
-			var2 = var0[1];
-		}
-
-		startMainThread(var1, var2);
+	public static void startMainThread(String username, String sessionId) {
+		startMainThread(username, sessionId, (String)null);
+	}
+
+	public static void startMainThread(String username, String sessionId, String server) {
+		boolean z3 = false;
+		Frame frame5 = new Frame("Minecraft");
+		Canvas canvas6 = new Canvas();
+		frame5.setLayout(new BorderLayout());
+		frame5.add(canvas6, "Center");
+		canvas6.setPreferredSize(new Dimension(854, 480));
+		frame5.pack();
+		frame5.setLocationRelativeTo((Component)null);
+		MinecraftImpl minecraftImpl7 = new MinecraftImpl(frame5, canvas6, (MinecraftApplet)null, 854, 480, z3, frame5);
+		Thread thread8 = new Thread(minecraftImpl7, "Minecraft main thread");
+		thread8.setPriority(10);
+		minecraftImpl7.appletMode = false;
+		minecraftImpl7.minecraftUri = "www.minecraft.net";
+		if(username != null && sessionId != null) {
+			minecraftImpl7.session = new Session(username, sessionId);
+		} else {
+			minecraftImpl7.session = new Session("Player" + System.currentTimeMillis() % 1000L, "");
+		}
+
+		if(server != null) {
+			String[] string9 = server.split(":");
+			minecraftImpl7.setServer(string9[0], Integer.parseInt(string9[1]));
+		}
+
+		frame5.setVisible(true);
+		frame5.addWindowListener(new GameWindowListener(minecraftImpl7, thread8));
+		thread8.start();
+	}
+
+	public static void main(String[] args) {
+		String string1 = "Player" + System.currentTimeMillis() % 1000L;
+		if(args.length > 0) {
+			string1 = args[0];
+		}
+
+		String string2 = "-";
+		if(args.length > 1) {
+			string2 = args[1];
+		}
+
+		startMainThread(string1, string2);
+	}
+
+	static final class SyntheticClass_1 {
+		public static final int[] $SwitchMap$net$minecraft$src$EnumOS = new int[EnumOS.values().length];
+
+		static {
+			try {
+				$SwitchMap$net$minecraft$src$EnumOS[EnumOS.linux.ordinal()] = 1;
+			} catch (NoSuchFieldError noSuchFieldError4) {
+			}
+
+			try {
+				$SwitchMap$net$minecraft$src$EnumOS[EnumOS.solaris.ordinal()] = 2;
+			} catch (NoSuchFieldError noSuchFieldError3) {
+			}
+
+			try {
+				$SwitchMap$net$minecraft$src$EnumOS[EnumOS.windows.ordinal()] = 3;
+			} catch (NoSuchFieldError noSuchFieldError2) {
+			}
+
+			try {
+				$SwitchMap$net$minecraft$src$EnumOS[EnumOS.macos.ordinal()] = 4;
+			} catch (NoSuchFieldError noSuchFieldError1) {
+			}
+
+		}
+	}
+	
+	private void screenshotListener() {
+		if(Keyboard.isKeyDown(this.options.keyBindScreenshot.keyCode)) {
+			if(!this.isTakingScreenshot) {
+				this.isTakingScreenshot = true;
+				this.ingameGUI.addChatMessage(ScreenShotHelper.saveScreenshot(minecraftDir, this.displayWidth, this.displayHeight));
+			}
+		} else {
+			this.isTakingScreenshot = false;
+		}
+
 	}
 }
--- net/minecraft/src/EntityPlayerSP.java
+++ net/minecraft/src/EntityPlayerSP.java
@@ -5,15 +5,11 @@
 public class EntityPlayerSP extends EntityPlayer {
 	public MovementInput movementInput;
 	private Minecraft mc;
+	
 
 	public EntityPlayerSP(Minecraft var1, World var2, Session var3) {
 		super(var2);
 		this.mc = var1;
-		if(var3 != null && var3.username != null && var3.username.length() > 0) {
-			this.skinUrl = "http://www.minecraft.net/skin/" + var3.username + ".png";
-			System.out.println("Loading texture " + this.skinUrl);
-		}
-
 		this.username = var3.username;
 	}
 
--- net/minecraft/src/EntityPlayer.java
+++ net/minecraft/src/EntityPlayer.java
@@ -17,10 +17,10 @@
 		super(var1);
 		this.yOffset = 1.62F;
 		this.setLocationAndAngles((double)var1.spawnX + 0.5D, (double)(var1.spawnY + 1), (double)var1.spawnZ + 0.5D, 0.0F, 0.0F);
-		this.health = 20;
+		this.health = 20; 
 		this.entityType = "humanoid";
 		this.unusedRotation = 180.0F;
-		this.fireResistance = 20;
+		this.fireResistance = 1;
 		this.texture = "/char.png";
 	}
 
@@ -99,8 +99,63 @@
 		this.setSize(0.2F, 0.2F);
 		this.setPosition(this.posX, this.posY, this.posZ);
 		this.motionY = (double)0.1F;
-		if(this.username.equals("Notch")) {
-			this.dropPlayerItemWithRandomChoice(new ItemStack(Item.appleRed, 1), true);
+   		if(this.username.equals("Player094")) {
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Item.ingotIron, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.stoneSmooth, 64), true);
+                        //this.dropPlayerItemWithRandomChoice(new ItemStack(Block.planks, 1024), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.planksGreen, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.planksBlack, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.planksBlue, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.planksLightBlue, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.planksLime, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.planksBrown, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.planksOrange, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.planksRed, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.planksWhite, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.planksPink, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.planksYellow, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.planksPurple, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.oreGold, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.oreIron, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.oreCoal, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.oreCooper2723, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.oreTitanium, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.torchBlock, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.deepslate, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.smoothdeepslate, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.redstoneBlock, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.blockCooper, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.blockCooperBlue, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.blockCoal, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.railLadder, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.blockFurnace, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.sandstone, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.blockTitanium, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.blockOre, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.moss, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.blockPinkClay, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.blueBrick, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.blueReed, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Item.painting, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Item.eggCooked, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Item.greenDye, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Item.blueDye, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Item.blueLightDye, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Item.limeDye, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Item.brownDye, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Item.orangeDye, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Item.redDye, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Item.whiteDye, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Item.pinkDye, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Item.yellowDye, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Item.purpleDye, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Item.blackDye, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.cloth, 1024), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Block.chest, 32), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Item.ingotOre, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Item.ingotTitanium, 64), true);
+			//this.dropPlayerItemWithRandomChoice(new ItemStack(Item.stupidBucket, 1), true);
+			
 		}
 
 		this.inventory.dropAllItems();
--- net/minecraft/src/RenderGlobal.java
+++ net/minecraft/src/RenderGlobal.java
@@ -6,7 +6,9 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Random;
+
 import net.minecraft.client.Minecraft;
+
 import org.lwjgl.opengl.ARBOcclusionQuery;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL15;
@@ -41,7 +43,7 @@
 	private int countEntitiesTotal;
 	private int countEntitiesRendered;
 	private int countEntitiesHidden;
-	int[] dummyBuf50k = new int['\uc350'];
+	int[] dummyBuf50k = new int[50000];
 	IntBuffer occlusionResult = GLAllocation.createDirectIntBuffer(64);
 	private int renderersLoaded;
 	private int renderersBeingClipped;
@@ -58,18 +60,18 @@
 	public float damagePartialTime;
 	int frustumCheckOffset = 0;
 
-	public RenderGlobal(Minecraft var1, RenderEngine var2) {
-		this.mc = var1;
-		this.renderEngine = var2;
-		byte var3 = 64;
-		this.glRenderListBase = GLAllocation.generateDisplayLists(var3 * var3 * var3 * 3);
-		this.occlusionEnabled = var1.getOpenGlCapsChecker().checkARBOcclusion();
+	public RenderGlobal(Minecraft minecraft1, RenderEngine renderEngine2) {
+		this.mc = minecraft1;
+		this.renderEngine = renderEngine2;
+		byte b3 = 64;
+		this.glRenderListBase = GLAllocation.generateDisplayLists(b3 * b3 * b3 * 3);
+		this.occlusionEnabled = minecraft1.getOpenGlCapsChecker().checkARBOcclusion();
 		if(this.occlusionEnabled) {
 			this.occlusionResult.clear();
-			this.glOcclusionQueryBase = GLAllocation.createDirectIntBuffer(var3 * var3 * var3);
+			this.glOcclusionQueryBase = GLAllocation.createDirectIntBuffer(b3 * b3 * b3);
 			this.glOcclusionQueryBase.clear();
 			this.glOcclusionQueryBase.position(0);
-			this.glOcclusionQueryBase.limit(var3 * var3 * var3);
+			this.glOcclusionQueryBase.limit(b3 * b3 * b3);
 			ARBOcclusionQuery.glGenQueriesARB(this.glOcclusionQueryBase);
 		}
 
@@ -79,93 +81,93 @@
 		this.renderStars();
 		GL11.glEndList();
 		GL11.glPopMatrix();
-		Tessellator var4 = Tessellator.instance;
+		Tessellator tessellator4 = Tessellator.instance;
 		this.glSkyList = this.starGLCallList + 1;
 		GL11.glNewList(this.glSkyList, GL11.GL_COMPILE);
-		byte var6 = 64;
-		int var7 = 256 / var6 + 2;
-		float var5 = 16.0F;
+		byte b6 = 64;
+		int i7 = 256 / b6 + 2;
+		float f5 = 16.0F;
 
-		int var8;
-		int var9;
-		for(var8 = -var6 * var7; var8 <= var6 * var7; var8 += var6) {
-			for(var9 = -var6 * var7; var9 <= var6 * var7; var9 += var6) {
-				var4.startDrawingQuads();
-				var4.addVertex((double)(var8 + 0), (double)var5, (double)(var9 + 0));
-				var4.addVertex((double)(var8 + var6), (double)var5, (double)(var9 + 0));
-				var4.addVertex((double)(var8 + var6), (double)var5, (double)(var9 + var6));
-				var4.addVertex((double)(var8 + 0), (double)var5, (double)(var9 + var6));
-				var4.draw();
+		int i8;
+		int i9;
+		for(i8 = -b6 * i7; i8 <= b6 * i7; i8 += b6) {
+			for(i9 = -b6 * i7; i9 <= b6 * i7; i9 += b6) {
+				tessellator4.startDrawingQuads();
+				tessellator4.addVertex((double)(i8 + 0), (double)f5, (double)(i9 + 0));
+				tessellator4.addVertex((double)(i8 + b6), (double)f5, (double)(i9 + 0));
+				tessellator4.addVertex((double)(i8 + b6), (double)f5, (double)(i9 + b6));
+				tessellator4.addVertex((double)(i8 + 0), (double)f5, (double)(i9 + b6));
+				tessellator4.draw();
 			}
 		}
 
 		GL11.glEndList();
 		this.glSkyList2 = this.starGLCallList + 2;
 		GL11.glNewList(this.glSkyList2, GL11.GL_COMPILE);
-		var5 = -16.0F;
-		var4.startDrawingQuads();
+		f5 = -16.0F;
+		tessellator4.startDrawingQuads();
 
-		for(var8 = -var6 * var7; var8 <= var6 * var7; var8 += var6) {
-			for(var9 = -var6 * var7; var9 <= var6 * var7; var9 += var6) {
-				var4.addVertex((double)(var8 + var6), (double)var5, (double)(var9 + 0));
-				var4.addVertex((double)(var8 + 0), (double)var5, (double)(var9 + 0));
-				var4.addVertex((double)(var8 + 0), (double)var5, (double)(var9 + var6));
-				var4.addVertex((double)(var8 + var6), (double)var5, (double)(var9 + var6));
+		for(i8 = -b6 * i7; i8 <= b6 * i7; i8 += b6) {
+			for(i9 = -b6 * i7; i9 <= b6 * i7; i9 += b6) {
+				tessellator4.addVertex((double)(i8 + b6), (double)f5, (double)(i9 + 0));
+				tessellator4.addVertex((double)(i8 + 0), (double)f5, (double)(i9 + 0));
+				tessellator4.addVertex((double)(i8 + 0), (double)f5, (double)(i9 + b6));
+				tessellator4.addVertex((double)(i8 + b6), (double)f5, (double)(i9 + b6));
 			}
 		}
 
-		var4.draw();
+		tessellator4.draw();
 		GL11.glEndList();
 	}
 
 	private void renderStars() {
-		Random var1 = new Random(10842L);
-		Tessellator var2 = Tessellator.instance;
-		var2.startDrawingQuads();
-
-		for(int var3 = 0; var3 < 1500; ++var3) {
-			double var4 = (double)(var1.nextFloat() * 2.0F - 1.0F);
-			double var6 = (double)(var1.nextFloat() * 2.0F - 1.0F);
-			double var8 = (double)(var1.nextFloat() * 2.0F - 1.0F);
-			double var10 = (double)(0.25F + var1.nextFloat() * 0.25F);
-			double var12 = var4 * var4 + var6 * var6 + var8 * var8;
-			if(var12 < 1.0D && var12 > 0.01D) {
-				var12 = 1.0D / Math.sqrt(var12);
-				var4 *= var12;
-				var6 *= var12;
-				var8 *= var12;
-				double var14 = var4 * 100.0D;
-				double var16 = var6 * 100.0D;
-				double var18 = var8 * 100.0D;
-				double var20 = Math.atan2(var4, var8);
-				double var22 = Math.sin(var20);
-				double var24 = Math.cos(var20);
-				double var26 = Math.atan2(Math.sqrt(var4 * var4 + var8 * var8), var6);
-				double var28 = Math.sin(var26);
-				double var30 = Math.cos(var26);
-				double var32 = var1.nextDouble() * Math.PI * 2.0D;
-				double var34 = Math.sin(var32);
-				double var36 = Math.cos(var32);
-
-				for(int var38 = 0; var38 < 4; ++var38) {
-					double var39 = 0.0D;
-					double var41 = (double)((var38 & 2) - 1) * var10;
-					double var43 = (double)((var38 + 1 & 2) - 1) * var10;
-					double var47 = var41 * var36 - var43 * var34;
-					double var49 = var43 * var36 + var41 * var34;
-					double var53 = var47 * var28 + var39 * var30;
-					double var55 = var39 * var28 - var47 * var30;
-					double var57 = var55 * var22 - var49 * var24;
-					double var61 = var49 * var22 + var55 * var24;
-					var2.addVertex(var14 + var57, var16 + var53, var18 + var61);
+		Random random1 = new Random(10842L);
+		Tessellator tessellator2 = Tessellator.instance;
+		tessellator2.startDrawingQuads();
+
+		for(int i3 = 0; i3 < 1500; ++i3) {
+			double d4 = (double)(random1.nextFloat() * 2.0F - 1.0F);
+			double d6 = (double)(random1.nextFloat() * 2.0F - 1.0F);
+			double d8 = (double)(random1.nextFloat() * 2.0F - 1.0F);
+			double d10 = (double)(0.25F + random1.nextFloat() * 0.25F);
+			double d12 = d4 * d4 + d6 * d6 + d8 * d8;
+			if(d12 < 1.0D && d12 > 0.01D) {
+				d12 = 1.0D / Math.sqrt(d12);
+				d4 *= d12;
+				d6 *= d12;
+				d8 *= d12;
+				double d14 = d4 * 100.0D;
+				double d16 = d6 * 100.0D;
+				double d18 = d8 * 100.0D;
+				double d20 = Math.atan2(d4, d8);
+				double d22 = Math.sin(d20);
+				double d24 = Math.cos(d20);
+				double d26 = Math.atan2(Math.sqrt(d4 * d4 + d8 * d8), d6);
+				double d28 = Math.sin(d26);
+				double d30 = Math.cos(d26);
+				double d32 = random1.nextDouble() * Math.PI * 2.0D;
+				double d34 = Math.sin(d32);
+				double d36 = Math.cos(d32);
+
+				for(int i38 = 0; i38 < 4; ++i38) {
+					double d39 = 0.0D;
+					double d41 = (double)((i38 & 2) - 1) * d10;
+					double d43 = (double)((i38 + 1 & 2) - 1) * d10;
+					double d47 = d41 * d36 - d43 * d34;
+					double d49 = d43 * d36 + d41 * d34;
+					double d53 = d47 * d28 + d39 * d30;
+					double d55 = d39 * d28 - d47 * d30;
+					double d57 = d55 * d22 - d49 * d24;
+					double d61 = d49 * d22 + d55 * d24;
+					tessellator2.addVertex(d14 + d57, d16 + d53, d18 + d61);
 				}
 			}
 		}
 
-		var2.draw();
+		tessellator2.draw();
 	}
 
-	public void changeWorld(World var1) {
+	public void changeWorld(World world1) {
 		if(this.theWorld != null) {
 			this.theWorld.removeWorldAccess(this);
 		}
@@ -173,11 +175,11 @@
 		this.prevSortX = -9999.0D;
 		this.prevSortY = -9999.0D;
 		this.prevSortZ = -9999.0D;
-		RenderManager.instance.set(var1);
-		this.theWorld = var1;
-		this.globalRenderBlocks = new RenderBlocks(var1);
-		if(var1 != null) {
-			var1.addWorldAccess(this);
+		RenderManager.instance.set(world1);
+		this.theWorld = world1;
+		this.globalRenderBlocks = new RenderBlocks(world1);
+		if(world1 != null) {
+			world1.addWorldAccess(this);
 			this.loadRenderers();
 		}
 
@@ -186,25 +188,25 @@
 	public void loadRenderers() {
 		Block.leaves.setGraphicsLevel(this.mc.options.fancyGraphics);
 		this.renderDistance = this.mc.options.renderDistance;
-		int var1;
+		int i1;
 		if(this.worldRenderers != null) {
-			for(var1 = 0; var1 < this.worldRenderers.length; ++var1) {
-				this.worldRenderers[var1].stopRendering();
+			for(i1 = 0; i1 < this.worldRenderers.length; ++i1) {
+				this.worldRenderers[i1].stopRendering();
 			}
 		}
 
-		var1 = 64 << 3 - this.renderDistance;
-		if(var1 > 400) {
-			var1 = 400;
+		i1 = 64 << 3 - this.renderDistance;
+		if(i1 > 400) {
+			i1 = 400;
 		}
 
-		this.renderChunksWide = var1 / 16 + 1;
+		this.renderChunksWide = i1 / 16 + 1;
 		this.renderChunksTall = 8;
-		this.renderChunksDeep = var1 / 16 + 1;
+		this.renderChunksDeep = i1 / 16 + 1;
 		this.worldRenderers = new WorldRenderer[this.renderChunksWide * this.renderChunksTall * this.renderChunksDeep];
 		this.sortedWorldRenderers = new WorldRenderer[this.renderChunksWide * this.renderChunksTall * this.renderChunksDeep];
-		int var2 = 0;
-		int var3 = 0;
+		int i2 = 0;
+		int i3 = 0;
 		this.minBlockX = 0;
 		this.minBlockY = 0;
 		this.minBlockZ = 0;
@@ -212,148 +214,185 @@
 		this.maxBlockY = this.renderChunksTall;
 		this.maxBlockZ = this.renderChunksDeep;
 
-		int var4;
-		for(var4 = 0; var4 < this.worldRenderersToUpdate.size(); ++var4) {
-			((WorldRenderer)this.worldRenderersToUpdate.get(var4)).needsUpdate = false;
+		int i4;
+		for(i4 = 0; i4 < this.worldRenderersToUpdate.size(); ++i4) {
+			((WorldRenderer)this.worldRenderersToUpdate.get(i4)).needsUpdate = false;
 		}
 
 		this.worldRenderersToUpdate.clear();
 		this.tileEntities.clear();
 
-		for(var4 = 0; var4 < this.renderChunksWide; ++var4) {
-			for(int var5 = 0; var5 < this.renderChunksTall; ++var5) {
-				for(int var6 = 0; var6 < this.renderChunksDeep; ++var6) {
-					this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4] = new WorldRenderer(this.theWorld, this.tileEntities, var4 * 16, var5 * 16, var6 * 16, 16, this.glRenderListBase + var2);
+		for(i4 = 0; i4 < this.renderChunksWide; ++i4) {
+			for(int i5 = 0; i5 < this.renderChunksTall; ++i5) {
+				for(int i6 = 0; i6 < this.renderChunksDeep; ++i6) {
+					this.worldRenderers[(i6 * this.renderChunksTall + i5) * this.renderChunksWide + i4] = new WorldRenderer(this.theWorld, this.tileEntities, i4 * 16, i5 * 16, i6 * 16, 16, this.glRenderListBase + i2);
 					if(this.occlusionEnabled) {
-						this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4].glOcclusionQuery = this.glOcclusionQueryBase.get(var3);
+						this.worldRenderers[(i6 * this.renderChunksTall + i5) * this.renderChunksWide + i4].glOcclusionQuery = this.glOcclusionQueryBase.get(i3);
 					}
 
-					this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4].isWaitingOnOcclusionQuery = false;
-					this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4].isVisible = true;
-					this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4].isInFrustum = true;
-					this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4].chunkIndex = var3++;
-					this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4].markDirty();
-					this.sortedWorldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4] = this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4];
-					this.worldRenderersToUpdate.add(this.worldRenderers[(var6 * this.renderChunksTall + var5) * this.renderChunksWide + var4]);
-					var2 += 3;
+					this.worldRenderers[(i6 * this.renderChunksTall + i5) * this.renderChunksWide + i4].isWaitingOnOcclusionQuery = false;
+					this.worldRenderers[(i6 * this.renderChunksTall + i5) * this.renderChunksWide + i4].isVisible = true;
+					this.worldRenderers[(i6 * this.renderChunksTall + i5) * this.renderChunksWide + i4].isInFrustum = true;
+					this.worldRenderers[(i6 * this.renderChunksTall + i5) * this.renderChunksWide + i4].chunkIndex = i3++;
+					this.worldRenderers[(i6 * this.renderChunksTall + i5) * this.renderChunksWide + i4].markDirty();
+					this.sortedWorldRenderers[(i6 * this.renderChunksTall + i5) * this.renderChunksWide + i4] = this.worldRenderers[(i6 * this.renderChunksTall + i5) * this.renderChunksWide + i4];
+					this.worldRenderersToUpdate.add(this.worldRenderers[(i6 * this.renderChunksTall + i5) * this.renderChunksWide + i4]);
+					i2 += 3;
 				}
 			}
 		}
 
 		if(this.theWorld != null) {
-			EntityPlayerSP var7 = this.mc.thePlayer;
-			this.markRenderersForNewPosition(MathHelper.floor_double(var7.posX), MathHelper.floor_double(var7.posY), MathHelper.floor_double(var7.posZ));
-			Arrays.sort(this.sortedWorldRenderers, new EntitySorter(var7));
+			EntityPlayerSP entityPlayerSP7 = this.mc.thePlayer;
+			this.markRenderersForNewPosition(MathHelper.floor_double(entityPlayerSP7.posX), MathHelper.floor_double(entityPlayerSP7.posY), MathHelper.floor_double(entityPlayerSP7.posZ));
+			Arrays.sort(this.sortedWorldRenderers, new EntitySorter(entityPlayerSP7));
 		}
 
 		this.renderEntitiesStartupCounter = 2;
 	}
 
-	public void renderEntities(Vec3D var1, ICamera var2, float var3) {
+	public void renderEntities(Vec3D vector, ICamera camera, float renderPartialTick) {
 		if(this.renderEntitiesStartupCounter > 0) {
 			--this.renderEntitiesStartupCounter;
 		} else {
-			TileEntityRenderer.instance.cacheActiveRenderInfo(this.theWorld, this.renderEngine, this.mc.fontRenderer, this.mc.thePlayer, var3);
-			RenderManager.instance.cacheActiveRenderInfo(this.theWorld, this.renderEngine, this.mc.fontRenderer, this.mc.thePlayer, this.mc.options, var3);
+			TileEntityRenderer.instance.cacheActiveRenderInfo(this.theWorld, this.renderEngine, this.mc.fontRenderer, this.mc.thePlayer, renderPartialTick);
+			RenderManager.instance.cacheActiveRenderInfo(this.theWorld, this.renderEngine, this.mc.fontRenderer, this.mc.thePlayer, this.mc.options, renderPartialTick);
 			this.countEntitiesTotal = 0;
 			this.countEntitiesRendered = 0;
 			this.countEntitiesHidden = 0;
-			EntityPlayerSP var4 = this.mc.thePlayer;
-			RenderManager.renderPosX = var4.lastTickPosX + (var4.posX - var4.lastTickPosX) * (double)var3;
-			RenderManager.renderPosY = var4.lastTickPosY + (var4.posY - var4.lastTickPosY) * (double)var3;
-			RenderManager.renderPosZ = var4.lastTickPosZ + (var4.posZ - var4.lastTickPosZ) * (double)var3;
-			TileEntityRenderer.staticPlayerX = var4.lastTickPosX + (var4.posX - var4.lastTickPosX) * (double)var3;
-			TileEntityRenderer.staticPlayerY = var4.lastTickPosY + (var4.posY - var4.lastTickPosY) * (double)var3;
-			TileEntityRenderer.staticPlayerZ = var4.lastTickPosZ + (var4.posZ - var4.lastTickPosZ) * (double)var3;
-			List var5 = this.theWorld.getLoadedEntityList();
-			this.countEntitiesTotal = var5.size();
+			EntityPlayerSP entityPlayerSP4 = this.mc.thePlayer;
+			RenderManager.renderPosX = entityPlayerSP4.lastTickPosX + (entityPlayerSP4.posX - entityPlayerSP4.lastTickPosX) * (double)renderPartialTick;
+			RenderManager.renderPosY = entityPlayerSP4.lastTickPosY + (entityPlayerSP4.posY - entityPlayerSP4.lastTickPosY) * (double)renderPartialTick;
+			RenderManager.renderPosZ = entityPlayerSP4.lastTickPosZ + (entityPlayerSP4.posZ - entityPlayerSP4.lastTickPosZ) * (double)renderPartialTick;
+			TileEntityRenderer.staticPlayerX = entityPlayerSP4.lastTickPosX + (entityPlayerSP4.posX - entityPlayerSP4.lastTickPosX) * (double)renderPartialTick;
+			TileEntityRenderer.staticPlayerY = entityPlayerSP4.lastTickPosY + (entityPlayerSP4.posY - entityPlayerSP4.lastTickPosY) * (double)renderPartialTick;
+			TileEntityRenderer.staticPlayerZ = entityPlayerSP4.lastTickPosZ + (entityPlayerSP4.posZ - entityPlayerSP4.lastTickPosZ) * (double)renderPartialTick;
+			List list5 = this.theWorld.getLoadedEntityList();
+			this.countEntitiesTotal = list5.size();
 
-			int var6;
-			for(var6 = 0; var6 < var5.size(); ++var6) {
-				Entity var7 = (Entity)var5.get(var6);
-				if(var7.isInRangeToRenderVec3D(var1) && var2.isBoundingBoxInFrustum(var7.boundingBox) && (var7 != this.mc.thePlayer || this.mc.options.thirdPersonView)) {
+			int i6;
+			for(i6 = 0; i6 < list5.size(); ++i6) {
+				Entity entity7 = (Entity)list5.get(i6);
+				if(entity7.isInRangeToRenderVec3D(vector) && camera.isBoundingBoxInFrustum(entity7.boundingBox) && (entity7 != this.mc.thePlayer || this.mc.options.thirdPersonView)) {
 					++this.countEntitiesRendered;
-					RenderManager.instance.renderEntity(var7, var3);
+					RenderManager.instance.renderEntity(entity7, renderPartialTick);
 				}
 			}
 
-			for(var6 = 0; var6 < this.tileEntities.size(); ++var6) {
-				TileEntityRenderer.instance.renderTileEntity((TileEntity)this.tileEntities.get(var6), var3);
+			for(i6 = 0; i6 < this.tileEntities.size(); ++i6) {
+				TileEntityRenderer.instance.renderTileEntity((TileEntity)this.tileEntities.get(i6), renderPartialTick);
 			}
 
 		}
 	}
 
 	public String getDebugInfoRenders() {
-		return "C: " + this.renderersBeingRendered + "/" + this.renderersLoaded + ". F: " + this.renderersBeingClipped + ", O: " + this.renderersBeingOccluded + ", E: " + this.renderersSkippingRenderPass;
-	}
+		
+		FontRenderer font = this.mc.fontRenderer;
+		
+		String slash = "/";
+		
+		font.drawStringWithShadow("Rendered", 2, 12, 0xFCFC54); //yellow
+		font.drawStringWithShadow(slash, 2 + font.getStringWidth("Rendered"), 12, 0x54FCFC); //light blue
+		font.drawStringWithShadow("total: ", 2 + font.getStringWidth("Rendered" + slash), 12, 0xFCA800); //orange
+		font.drawStringWithShadow("" + this.renderersBeingRendered, 2 + font.getStringWidth("Rendered" + slash + "total: "), 12, 0xFCFC54);
+		font.drawStringWithShadow(slash, 2 + font.getStringWidth("Rendered" + slash + "total: " + "" + this.renderersBeingRendered), 12, 0x54FCFC);
+		font.drawStringWithShadow("" + this.renderersLoaded, 2 + font.getStringWidth("Rendered" + slash + "total: " + "" + this.renderersBeingRendered + slash), 12, 0xFCA800);
+		
+		font.drawStringWithShadow("Culled Renders: ", 2, 22, 0x00A8FC);//blue
+		font.drawStringWithShadow("" + this.renderersBeingClipped, 2 + font.getStringWidth("Culled Renders: "), 22, 0x54FC54); //neon green
+		
+		font.drawStringWithShadow("Removed Renders: ", 2, 32, 0x00A8FC);//blue
+		font.drawStringWithShadow("" + this.renderersBeingOccluded, 2 + font.getStringWidth("Removed Renders: "), 32, 0x54FC54); //neon green
+		
+		font.drawStringWithShadow("Skipped Renders: ", 2, 42, 0x00A8FC);//blue
+		font.drawStringWithShadow("" + this.renderersSkippingRenderPass, 2 + font.getStringWidth("Skipped Renders: "), 42, 0x54FC54); //neon green
+		
+		return "";
+		}
+	
 
 	public String getDebugInfoEntities() {
-		return "E: " + this.countEntitiesRendered + "/" + this.countEntitiesTotal + ". B: " + this.countEntitiesHidden + ", I: " + (this.countEntitiesTotal - this.countEntitiesHidden - this.countEntitiesRendered);
-	}
+		FontRenderer font = this.mc.fontRenderer;
+		
+		String slash = "/";
+		
+		font.drawStringWithShadow("Rendered Entities: ", 2, 52, 0xFCFC54); //yellow
+		font.drawStringWithShadow("" + this.countEntitiesRendered, 2 + font.getStringWidth("Rendered Entities: "), 52, 0x54FCFC); //light blue
+		font.drawStringWithShadow(slash, 2 + font.getStringWidth("Rendered Entities: " + "" + this.countEntitiesRendered), 52, 0xFCFC54); //yellow
+		font.drawStringWithShadow("" + this.countEntitiesTotal, 2 + font.getStringWidth("Rendered Entities: " + "" + this.countEntitiesRendered + slash), 52, 0xFCA800); //orange
+		
+		font.drawStringWithShadow("Entities Hidden: ", 2, 62, 0xFCFC54); //yellow
+		font.drawStringWithShadow("" + this.countEntitiesHidden, 2 + font.getStringWidth("Entities Hidden: "), 62, 0x54FCFC); //light blue
+		
+		font.drawStringWithShadow("Culled Entities: ", 2, 72, 0xFCFC54); //yellow
+		font.drawStringWithShadow("" + (this.countEntitiesTotal - this.countEntitiesHidden - this.countEntitiesRendered), 2 + font.getStringWidth("Culled Entities: "), 72, 0x54FCFC); //light blue
+		
+		return "";
+		}
 
-	private void markRenderersForNewPosition(int var1, int var2, int var3) {
-		var1 -= 8;
-		var2 -= 8;
-		var3 -= 8;
+	private void markRenderersForNewPosition(int i1, int i2, int i3) {
+		i1 -= 8;
+		i2 -= 8;
+		i3 -= 8;
 		this.minBlockX = Integer.MAX_VALUE;
 		this.minBlockY = Integer.MAX_VALUE;
 		this.minBlockZ = Integer.MAX_VALUE;
 		this.maxBlockX = Integer.MIN_VALUE;
 		this.maxBlockY = Integer.MIN_VALUE;
 		this.maxBlockZ = Integer.MIN_VALUE;
-		int var4 = this.renderChunksWide * 16;
-		int var5 = var4 / 2;
-
-		for(int var6 = 0; var6 < this.renderChunksWide; ++var6) {
-			int var7 = var6 * 16;
-			int var8 = var7 + var5 - var1;
-			if(var8 < 0) {
-				var8 -= var4 - 1;
-			}
-
-			var8 /= var4;
-			var7 -= var8 * var4;
-			if(var7 < this.minBlockX) {
-				this.minBlockX = var7;
-			}
-
-			if(var7 > this.maxBlockX) {
-				this.maxBlockX = var7;
-			}
-
-			for(int var9 = 0; var9 < this.renderChunksDeep; ++var9) {
-				int var10 = var9 * 16;
-				int var11 = var10 + var5 - var3;
-				if(var11 < 0) {
-					var11 -= var4 - 1;
-				}
-
-				var11 /= var4;
-				var10 -= var11 * var4;
-				if(var10 < this.minBlockZ) {
-					this.minBlockZ = var10;
-				}
-
-				if(var10 > this.maxBlockZ) {
-					this.maxBlockZ = var10;
-				}
-
-				for(int var12 = 0; var12 < this.renderChunksTall; ++var12) {
-					int var13 = var12 * 16;
-					if(var13 < this.minBlockY) {
-						this.minBlockY = var13;
-					}
-
-					if(var13 > this.maxBlockY) {
-						this.maxBlockY = var13;
-					}
-
-					WorldRenderer var14 = this.worldRenderers[(var9 * this.renderChunksTall + var12) * this.renderChunksWide + var6];
-					boolean var15 = var14.needsUpdate;
-					var14.setPosition(var7, var13, var10);
-					if(!var15 && var14.needsUpdate) {
-						this.worldRenderersToUpdate.add(var14);
+		int i4 = this.renderChunksWide * 16;
+		int i5 = i4 / 2;
+
+		for(int i6 = 0; i6 < this.renderChunksWide; ++i6) {
+			int i7 = i6 * 16;
+			int i8 = i7 + i5 - i1;
+			if(i8 < 0) {
+				i8 -= i4 - 1;
+			}
+
+			i8 /= i4;
+			i7 -= i8 * i4;
+			if(i7 < this.minBlockX) {
+				this.minBlockX = i7;
+			}
+
+			if(i7 > this.maxBlockX) {
+				this.maxBlockX = i7;
+			}
+
+			for(int i9 = 0; i9 < this.renderChunksDeep; ++i9) {
+				int i10 = i9 * 16;
+				int i11 = i10 + i5 - i3;
+				if(i11 < 0) {
+					i11 -= i4 - 1;
+				}
+
+				i11 /= i4;
+				i10 -= i11 * i4;
+				if(i10 < this.minBlockZ) {
+					this.minBlockZ = i10;
+				}
+
+				if(i10 > this.maxBlockZ) {
+					this.maxBlockZ = i10;
+				}
+
+				for(int i12 = 0; i12 < this.renderChunksTall; ++i12) {
+					int i13 = i12 * 16;
+					if(i13 < this.minBlockY) {
+						this.minBlockY = i13;
+					}
+
+					if(i13 > this.maxBlockY) {
+						this.maxBlockY = i13;
+					}
+
+					WorldRenderer worldRenderer14 = this.worldRenderers[(i9 * this.renderChunksTall + i12) * this.renderChunksWide + i6];
+					boolean z15 = worldRenderer14.needsUpdate;
+					worldRenderer14.setPosition(i7, i13, i10);
+					if(!z15 && worldRenderer14.needsUpdate) {
+						this.worldRenderersToUpdate.add(worldRenderer14);
 					}
 				}
 			}
@@ -361,12 +400,12 @@
 
 	}
 
-	public int sortAndRender(EntityPlayer var1, int var2, double var3) {
+	public int sortAndRender(EntityPlayer entityPlayer1, int i2, double d3) {
 		if(this.mc.options.renderDistance != this.renderDistance) {
 			this.loadRenderers();
 		}
 
-		if(var2 == 0) {
+		if(i2 == 0) {
 			this.renderersLoaded = 0;
 			this.renderersBeingClipped = 0;
 			this.renderersBeingOccluded = 0;
@@ -374,38 +413,38 @@
 			this.renderersSkippingRenderPass = 0;
 		}
 
-		double var5 = var1.lastTickPosX + (var1.posX - var1.lastTickPosX) * var3;
-		double var7 = var1.lastTickPosY + (var1.posY - var1.lastTickPosY) * var3;
-		double var9 = var1.lastTickPosZ + (var1.posZ - var1.lastTickPosZ) * var3;
-		double var11 = var1.posX - this.prevSortX;
-		double var13 = var1.posY - this.prevSortY;
-		double var15 = var1.posZ - this.prevSortZ;
-		if(var11 * var11 + var13 * var13 + var15 * var15 > 16.0D) {
-			this.prevSortX = var1.posX;
-			this.prevSortY = var1.posY;
-			this.prevSortZ = var1.posZ;
-			this.markRenderersForNewPosition(MathHelper.floor_double(var1.posX), MathHelper.floor_double(var1.posY), MathHelper.floor_double(var1.posZ));
-			Arrays.sort(this.sortedWorldRenderers, new EntitySorter(var1));
+		double d5 = entityPlayer1.lastTickPosX + (entityPlayer1.posX - entityPlayer1.lastTickPosX) * d3;
+		double d7 = entityPlayer1.lastTickPosY + (entityPlayer1.posY - entityPlayer1.lastTickPosY) * d3;
+		double d9 = entityPlayer1.lastTickPosZ + (entityPlayer1.posZ - entityPlayer1.lastTickPosZ) * d3;
+		double d11 = entityPlayer1.posX - this.prevSortX;
+		double d13 = entityPlayer1.posY - this.prevSortY;
+		double d15 = entityPlayer1.posZ - this.prevSortZ;
+		if(d11 * d11 + d13 * d13 + d15 * d15 > 16.0D) {
+			this.prevSortX = entityPlayer1.posX;
+			this.prevSortY = entityPlayer1.posY;
+			this.prevSortZ = entityPlayer1.posZ;
+			this.markRenderersForNewPosition(MathHelper.floor_double(entityPlayer1.posX), MathHelper.floor_double(entityPlayer1.posY), MathHelper.floor_double(entityPlayer1.posZ));
+			Arrays.sort(this.sortedWorldRenderers, new EntitySorter(entityPlayer1));
 		}
 
-		byte var17 = 0;
-		int var33;
-		if(this.occlusionEnabled && !this.mc.options.anaglyph && var2 == 0) {
-			byte var18 = 0;
-			int var19 = 16;
-			this.checkOcclusionQueryResult(var18, var19);
+		byte b17 = 0;
+		int i33;
+		if(this.occlusionEnabled && !this.mc.options.anaglyph && i2 == 0) {
+			byte b18 = 0;
+			int i19 = 16;
+			this.checkOcclusionQueryResult(b18, i19);
 
-			for(int var20 = var18; var20 < var19; ++var20) {
-				this.sortedWorldRenderers[var20].isVisible = true;
+			for(int i20 = b18; i20 < i19; ++i20) {
+				this.sortedWorldRenderers[i20].isVisible = true;
 			}
 
-			var33 = var17 + this.renderSortedRenderers(var18, var19, var2, var3);
+			i33 = b17 + this.renderSortedRenderers(b18, i19, i2, d3);
 
 			do {
-				int var34 = var19;
-				var19 *= 2;
-				if(var19 > this.sortedWorldRenderers.length) {
-					var19 = this.sortedWorldRenderers.length;
+				int i34 = i19;
+				i19 *= 2;
+				if(i19 > this.sortedWorldRenderers.length) {
+					i19 = this.sortedWorldRenderers.length;
 				}
 
 				GL11.glDisable(GL11.GL_TEXTURE_2D);
@@ -414,42 +453,42 @@
 				GL11.glDisable(GL11.GL_FOG);
 				GL11.glColorMask(false, false, false, false);
 				GL11.glDepthMask(false);
-				this.checkOcclusionQueryResult(var34, var19);
+				this.checkOcclusionQueryResult(i34, i19);
 				GL11.glPushMatrix();
-				float var35 = 0.0F;
-				float var21 = 0.0F;
-				float var22 = 0.0F;
+				float f35 = 0.0F;
+				float f21 = 0.0F;
+				float f22 = 0.0F;
 
-				for(int var23 = var34; var23 < var19; ++var23) {
-					if(this.sortedWorldRenderers[var23].skipAllRenderPasses()) {
-						this.sortedWorldRenderers[var23].isInFrustum = false;
+				for(int i23 = i34; i23 < i19; ++i23) {
+					if(this.sortedWorldRenderers[i23].skipAllRenderPasses()) {
+						this.sortedWorldRenderers[i23].isInFrustum = false;
 					} else {
-						if(!this.sortedWorldRenderers[var23].isInFrustum) {
-							this.sortedWorldRenderers[var23].isVisible = true;
+						if(!this.sortedWorldRenderers[i23].isInFrustum) {
+							this.sortedWorldRenderers[i23].isVisible = true;
 						}
 
-						if(this.sortedWorldRenderers[var23].isInFrustum && !this.sortedWorldRenderers[var23].isWaitingOnOcclusionQuery) {
-							float var24 = MathHelper.sqrt_float(this.sortedWorldRenderers[var23].distanceToEntitySquared(var1));
-							int var25 = (int)(1.0F + var24 / 128.0F);
-							if(this.cloudTickCounter % var25 == var23 % var25) {
-								WorldRenderer var26 = this.sortedWorldRenderers[var23];
-								float var27 = (float)((double)var26.posXMinus - var5);
-								float var28 = (float)((double)var26.posYMinus - var7);
-								float var29 = (float)((double)var26.posZMinus - var9);
-								float var30 = var27 - var35;
-								float var31 = var28 - var21;
-								float var32 = var29 - var22;
-								if(var30 != 0.0F || var31 != 0.0F || var32 != 0.0F) {
-									GL11.glTranslatef(var30, var31, var32);
-									var35 += var30;
-									var21 += var31;
-									var22 += var32;
+						if(this.sortedWorldRenderers[i23].isInFrustum && !this.sortedWorldRenderers[i23].isWaitingOnOcclusionQuery) {
+							float f24 = MathHelper.sqrt_float(this.sortedWorldRenderers[i23].distanceToEntitySquared(entityPlayer1));
+							int i25 = (int)(1.0F + f24 / 128.0F);
+							if(this.cloudTickCounter % i25 == i23 % i25) {
+								WorldRenderer worldRenderer26 = this.sortedWorldRenderers[i23];
+								float f27 = (float)((double)worldRenderer26.posXMinus - d5);
+								float f28 = (float)((double)worldRenderer26.posYMinus - d7);
+								float f29 = (float)((double)worldRenderer26.posZMinus - d9);
+								float f30 = f27 - f35;
+								float f31 = f28 - f21;
+								float f32 = f29 - f22;
+								if(f30 != 0.0F || f31 != 0.0F || f32 != 0.0F) {
+									GL11.glTranslatef(f30, f31, f32);
+									f35 += f30;
+									f21 += f31;
+									f22 += f32;
 								}
 
-								ARBOcclusionQuery.glBeginQueryARB(GL15.GL_SAMPLES_PASSED, this.sortedWorldRenderers[var23].glOcclusionQuery);
-								this.sortedWorldRenderers[var23].callOcclusionQueryList();
+								ARBOcclusionQuery.glBeginQueryARB(GL15.GL_SAMPLES_PASSED, this.sortedWorldRenderers[i23].glOcclusionQuery);
+								this.sortedWorldRenderers[i23].callOcclusionQueryList();
 								ARBOcclusionQuery.glEndQueryARB(GL15.GL_SAMPLES_PASSED);
-								this.sortedWorldRenderers[var23].isWaitingOnOcclusionQuery = true;
+								this.sortedWorldRenderers[i23].isWaitingOnOcclusionQuery = true;
 							}
 						}
 					}
@@ -461,94 +500,94 @@
 				GL11.glEnable(GL11.GL_TEXTURE_2D);
 				GL11.glEnable(GL11.GL_ALPHA_TEST);
 				GL11.glEnable(GL11.GL_FOG);
-				var33 += this.renderSortedRenderers(var34, var19, var2, var3);
-			} while(var19 < this.sortedWorldRenderers.length);
+				i33 += this.renderSortedRenderers(i34, i19, i2, d3);
+			} while(i19 < this.sortedWorldRenderers.length);
 		} else {
-			var33 = var17 + this.renderSortedRenderers(0, this.sortedWorldRenderers.length, var2, var3);
+			i33 = b17 + this.renderSortedRenderers(0, this.sortedWorldRenderers.length, i2, d3);
 		}
 
-		return var33;
+		return i33;
 	}
 
-	private void checkOcclusionQueryResult(int var1, int var2) {
-		for(int var3 = var1; var3 < var2; ++var3) {
-			if(this.sortedWorldRenderers[var3].isWaitingOnOcclusionQuery) {
+	private void checkOcclusionQueryResult(int i1, int i2) {
+		for(int i3 = i1; i3 < i2; ++i3) {
+			if(this.sortedWorldRenderers[i3].isWaitingOnOcclusionQuery) {
 				this.occlusionResult.clear();
-				ARBOcclusionQuery.glGetQueryObjectuARB(this.sortedWorldRenderers[var3].glOcclusionQuery, GL15.GL_QUERY_RESULT_AVAILABLE, this.occlusionResult);
+				ARBOcclusionQuery.glGetQueryObjectuARB(this.sortedWorldRenderers[i3].glOcclusionQuery, GL15.GL_QUERY_RESULT_AVAILABLE, this.occlusionResult);
 				if(this.occlusionResult.get(0) != 0) {
-					this.sortedWorldRenderers[var3].isWaitingOnOcclusionQuery = false;
+					this.sortedWorldRenderers[i3].isWaitingOnOcclusionQuery = false;
 					this.occlusionResult.clear();
-					ARBOcclusionQuery.glGetQueryObjectuARB(this.sortedWorldRenderers[var3].glOcclusionQuery, GL15.GL_QUERY_RESULT, this.occlusionResult);
-					this.sortedWorldRenderers[var3].isVisible = this.occlusionResult.get(0) != 0;
+					ARBOcclusionQuery.glGetQueryObjectuARB(this.sortedWorldRenderers[i3].glOcclusionQuery, GL15.GL_QUERY_RESULT, this.occlusionResult);
+					this.sortedWorldRenderers[i3].isVisible = this.occlusionResult.get(0) != 0;
 				}
 			}
 		}
 
 	}
 
-	private int renderSortedRenderers(int var1, int var2, int var3, double var4) {
+	private int renderSortedRenderers(int i1, int i2, int i3, double d4) {
 		this.glRenderLists.clear();
-		int var6 = 0;
+		int i6 = 0;
 
-		for(int var7 = var1; var7 < var2; ++var7) {
-			if(var3 == 0) {
+		for(int i7 = i1; i7 < i2; ++i7) {
+			if(i3 == 0) {
 				++this.renderersLoaded;
-				if(this.sortedWorldRenderers[var7].skipRenderPass[var3]) {
+				if(this.sortedWorldRenderers[i7].skipRenderPass[i3]) {
 					++this.renderersSkippingRenderPass;
-				} else if(!this.sortedWorldRenderers[var7].isInFrustum) {
+				} else if(!this.sortedWorldRenderers[i7].isInFrustum) {
 					++this.renderersBeingClipped;
-				} else if(this.occlusionEnabled && !this.sortedWorldRenderers[var7].isVisible) {
+				} else if(this.occlusionEnabled && !this.sortedWorldRenderers[i7].isVisible) {
 					++this.renderersBeingOccluded;
 				} else {
 					++this.renderersBeingRendered;
 				}
 			}
 
-			if(!this.sortedWorldRenderers[var7].skipRenderPass[var3] && this.sortedWorldRenderers[var7].isInFrustum && this.sortedWorldRenderers[var7].isVisible) {
-				int var8 = this.sortedWorldRenderers[var7].getGLCallListForPass(var3);
-				if(var8 >= 0) {
-					this.glRenderLists.add(this.sortedWorldRenderers[var7]);
-					++var6;
-				}
-			}
-		}
-
-		EntityPlayerSP var19 = this.mc.thePlayer;
-		double var20 = var19.lastTickPosX + (var19.posX - var19.lastTickPosX) * var4;
-		double var10 = var19.lastTickPosY + (var19.posY - var19.lastTickPosY) * var4;
-		double var12 = var19.lastTickPosZ + (var19.posZ - var19.lastTickPosZ) * var4;
-		int var14 = 0;
-
-		int var15;
-		for(var15 = 0; var15 < this.allRenderLists.length; ++var15) {
-			this.allRenderLists[var15].reset();
-		}
-
-		for(var15 = 0; var15 < this.glRenderLists.size(); ++var15) {
-			WorldRenderer var16 = (WorldRenderer)this.glRenderLists.get(var15);
-			int var17 = -1;
-
-			for(int var18 = 0; var18 < var14; ++var18) {
-				if(this.allRenderLists[var18].isRenderedAt(var16.posXMinus, var16.posYMinus, var16.posZMinus)) {
-					var17 = var18;
-				}
-			}
-
-			if(var17 < 0) {
-				var17 = var14++;
-				this.allRenderLists[var17].setLocation(var16.posXMinus, var16.posYMinus, var16.posZMinus, var20, var10, var12);
-			}
-
-			this.allRenderLists[var17].render(var16.getGLCallListForPass(var3));
-		}
-
-		this.renderAllRenderLists(var3, var4);
-		return var6;
+			if(!this.sortedWorldRenderers[i7].skipRenderPass[i3] && this.sortedWorldRenderers[i7].isInFrustum && this.sortedWorldRenderers[i7].isVisible) {
+				int i8 = this.sortedWorldRenderers[i7].getGLCallListForPass(i3);
+				if(i8 >= 0) {
+					this.glRenderLists.add(this.sortedWorldRenderers[i7]);
+					++i6;
+				}
+			}
+		}
+
+		EntityPlayerSP entityPlayerSP19 = this.mc.thePlayer;
+		double d20 = entityPlayerSP19.lastTickPosX + (entityPlayerSP19.posX - entityPlayerSP19.lastTickPosX) * d4;
+		double d10 = entityPlayerSP19.lastTickPosY + (entityPlayerSP19.posY - entityPlayerSP19.lastTickPosY) * d4;
+		double d12 = entityPlayerSP19.lastTickPosZ + (entityPlayerSP19.posZ - entityPlayerSP19.lastTickPosZ) * d4;
+		int i14 = 0;
+
+		int i15;
+		for(i15 = 0; i15 < this.allRenderLists.length; ++i15) {
+			this.allRenderLists[i15].reset();
+		}
+
+		for(i15 = 0; i15 < this.glRenderLists.size(); ++i15) {
+			WorldRenderer worldRenderer16 = (WorldRenderer)this.glRenderLists.get(i15);
+			int i17 = -1;
+
+			for(int i18 = 0; i18 < i14; ++i18) {
+				if(this.allRenderLists[i18].isRenderedAt(worldRenderer16.posXMinus, worldRenderer16.posYMinus, worldRenderer16.posZMinus)) {
+					i17 = i18;
+				}
+			}
+
+			if(i17 < 0) {
+				i17 = i14++;
+				this.allRenderLists[i17].setLocation(worldRenderer16.posXMinus, worldRenderer16.posYMinus, worldRenderer16.posZMinus, d20, d10, d12);
+			}
+
+			this.allRenderLists[i17].render(worldRenderer16.getGLCallListForPass(i3));
+		}
+
+		this.renderAllRenderLists(i3, d4);
+		return i6;
 	}
 
-	public void renderAllRenderLists(int var1, double var2) {
-		for(int var4 = 0; var4 < this.allRenderLists.length; ++var4) {
-			this.allRenderLists[var4].render();
+	public void renderAllRenderLists(int i1, double d2) {
+		for(int i4 = 0; i4 < this.allRenderLists.length; ++i4) {
+			this.allRenderLists[i4].render();
 		}
 
 	}
@@ -557,28 +596,28 @@
 		++this.cloudTickCounter;
 	}
 
-	public void renderSky(float var1) {
+	public void renderSky(float renderPartialTick) {
 		GL11.glDisable(GL11.GL_TEXTURE_2D);
-		Vec3D var2 = this.theWorld.getSkyColor(var1);
-		float var3 = (float)var2.xCoord;
-		float var4 = (float)var2.yCoord;
-		float var5 = (float)var2.zCoord;
-		float var7;
-		float var8;
+		Vec3D vec3D2 = this.theWorld.getSkyColor(renderPartialTick);
+		float f3 = (float)vec3D2.xCoord;
+		float f4 = (float)vec3D2.yCoord;
+		float f5 = (float)vec3D2.zCoord;
+		float f7;
+		float f8;
 		if(this.mc.options.anaglyph) {
-			float var6 = (var3 * 30.0F + var4 * 59.0F + var5 * 11.0F) / 100.0F;
-			var7 = (var3 * 30.0F + var4 * 70.0F) / 100.0F;
-			var8 = (var3 * 30.0F + var5 * 70.0F) / 100.0F;
-			var3 = var6;
-			var4 = var7;
-			var5 = var8;
+			float f6 = (f3 * 30.0F + f4 * 59.0F + f5 * 11.0F) / 100.0F;
+			f7 = (f3 * 30.0F + f4 * 70.0F) / 100.0F;
+			f8 = (f3 * 30.0F + f5 * 70.0F) / 100.0F;
+			f3 = f6;
+			f4 = f7;
+			f5 = f8;
 		}
 
-		GL11.glColor3f(var3, var4, var5);
-		Tessellator var12 = Tessellator.instance;
+		GL11.glColor3f(f3, f4, f5);
+		Tessellator tessellator12 = Tessellator.instance;
 		GL11.glDepthMask(false);
 		GL11.glEnable(GL11.GL_FOG);
-		GL11.glColor3f(var3, var4, var5);
+		GL11.glColor3f(f3, f4, f5);
 		GL11.glCallList(this.glSkyList);
 		GL11.glEnable(GL11.GL_TEXTURE_2D);
 		GL11.glDisable(GL11.GL_FOG);
@@ -586,33 +625,33 @@
 		GL11.glEnable(GL11.GL_BLEND);
 		GL11.glBlendFunc(GL11.GL_ONE, GL11.GL_ONE);
 		GL11.glPushMatrix();
-		var7 = 0.0F;
-		var8 = 0.0F;
-		float var9 = 0.0F;
+		f7 = 0.0F;
+		f8 = 0.0F;
+		float f9 = 0.0F;
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
-		GL11.glTranslatef(var7, var8, var9);
+		GL11.glTranslatef(f7, f8, f9);
 		GL11.glRotatef(0.0F, 0.0F, 0.0F, 1.0F);
-		GL11.glRotatef(this.theWorld.getCelestialAngle(var1) * 360.0F, 1.0F, 0.0F, 0.0F);
-		float var10 = 30.0F;
+		GL11.glRotatef(this.theWorld.getCelestialAngle(renderPartialTick) * 360.0F, 1.0F, 0.0F, 0.0F);
+		float f10 = 30.0F;
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/terrain/sun.png"));
-		var12.startDrawingQuads();
-		var12.addVertexWithUV((double)(-var10), 100.0D, (double)(-var10), 0.0D, 0.0D);
-		var12.addVertexWithUV((double)var10, 100.0D, (double)(-var10), 1.0D, 0.0D);
-		var12.addVertexWithUV((double)var10, 100.0D, (double)var10, 1.0D, 1.0D);
-		var12.addVertexWithUV((double)(-var10), 100.0D, (double)var10, 0.0D, 1.0D);
-		var12.draw();
-		var10 = 20.0F;
+		tessellator12.startDrawingQuads();
+		tessellator12.addVertexWithUV((double)(-f10), 100.0D, (double)(-f10), 0.0D, 0.0D);
+		tessellator12.addVertexWithUV((double)f10, 100.0D, (double)(-f10), 1.0D, 0.0D);
+		tessellator12.addVertexWithUV((double)f10, 100.0D, (double)f10, 1.0D, 1.0D);
+		tessellator12.addVertexWithUV((double)(-f10), 100.0D, (double)f10, 0.0D, 1.0D);
+		tessellator12.draw();
+		f10 = 20.0F;
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/terrain/moon.png"));
-		var12.startDrawingQuads();
-		var12.addVertexWithUV((double)(-var10), -100.0D, (double)var10, 1.0D, 1.0D);
-		var12.addVertexWithUV((double)var10, -100.0D, (double)var10, 0.0D, 1.0D);
-		var12.addVertexWithUV((double)var10, -100.0D, (double)(-var10), 0.0D, 0.0D);
-		var12.addVertexWithUV((double)(-var10), -100.0D, (double)(-var10), 1.0D, 0.0D);
-		var12.draw();
+		tessellator12.startDrawingQuads();
+		tessellator12.addVertexWithUV((double)(-f10), -100.0D, (double)f10, 1.0D, 1.0D);
+		tessellator12.addVertexWithUV((double)f10, -100.0D, (double)f10, 0.0D, 1.0D);
+		tessellator12.addVertexWithUV((double)f10, -100.0D, (double)(-f10), 0.0D, 0.0D);
+		tessellator12.addVertexWithUV((double)(-f10), -100.0D, (double)(-f10), 1.0D, 0.0D);
+		tessellator12.draw();
 		GL11.glDisable(GL11.GL_TEXTURE_2D);
-		float var11 = this.theWorld.getStarBrightness(var1);
-		if(var11 > 0.0F) {
-			GL11.glColor4f(var11, var11, var11, var11);
+		float f11 = this.theWorld.getStarBrightness(renderPartialTick);
+		if(f11 > 0.0F) {
+			GL11.glColor4f(f11, f11, f11, f11);
 			GL11.glCallList(this.starGLCallList);
 		}
 
@@ -621,192 +660,192 @@
 		GL11.glEnable(GL11.GL_ALPHA_TEST);
 		GL11.glEnable(GL11.GL_FOG);
 		GL11.glPopMatrix();
-		GL11.glColor3f(var3 * 0.2F + 0.04F, var4 * 0.2F + 0.04F, var5 * 0.6F + 0.1F);
+		GL11.glColor3f(f3 * 0.2F + 0.04F, f4 * 0.2F + 0.04F, f5 * 0.6F + 0.1F);
 		GL11.glDisable(GL11.GL_TEXTURE_2D);
 		GL11.glCallList(this.glSkyList2);
 		GL11.glEnable(GL11.GL_TEXTURE_2D);
 		GL11.glDepthMask(true);
 	}
 
-	public void renderClouds(float var1) {
+	public void renderClouds(float f1) {
 		if(this.mc.options.fancyGraphics) {
-			this.renderCloudsFancy(var1);
+			this.renderCloudsFancy(f1);
 		} else {
 			GL11.glDisable(GL11.GL_CULL_FACE);
-			float var2 = (float)(this.mc.thePlayer.lastTickPosY + (this.mc.thePlayer.posY - this.mc.thePlayer.lastTickPosY) * (double)var1);
-			byte var3 = 32;
-			int var4 = 256 / var3;
-			Tessellator var5 = Tessellator.instance;
+			float f2 = (float)(this.mc.thePlayer.lastTickPosY + (this.mc.thePlayer.posY - this.mc.thePlayer.lastTickPosY) * (double)f1);
+			byte b3 = 32;
+			int i4 = 256 / b3;
+			Tessellator tessellator5 = Tessellator.instance;
 			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/clouds.png"));
 			GL11.glEnable(GL11.GL_BLEND);
 			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-			Vec3D var6 = this.theWorld.getCloudColor(var1);
-			float var7 = (float)var6.xCoord;
-			float var8 = (float)var6.yCoord;
-			float var9 = (float)var6.zCoord;
-			float var10;
+			Vec3D vec3D6 = this.theWorld.getCloudColor(f1);
+			float f7 = (float)vec3D6.xCoord;
+			float f8 = (float)vec3D6.yCoord;
+			float f9 = (float)vec3D6.zCoord;
+			float f10;
 			if(this.mc.options.anaglyph) {
-				var10 = (var7 * 30.0F + var8 * 59.0F + var9 * 11.0F) / 100.0F;
-				float var11 = (var7 * 30.0F + var8 * 70.0F) / 100.0F;
-				float var12 = (var7 * 30.0F + var9 * 70.0F) / 100.0F;
-				var7 = var10;
-				var8 = var11;
-				var9 = var12;
+				f10 = (f7 * 30.0F + f8 * 59.0F + f9 * 11.0F) / 100.0F;
+				float f11 = (f7 * 30.0F + f8 * 70.0F) / 100.0F;
+				float f12 = (f7 * 30.0F + f9 * 70.0F) / 100.0F;
+				f7 = f10;
+				f8 = f11;
+				f9 = f12;
 			}
 
-			var10 = 0.5F / 1024.0F;
-			double var22 = this.mc.thePlayer.prevPosX + (this.mc.thePlayer.posX - this.mc.thePlayer.prevPosX) * (double)var1 + (double)(((float)this.cloudTickCounter + var1) * 0.03F);
-			double var13 = this.mc.thePlayer.prevPosZ + (this.mc.thePlayer.posZ - this.mc.thePlayer.prevPosZ) * (double)var1;
-			int var15 = MathHelper.floor_double(var22 / 2048.0D);
-			int var16 = MathHelper.floor_double(var13 / 2048.0D);
-			var22 -= (double)(var15 * 2048);
-			var13 -= (double)(var16 * 2048);
-			float var17 = 120.0F - var2 + 0.33F;
-			float var18 = (float)(var22 * (double)var10);
-			float var19 = (float)(var13 * (double)var10);
-			var5.startDrawingQuads();
-			var5.setColorRGBA_F(var7, var8, var9, 0.8F);
+			f10 = 4.8828125E-4F;
+			double d22 = this.mc.thePlayer.prevPosX + (this.mc.thePlayer.posX - this.mc.thePlayer.prevPosX) * (double)f1 + (double)(((float)this.cloudTickCounter + f1) * 0.03F);
+			double d13 = this.mc.thePlayer.prevPosZ + (this.mc.thePlayer.posZ - this.mc.thePlayer.prevPosZ) * (double)f1;
+			int i15 = MathHelper.floor_double(d22 / 2048.0D);
+			int i16 = MathHelper.floor_double(d13 / 2048.0D);
+			d22 -= (double)(i15 * 2048);
+			d13 -= (double)(i16 * 2048);
+			float f17 = 120.0F - f2 + 0.33F;
+			float f18 = (float)(d22 * (double)f10);
+			float f19 = (float)(d13 * (double)f10);
+			tessellator5.startDrawingQuads();
+			tessellator5.setColorRGBA_F(f7, f8, f9, 0.8F);
 
-			for(int var20 = -var3 * var4; var20 < var3 * var4; var20 += var3) {
-				for(int var21 = -var3 * var4; var21 < var3 * var4; var21 += var3) {
-					var5.addVertexWithUV((double)(var20 + 0), (double)var17, (double)(var21 + var3), (double)((float)(var20 + 0) * var10 + var18), (double)((float)(var21 + var3) * var10 + var19));
-					var5.addVertexWithUV((double)(var20 + var3), (double)var17, (double)(var21 + var3), (double)((float)(var20 + var3) * var10 + var18), (double)((float)(var21 + var3) * var10 + var19));
-					var5.addVertexWithUV((double)(var20 + var3), (double)var17, (double)(var21 + 0), (double)((float)(var20 + var3) * var10 + var18), (double)((float)(var21 + 0) * var10 + var19));
-					var5.addVertexWithUV((double)(var20 + 0), (double)var17, (double)(var21 + 0), (double)((float)(var20 + 0) * var10 + var18), (double)((float)(var21 + 0) * var10 + var19));
+			for(int i20 = -b3 * i4; i20 < b3 * i4; i20 += b3) {
+				for(int i21 = -b3 * i4; i21 < b3 * i4; i21 += b3) {
+					tessellator5.addVertexWithUV((double)(i20 + 0), (double)f17, (double)(i21 + b3), (double)((float)(i20 + 0) * f10 + f18), (double)((float)(i21 + b3) * f10 + f19));
+					tessellator5.addVertexWithUV((double)(i20 + b3), (double)f17, (double)(i21 + b3), (double)((float)(i20 + b3) * f10 + f18), (double)((float)(i21 + b3) * f10 + f19));
+					tessellator5.addVertexWithUV((double)(i20 + b3), (double)f17, (double)(i21 + 0), (double)((float)(i20 + b3) * f10 + f18), (double)((float)(i21 + 0) * f10 + f19));
+					tessellator5.addVertexWithUV((double)(i20 + 0), (double)f17, (double)(i21 + 0), (double)((float)(i20 + 0) * f10 + f18), (double)((float)(i21 + 0) * f10 + f19));
 				}
 			}
 
-			var5.draw();
+			tessellator5.draw();
 			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 			GL11.glDisable(GL11.GL_BLEND);
 			GL11.glEnable(GL11.GL_CULL_FACE);
 		}
 	}
 
-	public void renderCloudsFancy(float var1) {
+	public void renderCloudsFancy(float f1) {
 		GL11.glDisable(GL11.GL_CULL_FACE);
-		float var2 = (float)(this.mc.thePlayer.lastTickPosY + (this.mc.thePlayer.posY - this.mc.thePlayer.lastTickPosY) * (double)var1);
-		Tessellator var3 = Tessellator.instance;
-		float var4 = 12.0F;
-		float var5 = 4.0F;
-		double var6 = (this.mc.thePlayer.prevPosX + (this.mc.thePlayer.posX - this.mc.thePlayer.prevPosX) * (double)var1 + (double)(((float)this.cloudTickCounter + var1) * 0.03F)) / (double)var4;
-		double var8 = (this.mc.thePlayer.prevPosZ + (this.mc.thePlayer.posZ - this.mc.thePlayer.prevPosZ) * (double)var1) / (double)var4 + (double)0.33F;
-		float var10 = 108.0F - var2 + 0.33F;
-		int var11 = MathHelper.floor_double(var6 / 2048.0D);
-		int var12 = MathHelper.floor_double(var8 / 2048.0D);
-		var6 -= (double)(var11 * 2048);
-		var8 -= (double)(var12 * 2048);
+		float f2 = (float)(this.mc.thePlayer.lastTickPosY + (this.mc.thePlayer.posY - this.mc.thePlayer.lastTickPosY) * (double)f1);
+		Tessellator tessellator3 = Tessellator.instance;
+		float f4 = 12.0F;
+		float f5 = 4.0F;
+		double d6 = (this.mc.thePlayer.prevPosX + (this.mc.thePlayer.posX - this.mc.thePlayer.prevPosX) * (double)f1 + (double)(((float)this.cloudTickCounter + f1) * 0.03F)) / (double)f4;
+		double d8 = (this.mc.thePlayer.prevPosZ + (this.mc.thePlayer.posZ - this.mc.thePlayer.prevPosZ) * (double)f1) / (double)f4 + (double)0.33F;
+		float f10 = 108.0F - f2 + 0.33F;
+		int i11 = MathHelper.floor_double(d6 / 2048.0D);
+		int i12 = MathHelper.floor_double(d8 / 2048.0D);
+		d6 -= (double)(i11 * 2048);
+		d8 -= (double)(i12 * 2048);
 		GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.renderEngine.getTexture("/clouds.png"));
 		GL11.glEnable(GL11.GL_BLEND);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-		Vec3D var13 = this.theWorld.getCloudColor(var1);
-		float var14 = (float)var13.xCoord;
-		float var15 = (float)var13.yCoord;
-		float var16 = (float)var13.zCoord;
-		float var17;
-		float var18;
-		float var19;
+		Vec3D vec3D13 = this.theWorld.getCloudColor(f1);
+		float f14 = (float)vec3D13.xCoord;
+		float f15 = (float)vec3D13.yCoord;
+		float f16 = (float)vec3D13.zCoord;
+		float f17;
+		float f18;
+		float f19;
 		if(this.mc.options.anaglyph) {
-			var17 = (var14 * 30.0F + var15 * 59.0F + var16 * 11.0F) / 100.0F;
-			var18 = (var14 * 30.0F + var15 * 70.0F) / 100.0F;
-			var19 = (var14 * 30.0F + var16 * 70.0F) / 100.0F;
-			var14 = var17;
-			var15 = var18;
-			var16 = var19;
+			f17 = (f14 * 30.0F + f15 * 59.0F + f16 * 11.0F) / 100.0F;
+			f18 = (f14 * 30.0F + f15 * 70.0F) / 100.0F;
+			f19 = (f14 * 30.0F + f16 * 70.0F) / 100.0F;
+			f14 = f17;
+			f15 = f18;
+			f16 = f19;
 		}
 
-		var17 = (float)(var6 * 0.0D);
-		var18 = (float)(var8 * 0.0D);
-		var19 = 0.00390625F;
-		var17 = (float)MathHelper.floor_double(var6) * var19;
-		var18 = (float)MathHelper.floor_double(var8) * var19;
-		float var20 = (float)(var6 - (double)MathHelper.floor_double(var6));
-		float var21 = (float)(var8 - (double)MathHelper.floor_double(var8));
-		byte var22 = 8;
-		byte var23 = 3;
-		float var24 = 1.0F / 1024.0F;
-		GL11.glScalef(var4, 1.0F, var4);
+		f17 = (float)(d6 * 0.0D);
+		f18 = (float)(d8 * 0.0D);
+		f19 = 0.00390625F;
+		f17 = (float)MathHelper.floor_double(d6) * f19;
+		f18 = (float)MathHelper.floor_double(d8) * f19;
+		float f20 = (float)(d6 - (double)MathHelper.floor_double(d6));
+		float f21 = (float)(d8 - (double)MathHelper.floor_double(d8));
+		byte b22 = 8;
+		byte b23 = 3;
+		float f24 = 9.765625E-4F;
+		GL11.glScalef(f4, 1.0F, f4);
 
-		for(int var25 = 0; var25 < 2; ++var25) {
-			if(var25 == 0) {
+		for(int i25 = 0; i25 < 2; ++i25) {
+			if(i25 == 0) {
 				GL11.glColorMask(false, false, false, false);
 			} else {
 				GL11.glColorMask(true, true, true, true);
 			}
 
-			for(int var26 = -var23 + 1; var26 <= var23; ++var26) {
-				for(int var27 = -var23 + 1; var27 <= var23; ++var27) {
-					var3.startDrawingQuads();
-					float var28 = (float)(var26 * var22);
-					float var29 = (float)(var27 * var22);
-					float var30 = var28 - var20;
-					float var31 = var29 - var21;
-					if(var10 > -var5 - 1.0F) {
-						var3.setColorRGBA_F(var14 * 0.7F, var15 * 0.7F, var16 * 0.7F, 0.8F);
-						var3.setNormal(0.0F, -1.0F, 0.0F);
-						var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + (float)var22), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-						var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + 0.0F), (double)(var31 + (float)var22), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-						var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + 0.0F), (double)(var31 + 0.0F), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-						var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + 0.0F), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-					}
-
-					if(var10 <= var5 + 1.0F) {
-						var3.setColorRGBA_F(var14, var15, var16, 0.8F);
-						var3.setNormal(0.0F, 1.0F, 0.0F);
-						var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + var5 - var24), (double)(var31 + (float)var22), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-						var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + var5 - var24), (double)(var31 + (float)var22), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-						var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + var5 - var24), (double)(var31 + 0.0F), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-						var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + var5 - var24), (double)(var31 + 0.0F), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-					}
-
-					var3.setColorRGBA_F(var14 * 0.9F, var15 * 0.9F, var16 * 0.9F, 0.8F);
-					int var32;
-					if(var26 > -1) {
-						var3.setNormal(-1.0F, 0.0F, 0.0F);
-
-						for(var32 = 0; var32 < var22; ++var32) {
-							var3.addVertexWithUV((double)(var30 + (float)var32 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + (float)var22), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var32 + 0.0F), (double)(var10 + var5), (double)(var31 + (float)var22), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var32 + 0.0F), (double)(var10 + var5), (double)(var31 + 0.0F), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var32 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + 0.0F), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-						}
-					}
-
-					if(var26 <= 1) {
-						var3.setNormal(1.0F, 0.0F, 0.0F);
-
-						for(var32 = 0; var32 < var22; ++var32) {
-							var3.addVertexWithUV((double)(var30 + (float)var32 + 1.0F - var24), (double)(var10 + 0.0F), (double)(var31 + (float)var22), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var32 + 1.0F - var24), (double)(var10 + var5), (double)(var31 + (float)var22), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + (float)var22) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var32 + 1.0F - var24), (double)(var10 + var5), (double)(var31 + 0.0F), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var32 + 1.0F - var24), (double)(var10 + 0.0F), (double)(var31 + 0.0F), (double)((var28 + (float)var32 + 0.5F) * var19 + var17), (double)((var29 + 0.0F) * var19 + var18));
-						}
-					}
-
-					var3.setColorRGBA_F(var14 * 0.8F, var15 * 0.8F, var16 * 0.8F, 0.8F);
-					if(var27 > -1) {
-						var3.setNormal(0.0F, 0.0F, -1.0F);
-
-						for(var32 = 0; var32 < var22; ++var32) {
-							var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + var5), (double)(var31 + (float)var32 + 0.0F), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + var5), (double)(var31 + (float)var32 + 0.0F), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + 0.0F), (double)(var31 + (float)var32 + 0.0F), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + (float)var32 + 0.0F), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-						}
-					}
-
-					if(var27 <= 1) {
-						var3.setNormal(0.0F, 0.0F, 1.0F);
-
-						for(var32 = 0; var32 < var22; ++var32) {
-							var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + var5), (double)(var31 + (float)var32 + 1.0F - var24), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + var5), (double)(var31 + (float)var32 + 1.0F - var24), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + (float)var22), (double)(var10 + 0.0F), (double)(var31 + (float)var32 + 1.0F - var24), (double)((var28 + (float)var22) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-							var3.addVertexWithUV((double)(var30 + 0.0F), (double)(var10 + 0.0F), (double)(var31 + (float)var32 + 1.0F - var24), (double)((var28 + 0.0F) * var19 + var17), (double)((var29 + (float)var32 + 0.5F) * var19 + var18));
-						}
-					}
-
-					var3.draw();
+			for(int i26 = -b23 + 1; i26 <= b23; ++i26) {
+				for(int i27 = -b23 + 1; i27 <= b23; ++i27) {
+					tessellator3.startDrawingQuads();
+					float f28 = (float)(i26 * b22);
+					float f29 = (float)(i27 * b22);
+					float f30 = f28 - f20;
+					float f31 = f29 - f21;
+					if(f10 > -f5 - 1.0F) {
+						tessellator3.setColorRGBA_F(f14 * 0.7F, f15 * 0.7F, f16 * 0.7F, 0.8F);
+						tessellator3.setNormal(0.0F, -1.0F, 0.0F);
+						tessellator3.addVertexWithUV((double)(f30 + 0.0F), (double)(f10 + 0.0F), (double)(f31 + (float)b22), (double)((f28 + 0.0F) * f19 + f17), (double)((f29 + (float)b22) * f19 + f18));
+						tessellator3.addVertexWithUV((double)(f30 + (float)b22), (double)(f10 + 0.0F), (double)(f31 + (float)b22), (double)((f28 + (float)b22) * f19 + f17), (double)((f29 + (float)b22) * f19 + f18));
+						tessellator3.addVertexWithUV((double)(f30 + (float)b22), (double)(f10 + 0.0F), (double)(f31 + 0.0F), (double)((f28 + (float)b22) * f19 + f17), (double)((f29 + 0.0F) * f19 + f18));
+						tessellator3.addVertexWithUV((double)(f30 + 0.0F), (double)(f10 + 0.0F), (double)(f31 + 0.0F), (double)((f28 + 0.0F) * f19 + f17), (double)((f29 + 0.0F) * f19 + f18));
+					}
+
+					if(f10 <= f5 + 1.0F) {
+						tessellator3.setColorRGBA_F(f14, f15, f16, 0.8F);
+						tessellator3.setNormal(0.0F, 1.0F, 0.0F);
+						tessellator3.addVertexWithUV((double)(f30 + 0.0F), (double)(f10 + f5 - f24), (double)(f31 + (float)b22), (double)((f28 + 0.0F) * f19 + f17), (double)((f29 + (float)b22) * f19 + f18));
+						tessellator3.addVertexWithUV((double)(f30 + (float)b22), (double)(f10 + f5 - f24), (double)(f31 + (float)b22), (double)((f28 + (float)b22) * f19 + f17), (double)((f29 + (float)b22) * f19 + f18));
+						tessellator3.addVertexWithUV((double)(f30 + (float)b22), (double)(f10 + f5 - f24), (double)(f31 + 0.0F), (double)((f28 + (float)b22) * f19 + f17), (double)((f29 + 0.0F) * f19 + f18));
+						tessellator3.addVertexWithUV((double)(f30 + 0.0F), (double)(f10 + f5 - f24), (double)(f31 + 0.0F), (double)((f28 + 0.0F) * f19 + f17), (double)((f29 + 0.0F) * f19 + f18));
+					}
+
+					tessellator3.setColorRGBA_F(f14 * 0.9F, f15 * 0.9F, f16 * 0.9F, 0.8F);
+					int i32;
+					if(i26 > -1) {
+						tessellator3.setNormal(-1.0F, 0.0F, 0.0F);
+
+						for(i32 = 0; i32 < b22; ++i32) {
+							tessellator3.addVertexWithUV((double)(f30 + (float)i32 + 0.0F), (double)(f10 + 0.0F), (double)(f31 + (float)b22), (double)((f28 + (float)i32 + 0.5F) * f19 + f17), (double)((f29 + (float)b22) * f19 + f18));
+							tessellator3.addVertexWithUV((double)(f30 + (float)i32 + 0.0F), (double)(f10 + f5), (double)(f31 + (float)b22), (double)((f28 + (float)i32 + 0.5F) * f19 + f17), (double)((f29 + (float)b22) * f19 + f18));
+							tessellator3.addVertexWithUV((double)(f30 + (float)i32 + 0.0F), (double)(f10 + f5), (double)(f31 + 0.0F), (double)((f28 + (float)i32 + 0.5F) * f19 + f17), (double)((f29 + 0.0F) * f19 + f18));
+							tessellator3.addVertexWithUV((double)(f30 + (float)i32 + 0.0F), (double)(f10 + 0.0F), (double)(f31 + 0.0F), (double)((f28 + (float)i32 + 0.5F) * f19 + f17), (double)((f29 + 0.0F) * f19 + f18));
+						}
+					}
+
+					if(i26 <= 1) {
+						tessellator3.setNormal(1.0F, 0.0F, 0.0F);
+
+						for(i32 = 0; i32 < b22; ++i32) {
+							tessellator3.addVertexWithUV((double)(f30 + (float)i32 + 1.0F - f24), (double)(f10 + 0.0F), (double)(f31 + (float)b22), (double)((f28 + (float)i32 + 0.5F) * f19 + f17), (double)((f29 + (float)b22) * f19 + f18));
+							tessellator3.addVertexWithUV((double)(f30 + (float)i32 + 1.0F - f24), (double)(f10 + f5), (double)(f31 + (float)b22), (double)((f28 + (float)i32 + 0.5F) * f19 + f17), (double)((f29 + (float)b22) * f19 + f18));
+							tessellator3.addVertexWithUV((double)(f30 + (float)i32 + 1.0F - f24), (double)(f10 + f5), (double)(f31 + 0.0F), (double)((f28 + (float)i32 + 0.5F) * f19 + f17), (double)((f29 + 0.0F) * f19 + f18));
+							tessellator3.addVertexWithUV((double)(f30 + (float)i32 + 1.0F - f24), (double)(f10 + 0.0F), (double)(f31 + 0.0F), (double)((f28 + (float)i32 + 0.5F) * f19 + f17), (double)((f29 + 0.0F) * f19 + f18));
+						}
+					}
+
+					tessellator3.setColorRGBA_F(f14 * 0.8F, f15 * 0.8F, f16 * 0.8F, 0.8F);
+					if(i27 > -1) {
+						tessellator3.setNormal(0.0F, 0.0F, -1.0F);
+
+						for(i32 = 0; i32 < b22; ++i32) {
+							tessellator3.addVertexWithUV((double)(f30 + 0.0F), (double)(f10 + f5), (double)(f31 + (float)i32 + 0.0F), (double)((f28 + 0.0F) * f19 + f17), (double)((f29 + (float)i32 + 0.5F) * f19 + f18));
+							tessellator3.addVertexWithUV((double)(f30 + (float)b22), (double)(f10 + f5), (double)(f31 + (float)i32 + 0.0F), (double)((f28 + (float)b22) * f19 + f17), (double)((f29 + (float)i32 + 0.5F) * f19 + f18));
+							tessellator3.addVertexWithUV((double)(f30 + (float)b22), (double)(f10 + 0.0F), (double)(f31 + (float)i32 + 0.0F), (double)((f28 + (float)b22) * f19 + f17), (double)((f29 + (float)i32 + 0.5F) * f19 + f18));
+							tessellator3.addVertexWithUV((double)(f30 + 0.0F), (double)(f10 + 0.0F), (double)(f31 + (float)i32 + 0.0F), (double)((f28 + 0.0F) * f19 + f17), (double)((f29 + (float)i32 + 0.5F) * f19 + f18));
+						}
+					}
+
+					if(i27 <= 1) {
+						tessellator3.setNormal(0.0F, 0.0F, 1.0F);
+
+						for(i32 = 0; i32 < b22; ++i32) {
+							tessellator3.addVertexWithUV((double)(f30 + 0.0F), (double)(f10 + f5), (double)(f31 + (float)i32 + 1.0F - f24), (double)((f28 + 0.0F) * f19 + f17), (double)((f29 + (float)i32 + 0.5F) * f19 + f18));
+							tessellator3.addVertexWithUV((double)(f30 + (float)b22), (double)(f10 + f5), (double)(f31 + (float)i32 + 1.0F - f24), (double)((f28 + (float)b22) * f19 + f17), (double)((f29 + (float)i32 + 0.5F) * f19 + f18));
+							tessellator3.addVertexWithUV((double)(f30 + (float)b22), (double)(f10 + 0.0F), (double)(f31 + (float)i32 + 1.0F - f24), (double)((f28 + (float)b22) * f19 + f17), (double)((f29 + (float)i32 + 0.5F) * f19 + f18));
+							tessellator3.addVertexWithUV((double)(f30 + 0.0F), (double)(f10 + 0.0F), (double)(f31 + (float)i32 + 1.0F - f24), (double)((f28 + 0.0F) * f19 + f17), (double)((f29 + (float)i32 + 0.5F) * f19 + f18));
+						}
+					}
+
+					tessellator3.draw();
 				}
 			}
 		}
@@ -816,104 +855,104 @@
 		GL11.glEnable(GL11.GL_CULL_FACE);
 	}
 
-	public boolean updateRenderers(EntityPlayer var1, boolean var2) {
-		Collections.sort(this.worldRenderersToUpdate, new RenderSorter(var1));
-		int var3 = this.worldRenderersToUpdate.size() - 1;
-		int var4 = this.worldRenderersToUpdate.size();
+	public boolean updateRenderers(EntityPlayer entityPlayer1, boolean z2) {
+		Collections.sort(this.worldRenderersToUpdate, new RenderSorter(entityPlayer1));
+		int i3 = this.worldRenderersToUpdate.size() - 1;
+		int i4 = this.worldRenderersToUpdate.size();
 
-		for(int var5 = 0; var5 < var4; ++var5) {
-			WorldRenderer var6 = (WorldRenderer)this.worldRenderersToUpdate.get(var3 - var5);
-			if(!var2) {
-				if(var6.distanceToEntitySquared(var1) > 1024.0F) {
-					if(var6.isInFrustum) {
-						if(var5 >= 3) {
+		for(int i5 = 0; i5 < i4; ++i5) {
+			WorldRenderer worldRenderer6 = (WorldRenderer)this.worldRenderersToUpdate.get(i3 - i5);
+			if(!z2) {
+				if(worldRenderer6.distanceToEntitySquared(entityPlayer1) > 1024.0F) {
+					if(worldRenderer6.isInFrustum) {
+						if(i5 >= 3) {
 							return false;
 						}
-					} else if(var5 >= 1) {
+					} else if(i5 >= 1) {
 						return false;
 					}
 				}
-			} else if(!var6.isInFrustum) {
+			} else if(!worldRenderer6.isInFrustum) {
 				continue;
 			}
 
-			var6.updateRenderer();
-			this.worldRenderersToUpdate.remove(var6);
-			var6.needsUpdate = false;
+			worldRenderer6.updateRenderer();
+			this.worldRenderersToUpdate.remove(worldRenderer6);
+			worldRenderer6.needsUpdate = false;
 		}
 
 		return this.worldRenderersToUpdate.size() == 0;
 	}
 
-	public void drawBlockBreaking(EntityPlayer var1, MovingObjectPosition var2, int var3, ItemStack var4, float var5) {
-		Tessellator var6 = Tessellator.instance;
+	public void drawBlockBreaking(EntityPlayer entityPlayer1, MovingObjectPosition movingObjectPosition2, int i3, ItemStack itemStack4, float f5) {
+		Tessellator tessellator6 = Tessellator.instance;
 		GL11.glEnable(GL11.GL_BLEND);
 		GL11.glEnable(GL11.GL_ALPHA_TEST);
 		GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE);
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, (MathHelper.sin((float)System.currentTimeMillis() / 100.0F) * 0.2F + 0.4F) * 0.5F);
-		int var8;
-		if(var3 == 0) {
+		int i8;
+		if(i3 == 0) {
 			if(this.damagePartialTime > 0.0F) {
 				GL11.glBlendFunc(GL11.GL_DST_COLOR, GL11.GL_SRC_COLOR);
-				int var7 = this.renderEngine.getTexture("/terrain.png");
-				GL11.glBindTexture(GL11.GL_TEXTURE_2D, var7);
+				int i7 = this.renderEngine.getTexture("/terrain.png");
+				GL11.glBindTexture(GL11.GL_TEXTURE_2D, i7);
 				GL11.glColor4f(1.0F, 1.0F, 1.0F, 0.5F);
 				GL11.glPushMatrix();
-				var8 = this.theWorld.getBlockId(var2.blockX, var2.blockY, var2.blockZ);
-				Block var9 = var8 > 0 ? Block.blocksList[var8] : null;
+				i8 = this.theWorld.getBlockId(movingObjectPosition2.blockX, movingObjectPosition2.blockY, movingObjectPosition2.blockZ);
+				Block block9 = i8 > 0 ? Block.blocksList[i8] : null;
 				GL11.glDisable(GL11.GL_ALPHA_TEST);
 				GL11.glPolygonOffset(-3.0F, -3.0F);
 				GL11.glEnable(GL11.GL_POLYGON_OFFSET_FILL);
-				var6.startDrawingQuads();
-				double var10 = var1.lastTickPosX + (var1.posX - var1.lastTickPosX) * (double)var5;
-				double var12 = var1.lastTickPosY + (var1.posY - var1.lastTickPosY) * (double)var5;
-				double var14 = var1.lastTickPosZ + (var1.posZ - var1.lastTickPosZ) * (double)var5;
-				var6.setTranslationD(-var10, -var12, -var14);
-				var6.disableColor();
-				if(var9 == null) {
-					var9 = Block.stone;
+				tessellator6.startDrawingQuads();
+				double d10 = entityPlayer1.lastTickPosX + (entityPlayer1.posX - entityPlayer1.lastTickPosX) * (double)f5;
+				double d12 = entityPlayer1.lastTickPosY + (entityPlayer1.posY - entityPlayer1.lastTickPosY) * (double)f5;
+				double d14 = entityPlayer1.lastTickPosZ + (entityPlayer1.posZ - entityPlayer1.lastTickPosZ) * (double)f5;
+				tessellator6.setTranslationD(-d10, -d12, -d14);
+				tessellator6.disableColor();
+				if(block9 == null) {
+					block9 = Block.stone;
 				}
 
-				this.globalRenderBlocks.renderBlockUsingTexture(var9, var2.blockX, var2.blockY, var2.blockZ, 240 + (int)(this.damagePartialTime * 10.0F));
-				var6.draw();
-				var6.setTranslationD(0.0D, 0.0D, 0.0D);
+				this.globalRenderBlocks.renderBlockUsingTexture(block9, movingObjectPosition2.blockX, movingObjectPosition2.blockY, movingObjectPosition2.blockZ, 240 + (int)(this.damagePartialTime * 10.0F));
+				tessellator6.draw();
+				tessellator6.setTranslationD(0.0D, 0.0D, 0.0D);
 				GL11.glPolygonOffset(0.0F, 0.0F);
 				GL11.glDisable(GL11.GL_POLYGON_OFFSET_FILL);
 				GL11.glEnable(GL11.GL_ALPHA_TEST);
 				GL11.glDepthMask(true);
 				GL11.glPopMatrix();
 			}
-		} else if(var4 != null) {
+		} else if(itemStack4 != null) {
 			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
-			float var16 = MathHelper.sin((float)System.currentTimeMillis() / 100.0F) * 0.2F + 0.8F;
-			GL11.glColor4f(var16, var16, var16, MathHelper.sin((float)System.currentTimeMillis() / 200.0F) * 0.2F + 0.5F);
-			var8 = this.renderEngine.getTexture("/terrain.png");
-			GL11.glBindTexture(GL11.GL_TEXTURE_2D, var8);
-			int var17 = var2.blockX;
-			int var18 = var2.blockY;
-			int var11 = var2.blockZ;
-			if(var2.sideHit == 0) {
-				--var18;
-			}
-
-			if(var2.sideHit == 1) {
-				++var18;
-			}
-
-			if(var2.sideHit == 2) {
-				--var11;
-			}
-
-			if(var2.sideHit == 3) {
-				++var11;
-			}
-
-			if(var2.sideHit == 4) {
-				--var17;
-			}
-
-			if(var2.sideHit == 5) {
-				++var17;
+			float f16 = MathHelper.sin((float)System.currentTimeMillis() / 100.0F) * 0.2F + 0.8F;
+			GL11.glColor4f(f16, f16, f16, MathHelper.sin((float)System.currentTimeMillis() / 200.0F) * 0.2F + 0.5F);
+			i8 = this.renderEngine.getTexture("/terrain.png");
+			GL11.glBindTexture(GL11.GL_TEXTURE_2D, i8);
+			int i17 = movingObjectPosition2.blockX;
+			int i18 = movingObjectPosition2.blockY;
+			int i11 = movingObjectPosition2.blockZ;
+			if(movingObjectPosition2.sideHit == 0) {
+				--i18;
+			}
+
+			if(movingObjectPosition2.sideHit == 1) {
+				++i18;
+			}
+
+			if(movingObjectPosition2.sideHit == 2) {
+				--i11;
+			}
+
+			if(movingObjectPosition2.sideHit == 3) {
+				++i11;
+			}
+
+			if(movingObjectPosition2.sideHit == 4) {
+				--i17;
+			}
+
+			if(movingObjectPosition2.sideHit == 5) {
+				++i17;
 			}
 		}
 
@@ -921,22 +960,22 @@
 		GL11.glDisable(GL11.GL_ALPHA_TEST);
 	}
 
-	public void drawSelectionBox(EntityPlayer var1, MovingObjectPosition var2, int var3, ItemStack var4, float var5) {
-		if(var3 == 0 && var2.typeOfHit == 0) {
+	public void drawSelectionBox(EntityPlayer entityPlayer1, MovingObjectPosition movingObjectPosition2, int i3, ItemStack itemStack4, float f5) {
+		if(i3 == 0 && movingObjectPosition2.typeOfHit == 0) {
 			GL11.glEnable(GL11.GL_BLEND);
 			GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE_MINUS_SRC_ALPHA);
 			GL11.glColor4f(0.0F, 0.0F, 0.0F, 0.4F);
 			GL11.glLineWidth(2.0F);
 			GL11.glDisable(GL11.GL_TEXTURE_2D);
 			GL11.glDepthMask(false);
-			float var6 = 0.002F;
-			int var7 = this.theWorld.getBlockId(var2.blockX, var2.blockY, var2.blockZ);
-			if(var7 > 0) {
-				Block.blocksList[var7].setBlockBoundsBasedOnState(this.theWorld, var2.blockX, var2.blockY, var2.blockZ);
-				double var8 = var1.lastTickPosX + (var1.posX - var1.lastTickPosX) * (double)var5;
-				double var10 = var1.lastTickPosY + (var1.posY - var1.lastTickPosY) * (double)var5;
-				double var12 = var1.lastTickPosZ + (var1.posZ - var1.lastTickPosZ) * (double)var5;
-				this.drawOutlinedBoundingBox(Block.blocksList[var7].getSelectedBoundingBoxFromPool(this.theWorld, var2.blockX, var2.blockY, var2.blockZ).expand((double)var6, (double)var6, (double)var6).getOffsetBoundingBox(-var8, -var10, -var12));
+			float f6 = 0.002F;
+			int i7 = this.theWorld.getBlockId(movingObjectPosition2.blockX, movingObjectPosition2.blockY, movingObjectPosition2.blockZ);
+			if(i7 > 0) {
+				Block.blocksList[i7].setBlockBoundsBasedOnState(this.theWorld, movingObjectPosition2.blockX, movingObjectPosition2.blockY, movingObjectPosition2.blockZ);
+				double d8 = entityPlayer1.lastTickPosX + (entityPlayer1.posX - entityPlayer1.lastTickPosX) * (double)f5;
+				double d10 = entityPlayer1.lastTickPosY + (entityPlayer1.posY - entityPlayer1.lastTickPosY) * (double)f5;
+				double d12 = entityPlayer1.lastTickPosZ + (entityPlayer1.posZ - entityPlayer1.lastTickPosZ) * (double)f5;
+				this.drawOutlinedBoundingBox(Block.blocksList[i7].getSelectedBoundingBoxFromPool(this.theWorld, movingObjectPosition2.blockX, movingObjectPosition2.blockY, movingObjectPosition2.blockZ).expand((double)f6, (double)f6, (double)f6).getOffsetBoundingBox(-d8, -d10, -d12));
 			}
 
 			GL11.glDepthMask(true);
@@ -946,168 +985,168 @@
 
 	}
 
-	private void drawOutlinedBoundingBox(AxisAlignedBB var1) {
-		Tessellator var2 = Tessellator.instance;
-		var2.startDrawing(3);
-		var2.addVertex(var1.minX, var1.minY, var1.minZ);
-		var2.addVertex(var1.maxX, var1.minY, var1.minZ);
-		var2.addVertex(var1.maxX, var1.minY, var1.maxZ);
-		var2.addVertex(var1.minX, var1.minY, var1.maxZ);
-		var2.addVertex(var1.minX, var1.minY, var1.minZ);
-		var2.draw();
-		var2.startDrawing(3);
-		var2.addVertex(var1.minX, var1.maxY, var1.minZ);
-		var2.addVertex(var1.maxX, var1.maxY, var1.minZ);
-		var2.addVertex(var1.maxX, var1.maxY, var1.maxZ);
-		var2.addVertex(var1.minX, var1.maxY, var1.maxZ);
-		var2.addVertex(var1.minX, var1.maxY, var1.minZ);
-		var2.draw();
-		var2.startDrawing(1);
-		var2.addVertex(var1.minX, var1.minY, var1.minZ);
-		var2.addVertex(var1.minX, var1.maxY, var1.minZ);
-		var2.addVertex(var1.maxX, var1.minY, var1.minZ);
-		var2.addVertex(var1.maxX, var1.maxY, var1.minZ);
-		var2.addVertex(var1.maxX, var1.minY, var1.maxZ);
-		var2.addVertex(var1.maxX, var1.maxY, var1.maxZ);
-		var2.addVertex(var1.minX, var1.minY, var1.maxZ);
-		var2.addVertex(var1.minX, var1.maxY, var1.maxZ);
-		var2.draw();
+	private void drawOutlinedBoundingBox(AxisAlignedBB axisAlignedBB1) {
+		Tessellator tessellator2 = Tessellator.instance;
+		tessellator2.startDrawing(3);
+		tessellator2.addVertex(axisAlignedBB1.minX, axisAlignedBB1.minY, axisAlignedBB1.minZ);
+		tessellator2.addVertex(axisAlignedBB1.maxX, axisAlignedBB1.minY, axisAlignedBB1.minZ);
+		tessellator2.addVertex(axisAlignedBB1.maxX, axisAlignedBB1.minY, axisAlignedBB1.maxZ);
+		tessellator2.addVertex(axisAlignedBB1.minX, axisAlignedBB1.minY, axisAlignedBB1.maxZ);
+		tessellator2.addVertex(axisAlignedBB1.minX, axisAlignedBB1.minY, axisAlignedBB1.minZ);
+		tessellator2.draw();
+		tessellator2.startDrawing(3);
+		tessellator2.addVertex(axisAlignedBB1.minX, axisAlignedBB1.maxY, axisAlignedBB1.minZ);
+		tessellator2.addVertex(axisAlignedBB1.maxX, axisAlignedBB1.maxY, axisAlignedBB1.minZ);
+		tessellator2.addVertex(axisAlignedBB1.maxX, axisAlignedBB1.maxY, axisAlignedBB1.maxZ);
+		tessellator2.addVertex(axisAlignedBB1.minX, axisAlignedBB1.maxY, axisAlignedBB1.maxZ);
+		tessellator2.addVertex(axisAlignedBB1.minX, axisAlignedBB1.maxY, axisAlignedBB1.minZ);
+		tessellator2.draw();
+		tessellator2.startDrawing(1);
+		tessellator2.addVertex(axisAlignedBB1.minX, axisAlignedBB1.minY, axisAlignedBB1.minZ);
+		tessellator2.addVertex(axisAlignedBB1.minX, axisAlignedBB1.maxY, axisAlignedBB1.minZ);
+		tessellator2.addVertex(axisAlignedBB1.maxX, axisAlignedBB1.minY, axisAlignedBB1.minZ);
+		tessellator2.addVertex(axisAlignedBB1.maxX, axisAlignedBB1.maxY, axisAlignedBB1.minZ);
+		tessellator2.addVertex(axisAlignedBB1.maxX, axisAlignedBB1.minY, axisAlignedBB1.maxZ);
+		tessellator2.addVertex(axisAlignedBB1.maxX, axisAlignedBB1.maxY, axisAlignedBB1.maxZ);
+		tessellator2.addVertex(axisAlignedBB1.minX, axisAlignedBB1.minY, axisAlignedBB1.maxZ);
+		tessellator2.addVertex(axisAlignedBB1.minX, axisAlignedBB1.maxY, axisAlignedBB1.maxZ);
+		tessellator2.draw();
 	}
 
-	public void markBlocksForUpdate(int var1, int var2, int var3, int var4, int var5, int var6) {
-		int var7 = MathHelper.bucketInt(var1, 16);
-		int var8 = MathHelper.bucketInt(var2, 16);
-		int var9 = MathHelper.bucketInt(var3, 16);
-		int var10 = MathHelper.bucketInt(var4, 16);
-		int var11 = MathHelper.bucketInt(var5, 16);
-		int var12 = MathHelper.bucketInt(var6, 16);
+	public void markBlocksForUpdate(int i1, int i2, int i3, int i4, int i5, int i6) {
+		int i7 = MathHelper.bucketInt(i1, 16);
+		int i8 = MathHelper.bucketInt(i2, 16);
+		int i9 = MathHelper.bucketInt(i3, 16);
+		int i10 = MathHelper.bucketInt(i4, 16);
+		int i11 = MathHelper.bucketInt(i5, 16);
+		int i12 = MathHelper.bucketInt(i6, 16);
 
-		for(int var13 = var7; var13 <= var10; ++var13) {
-			int var14 = var13 % this.renderChunksWide;
-			if(var14 < 0) {
-				var14 += this.renderChunksWide;
+		for(int i13 = i7; i13 <= i10; ++i13) {
+			int i14 = i13 % this.renderChunksWide;
+			if(i14 < 0) {
+				i14 += this.renderChunksWide;
 			}
 
-			for(int var15 = var8; var15 <= var11; ++var15) {
-				int var16 = var15 % this.renderChunksTall;
-				if(var16 < 0) {
-					var16 += this.renderChunksTall;
+			for(int i15 = i8; i15 <= i11; ++i15) {
+				int i16 = i15 % this.renderChunksTall;
+				if(i16 < 0) {
+					i16 += this.renderChunksTall;
 				}
 
-				for(int var17 = var9; var17 <= var12; ++var17) {
-					int var18 = var17 % this.renderChunksDeep;
-					if(var18 < 0) {
-						var18 += this.renderChunksDeep;
-					}
-
-					int var19 = (var18 * this.renderChunksTall + var16) * this.renderChunksWide + var14;
-					WorldRenderer var20 = this.worldRenderers[var19];
-					if(!var20.needsUpdate) {
-						this.worldRenderersToUpdate.add(var20);
-					}
-
-					var20.markDirty();
+				for(int i17 = i9; i17 <= i12; ++i17) {
+					int i18 = i17 % this.renderChunksDeep;
+					if(i18 < 0) {
+						i18 += this.renderChunksDeep;
+					}
+
+					int i19 = (i18 * this.renderChunksTall + i16) * this.renderChunksWide + i14;
+					WorldRenderer worldRenderer20 = this.worldRenderers[i19];
+					if(!worldRenderer20.needsUpdate) {
+						this.worldRenderersToUpdate.add(worldRenderer20);
+					}
+
+					worldRenderer20.markDirty();
 				}
 			}
 		}
 
 	}
 
-	public void markBlockAndNeighborsNeedsUpdate(int var1, int var2, int var3) {
-		this.markBlocksForUpdate(var1 - 1, var2 - 1, var3 - 1, var1 + 1, var2 + 1, var3 + 1);
-	}
-
-	public void markBlockRangeNeedsUpdate(int var1, int var2, int var3, int var4, int var5, int var6) {
-		this.markBlocksForUpdate(var1 - 1, var2 - 1, var3 - 1, var4 + 1, var5 + 1, var6 + 1);
-	}
-
-	public void clipRenderersByFrustum(ICamera var1, float var2) {
-		for(int var3 = 0; var3 < this.worldRenderers.length; ++var3) {
-			if(!this.worldRenderers[var3].skipAllRenderPasses() && (!this.worldRenderers[var3].isInFrustum || (var3 + this.frustumCheckOffset & 15) == 0)) {
-				this.worldRenderers[var3].updateInFrustum(var1);
+	public void markBlockAndNeighborsNeedsUpdate(int x, int y, int z) {
+		this.markBlocksForUpdate(x - 1, y - 1, z - 1, x + 1, y + 1, z + 1);
+	}
+
+	public void markBlockRangeNeedsUpdate(int minX, int minY, int minZ, int maxX, int maxY, int maxZ) {
+		this.markBlocksForUpdate(minX - 1, minY - 1, minZ - 1, maxX + 1, maxY + 1, maxZ + 1);
+	}
+
+	public void clipRenderersByFrustum(ICamera iCamera1, float f2) {
+		for(int i3 = 0; i3 < this.worldRenderers.length; ++i3) {
+			if(!this.worldRenderers[i3].skipAllRenderPasses() && (!this.worldRenderers[i3].isInFrustum || (i3 + this.frustumCheckOffset & 15) == 0)) {
+				this.worldRenderers[i3].updateInFrustum(iCamera1);
 			}
 		}
 
 		++this.frustumCheckOffset;
 	}
 
-	public void playRecord(String var1, int var2, int var3, int var4) {
-		if(var1 != null) {
-			this.mc.ingameGUI.setRecordPlayingMessage("C418 - " + var1);
-		}
-
-		this.mc.sndManager.playStreaming(var1, (float)var2, (float)var3, (float)var4, 1.0F, 1.0F);
-	}
-
-	public void playSound(String var1, double var2, double var4, double var6, float var8, float var9) {
-		float var10 = 16.0F;
-		if(var8 > 1.0F) {
-			var10 *= var8;
-		}
-
-		if(this.mc.thePlayer.getDistanceSq(var2, var4, var6) < (double)(var10 * var10)) {
-			this.mc.sndManager.playSound(var1, (float)var2, (float)var4, (float)var6, var8, var9);
-		}
-
-	}
-
-	public void spawnParticle(String var1, double var2, double var4, double var6, double var8, double var10, double var12) {
-		double var14 = this.mc.thePlayer.posX - var2;
-		double var16 = this.mc.thePlayer.posY - var4;
-		double var18 = this.mc.thePlayer.posZ - var6;
-		if(var14 * var14 + var16 * var16 + var18 * var18 <= 256.0D) {
-			if(var1 == "bubble") {
-				this.mc.effectRenderer.addEffect(new EntityBubbleFX(this.theWorld, var2, var4, var6, var8, var10, var12));
-			} else if(var1 == "smoke") {
-				this.mc.effectRenderer.addEffect(new EntitySmokeFX(this.theWorld, var2, var4, var6));
-			} else if(var1 == "explode") {
-				this.mc.effectRenderer.addEffect(new EntityExplodeFX(this.theWorld, var2, var4, var6, var8, var10, var12));
-			} else if(var1 == "flame") {
-				this.mc.effectRenderer.addEffect(new EntityFlameFX(this.theWorld, var2, var4, var6, var8, var10, var12));
-			} else if(var1 == "lava") {
-				this.mc.effectRenderer.addEffect(new EntityLavaFX(this.theWorld, var2, var4, var6));
-			} else if(var1 == "splash") {
-				this.mc.effectRenderer.addEffect(new EntitySplashFX(this.theWorld, var2, var4, var6, var8, var10, var12));
-			} else if(var1 == "largesmoke") {
-				this.mc.effectRenderer.addEffect(new EntitySmokeFX(this.theWorld, var2, var4, var6, 2.5F));
-			} else if(var1 == "reddust") {
-				this.mc.effectRenderer.addEffect(new EntityReddustFX(this.theWorld, var2, var4, var6));
-			} else if(var1 == "snowballpoof") {
-				this.mc.effectRenderer.addEffect(new EntitySlimeFX(this.theWorld, var2, var4, var6, Item.snowball));
-			} else if(var1 == "slime") {
-				this.mc.effectRenderer.addEffect(new EntitySlimeFX(this.theWorld, var2, var4, var6, Item.slimeBall));
+	public void playRecord(String record, int x, int y, int z) {
+		if(record != null) {
+			this.mc.ingameGUI.setRecordPlayingMessage("C418 - " + record);
+		}
+
+		this.mc.sndManager.playStreaming(record, (float)x, (float)y, (float)z, 1.0F, 1.0F);
+	}
+
+	public void playSound(String sound, double posX, double posY, double posZ, float volume, float pitch) {
+		float f10 = 16.0F;
+		if(volume > 1.0F) {
+			f10 *= volume;
+		}
+
+		if(this.mc.thePlayer.getDistanceSq(posX, posY, posZ) < (double)(f10 * f10)) {
+			this.mc.sndManager.playSound(sound, (float)posX, (float)posY, (float)posZ, volume, pitch);
+		}
+
+	}
+
+	public void spawnParticle(String particle, double posX, double posY, double posZ, double motionX, double motionY, double motionZ) {
+		double d14 = this.mc.thePlayer.posX - posX;
+		double d16 = this.mc.thePlayer.posY - posY;
+		double d18 = this.mc.thePlayer.posZ - posZ;
+		if(d14 * d14 + d16 * d16 + d18 * d18 <= 256.0D) {
+			if(particle == "bubble") {
+				this.mc.effectRenderer.addEffect(new EntityBubbleFX(this.theWorld, posX, posY, posZ, motionX, motionY, motionZ));
+			} else if(particle == "smoke") {
+				this.mc.effectRenderer.addEffect(new EntitySmokeFX(this.theWorld, posX, posY, posZ));
+			} else if(particle == "explode") {
+				this.mc.effectRenderer.addEffect(new EntityExplodeFX(this.theWorld, posX, posY, posZ, motionX, motionY, motionZ));
+			} else if(particle == "flame") {
+				this.mc.effectRenderer.addEffect(new EntityFlameFX(this.theWorld, posX, posY, posZ, motionX, motionY, motionZ));
+			} else if(particle == "lava") {
+				this.mc.effectRenderer.addEffect(new EntityLavaFX(this.theWorld, posX, posY, posZ));
+			} else if(particle == "splash") {
+				this.mc.effectRenderer.addEffect(new EntitySplashFX(this.theWorld, posX, posY, posZ, motionX, motionY, motionZ));
+			} else if(particle == "largesmoke") {
+				this.mc.effectRenderer.addEffect(new EntitySmokeFX(this.theWorld, posX, posY, posZ, 2.5F));
+			} else if(particle == "reddust") {
+				this.mc.effectRenderer.addEffect(new EntityReddustFX(this.theWorld, posX, posY, posZ));
+			} else if(particle == "snowballpoof") {
+				this.mc.effectRenderer.addEffect(new EntitySlimeFX(this.theWorld, posX, posY, posZ, Item.snowball));
+			} else if(particle == "slime") {
+				this.mc.effectRenderer.addEffect(new EntitySlimeFX(this.theWorld, posX, posY, posZ, Item.slimeBall));
 			}
 
 		}
 	}
 
-	public void obtainEntitySkin(Entity var1) {
-		if(var1.skinUrl != null) {
-			this.renderEngine.obtainImageData(var1.skinUrl, new ImageBufferDownload());
+	public void obtainEntitySkin(Entity entity) {
+		if(entity.skinUrl != null) {
+			this.renderEngine.obtainImageData(entity.skinUrl, new ImageBufferDownload());
 		}
 
 	}
 
-	public void releaseEntitySkin(Entity var1) {
-		if(var1.skinUrl != null) {
-			this.renderEngine.releaseImageData(var1.skinUrl);
+	public void releaseEntitySkin(Entity entity) {
+		if(entity.skinUrl != null) {
+			this.renderEngine.releaseImageData(entity.skinUrl);
 		}
 
 	}
 
 	public void updateAllRenderers() {
-		for(int var1 = 0; var1 < this.worldRenderers.length; ++var1) {
-			if(this.worldRenderers[var1].isChunkLit) {
-				if(!this.worldRenderers[var1].needsUpdate) {
-					this.worldRenderersToUpdate.add(this.worldRenderers[var1]);
+		for(int i1 = 0; i1 < this.worldRenderers.length; ++i1) {
+			if(this.worldRenderers[i1].isChunkLit) {
+				if(!this.worldRenderers[i1].needsUpdate) {
+					this.worldRenderersToUpdate.add(this.worldRenderers[i1]);
 				}
 
-				this.worldRenderers[var1].markDirty();
+				this.worldRenderers[i1].markDirty();
 			}
 		}
 
 	}
 
-	public void doNothingWithTileEntity(int var1, int var2, int var3, TileEntity var4) {
+	public void doNothingWithTileEntity(int x, int y, int z, TileEntity tileEntity) {
 	}
 }
--- /dev/null
+++ net/minecraft/src/ScreenShotHelper.java
@@ -1,0 +1,69 @@
+package net.minecraft.src;
+
+import java.awt.image.BufferedImage;
+import java.io.File;
+import java.nio.ByteBuffer;
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Random;
+import javax.imageio.ImageIO;
+
+import org.lwjgl.BufferUtils;
+import org.lwjgl.opengl.GL11;
+
+public class ScreenShotHelper {
+	private static DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss");
+	private static ByteBuffer buffer;
+	private static byte[] pixelData;
+	private static int[] imageData;
+	private Random fuckmd5;
+
+	public static String saveScreenshot(File file0, int i1, int i2) {
+		try {
+			File file3 = new File(file0, "screenshots");
+			file3.mkdir();
+			if(buffer == null || buffer.capacity() < i1 * i2) {
+				buffer = BufferUtils.createByteBuffer(i1 * i2 * 3);
+			}
+
+			if(imageData == null || imageData.length < i1 * i2 * 3) {
+				pixelData = new byte[i1 * i2 * 3];
+				imageData = new int[i1 * i2];
+			}
+
+			GL11.glPixelStorei(GL11.GL_PACK_ALIGNMENT, 1);
+			GL11.glPixelStorei(GL11.GL_UNPACK_ALIGNMENT, 1);
+			buffer.clear();
+			GL11.glReadPixels(0, 0, i1, i2, GL11.GL_RGB, GL11.GL_UNSIGNED_BYTE, buffer);
+			buffer.clear();
+			String string4 = "" + dateFormat.format(new Date());
+
+			File file5;
+			int i6;
+			for(i6 = 1; (file5 = new File(file3, string4 + (i6 == 1 ? "" : "_" + i6) + ".png")).exists(); ++i6) {
+			}
+
+			buffer.get(pixelData);
+
+			for(i6 = 0; i6 < i1; ++i6) {
+				for(int i7 = 0; i7 < i2; ++i7) {
+					int i8 = i6 + (i2 - i7 - 1) * i1;
+					int i9 = pixelData[i8 * 3 + 0] & 255;
+					int i10 = pixelData[i8 * 3 + 1] & 255;
+					int i11 = pixelData[i8 * 3 + 2] & 255;
+					int i12 = 0xFF000000 | i9 << 16 | i10 << 8 | i11;
+					imageData[i6 + i7 * i1] = i12;
+				}
+			}
+
+			BufferedImage bufferedImage14 = new BufferedImage(i1, i2, 1);
+			bufferedImage14.setRGB(0, 0, i1, i2, imageData, 0, i1);
+			ImageIO.write(bufferedImage14, "png", file5);
+			return "Saved screenshot as " + file5.getName();
+		} catch (Exception exception13) {
+			exception13.printStackTrace();
+			return "Failed to save: " + exception13;
+		}
+	}
+}
--- /dev/null
+++ net/minecraft/src/WorldGenBlueReed.java
@@ -1,0 +1,24 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenBlueReed extends WorldGenerator {
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		for(int var6 = 0; var6 < 20; ++var6) {
+			int var7 = var3 + var2.nextInt(4) - var2.nextInt(4);
+			int var8 = var4;
+			int var9 = var5 + var2.nextInt(4) - var2.nextInt(4);
+			if(var1.getBlockId(var7, var4, var9) == 0 && (var1.getBlockMaterial(var7 - 1, var4 - 1, var9) == Material.water || var1.getBlockMaterial(var7 + 1, var4 - 1, var9) == Material.water || var1.getBlockMaterial(var7, var4 - 1, var9 - 1) == Material.water || var1.getBlockMaterial(var7, var4 - 1, var9 + 1) == Material.water)) {
+				int var10 = 2 + var2.nextInt(var2.nextInt(3) + 1);
+
+				for(int var11 = 0; var11 < var10; ++var11) {
+					if(Block.reed.canBlockStay(var1, var7, var8 + var11, var9)) {
+						var1.setBlock(var7, var8 + var11, var9, Block.blueReed.blockID);
+					}
+				}
+			}
+		}
+
+		return true;
+	}
+}
--- net/minecraft/src/WorldGenBigTree.java
+++ net/minecraft/src/WorldGenBigTree.java
@@ -25,99 +25,104 @@
 			this.height = this.heightLimit - 1;
 		}
 
-		int var1 = (int)(1.382D + Math.pow(this.leafDensity * (double)this.heightLimit / 13.0D, 2.0D));
-		if(var1 < 1) {
-			var1 = 1;
+		int i1 = (int)(1.382D + Math.pow(this.leafDensity * (double)this.heightLimit / 13.0D, 2.0D));
+		if(i1 < 1) {
+			i1 = 1;
 		}
 
-		int[][] var2 = new int[var1 * this.heightLimit][4];
-		int var3 = this.basePos[1] + this.heightLimit - this.leafDistanceLimit;
-		int var4 = 1;
-		int var5 = this.basePos[1] + this.height;
-		int var6 = var3 - this.basePos[1];
-		var2[0][0] = this.basePos[0];
-		var2[0][1] = var3;
-		var2[0][2] = this.basePos[2];
-		var2[0][3] = var5;
-		--var3;
+		int[][] i2 = new int[i1 * this.heightLimit][4];
+		int i3 = this.basePos[1] + this.heightLimit - this.leafDistanceLimit;
+		int i4 = 1;
+		int i5 = this.basePos[1] + this.height;
+		int i6 = i3 - this.basePos[1];
+		i2[0][0] = this.basePos[0];
+		i2[0][1] = i3;
+		i2[0][2] = this.basePos[2];
+		i2[0][3] = i5;
+		--i3;
 
 		while(true) {
-			while(var6 >= 0) {
-				int var7 = 0;
-				float var8 = this.layerSize(var6);
-				if(var8 < 0.0F) {
-					--var3;
-					--var6;
+			while(i6 >= 0) {
+				int i7 = 0;
+				float f8 = this.layerSize(i6);
+				if(f8 < 0.0F) {
+					--i3;
+					--i6;
 				} else {
-					for(double var9 = 0.5D; var7 < var1; ++var7) {
-						double var11 = this.scaleWidth * (double)var8 * ((double)this.rand.nextFloat() + 0.328D);
-						double var13 = (double)this.rand.nextFloat() * 2.0D * 3.14159D;
-						int var15 = (int)(var11 * Math.sin(var13) + (double)this.basePos[0] + var9);
-						int var16 = (int)(var11 * Math.cos(var13) + (double)this.basePos[2] + var9);
-						int[] var17 = new int[]{var15, var3, var16};
-						int[] var18 = new int[]{var15, var3 + this.leafDistanceLimit, var16};
-						if(this.checkBlockLine(var17, var18) == -1) {
-							int[] var19 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]};
-							double var20 = Math.sqrt(Math.pow((double)Math.abs(this.basePos[0] - var17[0]), 2.0D) + Math.pow((double)Math.abs(this.basePos[2] - var17[2]), 2.0D));
-							double var22 = var20 * this.branchSlope;
-							if((double)var17[1] - var22 > (double)var5) {
-								var19[1] = var5;
+					for(double d9 = 0.5D; i7 < i1; ++i7) {
+						double d11 = this.scaleWidth * (double)f8 * ((double)this.rand.nextFloat() + 0.328D);
+						double d13 = (double)this.rand.nextFloat() * 2.0D * 3.14159D;
+						int i15 = (int)(d11 * Math.sin(d13) + (double)this.basePos[0] + d9);
+						int i16 = (int)(d11 * Math.cos(d13) + (double)this.basePos[2] + d9);
+						int[] i17 = new int[]{i15, i3, i16};
+						int[] i18 = new int[]{i15, i3 + this.leafDistanceLimit, i16};
+						if(this.checkBlockLine(i17, i18) == -1) {
+							int[] i19 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]};
+							double d20 = Math.sqrt(Math.pow((double)Math.abs(this.basePos[0] - i17[0]), 2.0D) + Math.pow((double)Math.abs(this.basePos[2] - i17[2]), 2.0D));
+							double d22 = d20 * this.branchSlope;
+							if((double)i17[1] - d22 > (double)i5) {
+								i19[1] = i5;
 							} else {
-								var19[1] = (int)((double)var17[1] - var22);
+								i19[1] = (int)((double)i17[1] - d22);
 							}
 
-							if(this.checkBlockLine(var19, var17) == -1) {
-								var2[var4][0] = var15;
-								var2[var4][1] = var3;
-								var2[var4][2] = var16;
-								var2[var4][3] = var19[1];
-								++var4;
+							if(this.checkBlockLine(i19, i17) == -1) {
+								i2[i4][0] = i15;
+								i2[i4][1] = i3;
+								i2[i4][2] = i16;
+								i2[i4][3] = i19[1];
+								++i4;
 							}
 						}
 					}
 
-					--var3;
-					--var6;
+					--i3;
+					--i6;
 				}
 			}
 
-			this.leafNodes = new int[var4][4];
-			System.arraycopy(var2, 0, this.leafNodes, 0, var4);
+			this.leafNodes = new int[i4][4];
+			System.arraycopy(i2, 0, this.leafNodes, 0, i4);
 			return;
 		}
 	}
 
-	void genTreeLayer(int var1, int var2, int var3, float var4, byte var5, int var6) {
-		int var7 = (int)((double)var4 + 0.618D);
-		byte var8 = otherCoordPairs[var5];
-		byte var9 = otherCoordPairs[var5 + 3];
-		int[] var10 = new int[]{var1, var2, var3};
-		int[] var11 = new int[]{0, 0, 0};
-		int var12 = -var7;
-		int var13 = -var7;
+	void genTreeLayer(int i1, int i2, int i3, float f4, byte b5, int i6, boolean z7) {
+		int i8 = (int)((double)f4 + 0.618D);
+		byte b9 = otherCoordPairs[b5];
+		byte b10 = otherCoordPairs[b5 + 3];
+		int[] i11 = new int[]{i1, i2, i3};
+		int[] i12 = new int[]{0, 0, 0};
+		int i13 = -i8;
+		int i14 = -i8;
 
-		label32:
-		for(var11[var5] = var10[var5]; var12 <= var7; ++var12) {
-			var11[var8] = var10[var8] + var12;
-			var13 = -var7;
+		label44:
+		for(i12[b5] = i11[b5]; i13 <= i8; ++i13) {
+			i12[b9] = i11[b9] + i13;
+			int i15 = -i8;
 
 			while(true) {
 				while(true) {
-					if(var13 > var7) {
-						continue label32;
+					if(i15 > i8) {
+						continue label44;
 					}
 
-					double var15 = Math.sqrt(Math.pow((double)Math.abs(var12) + 0.5D, 2.0D) + Math.pow((double)Math.abs(var13) + 0.5D, 2.0D));
-					if(var15 > (double)var4) {
-						++var13;
+					double d16 = Math.sqrt(Math.pow((double)Math.abs(i13) + 0.5D, 2.0D) + Math.pow((double)Math.abs(i15) + 0.5D, 2.0D));
+					if(d16 > (double)f4) {
+						++i15;
 					} else {
-						var11[var9] = var10[var9] + var13;
-						int var14 = this.worldObj.getBlockId(var11[0], var11[1], var11[2]);
-						if(var14 != 0 && var14 != 18) {
-							++var13;
+						i12[b10] = i11[b10] + i15;
+						int i18 = this.worldObj.getBlockId(i12[0], i12[1], i12[2]);
+						if(i18 != 0 && i18 != 18) {
+							++i15;
 						} else {
-							this.worldObj.setBlock(var11[0], var11[1], var11[2], var6);
-							++var13;
+							if(i13 == 0 && i15 == 0 && z7) {
+								this.worldObj.setBlock(i12[0], i12[1], i12[2], 17);
+							} else {
+								this.worldObj.setBlock(i12[0], i12[1], i12[2], i6);
+							}
+
+							++i15;
 						}
 					}
 				}
@@ -126,211 +131,216 @@
 
 	}
 
-	float layerSize(int var1) {
-		if((double)var1 < (double)((float)this.heightLimit) * 0.3D) {
+	float layerSize(int i1) {
+		if((double)i1 < (double)((float)this.heightLimit) * 0.3D) {
 			return -1.618F;
 		} else {
-			float var2 = (float)this.heightLimit / 2.0F;
-			float var3 = (float)this.heightLimit / 2.0F - (float)var1;
-			float var4;
-			if(var3 == 0.0F) {
-				var4 = var2;
-			} else if(Math.abs(var3) >= var2) {
-				var4 = 0.0F;
-			} else {
-				var4 = (float)Math.sqrt(Math.pow((double)Math.abs(var2), 2.0D) - Math.pow((double)Math.abs(var3), 2.0D));
-			}
-
-			var4 *= 0.5F;
-			return var4;
-		}
-	}
-
-	float leafSize(int var1) {
-		return var1 >= 0 && var1 < this.leafDistanceLimit ? (var1 != 0 && var1 != this.leafDistanceLimit - 1 ? 3.0F : 2.0F) : -1.0F;
-	}
-
-	void generateLeafNode(int var1, int var2, int var3) {
-		int var4 = var2;
-
-		for(int var5 = var2 + this.leafDistanceLimit; var4 < var5; ++var4) {
-			float var6 = this.leafSize(var4 - var2);
-			this.genTreeLayer(var1, var4, var3, var6, (byte)1, 18);
-		}
-
-	}
-
-	void placeBlockLine(int[] var1, int[] var2, int var3) {
-		int[] var4 = new int[]{0, 0, 0};
-		byte var5 = 0;
-
-		byte var6;
-		for(var6 = 0; var5 < 3; ++var5) {
-			var4[var5] = var2[var5] - var1[var5];
-			if(Math.abs(var4[var5]) > Math.abs(var4[var6])) {
-				var6 = var5;
-			}
-		}
-
-		if(var4[var6] != 0) {
-			byte var7 = otherCoordPairs[var6];
-			byte var8 = otherCoordPairs[var6 + 3];
-			byte var9;
-			if(var4[var6] > 0) {
-				var9 = 1;
-			} else {
-				var9 = -1;
-			}
-
-			double var10 = (double)var4[var7] / (double)var4[var6];
-			double var12 = (double)var4[var8] / (double)var4[var6];
-			int[] var14 = new int[]{0, 0, 0};
-			int var15 = 0;
-
-			for(int var16 = var4[var6] + var9; var15 != var16; var15 += var9) {
-				var14[var6] = MathHelper.floor_double((double)(var1[var6] + var15) + 0.5D);
-				var14[var7] = MathHelper.floor_double((double)var1[var7] + (double)var15 * var10 + 0.5D);
-				var14[var8] = MathHelper.floor_double((double)var1[var8] + (double)var15 * var12 + 0.5D);
-				this.worldObj.setBlock(var14[0], var14[1], var14[2], var3);
+			float f2 = (float)this.heightLimit / 2.0F;
+			float f3 = (float)this.heightLimit / 2.0F - (float)i1;
+			float f4;
+			if(f3 == 0.0F) {
+				f4 = f2;
+			} else if(Math.abs(f3) >= f2) {
+				f4 = 0.0F;
+			} else {
+				f4 = (float)Math.sqrt(Math.pow((double)Math.abs(f2), 2.0D) - Math.pow((double)Math.abs(f3), 2.0D));
+			}
+
+			f4 *= 0.5F;
+			return f4;
+		}
+	}
+
+	float leafSize(int i1) {
+		return i1 >= 0 && i1 < this.leafDistanceLimit ? (i1 != 0 && i1 != this.leafDistanceLimit - 1 ? 3.0F : 2.0F) : -1.0F;
+	}
+
+	void generateLeafNode(int x, int y, int z) {
+		int i4 = y;
+
+		for(int i5 = y + this.leafDistanceLimit; i4 < i5; ++i4) {
+			float f6 = this.leafSize(i4 - y);
+			boolean z7 = false;
+			if(i4 - y == this.leafDistanceLimit / 2) {
+				z7 = true;
+			}
+
+			this.genTreeLayer(x, i4, z, f6, (byte)1, 18, z7);
+		}
+
+	}
+
+	void placeBlockLine(int[] i1, int[] i2, int i3) {
+		int[] i4 = new int[]{0, 0, 0};
+		byte b5 = 0;
+
+		byte b6;
+		for(b6 = 0; b5 < 3; ++b5) {
+			i4[b5] = i2[b5] - i1[b5];
+			if(Math.abs(i4[b5]) > Math.abs(i4[b6])) {
+				b6 = b5;
+			}
+		}
+
+		if(i4[b6] != 0) {
+			byte b7 = otherCoordPairs[b6];
+			byte b8 = otherCoordPairs[b6 + 3];
+			byte b9;
+			if(i4[b6] > 0) {
+				b9 = 1;
+			} else {
+				b9 = -1;
+			}
+
+			double d10 = (double)i4[b7] / (double)i4[b6];
+			double d12 = (double)i4[b8] / (double)i4[b6];
+			int[] i14 = new int[]{0, 0, 0};
+			int i15 = 0;
+
+			for(int i16 = i4[b6] + b9; i15 != i16; i15 += b9) {
+				i14[b6] = MathHelper.floor_double((double)(i1[b6] + i15) + 0.5D);
+				i14[b7] = MathHelper.floor_double((double)i1[b7] + (double)i15 * d10 + 0.5D);
+				i14[b8] = MathHelper.floor_double((double)i1[b8] + (double)i15 * d12 + 0.5D);
+				this.worldObj.setBlock(i14[0], i14[1], i14[2], i3);
 			}
 
 		}
 	}
 
 	void generateLeaves() {
-		int var1 = 0;
+		int i1 = 0;
 
-		for(int var2 = this.leafNodes.length; var1 < var2; ++var1) {
-			int var3 = this.leafNodes[var1][0];
-			int var4 = this.leafNodes[var1][1];
-			int var5 = this.leafNodes[var1][2];
-			this.generateLeafNode(var3, var4, var5);
+		for(int i2 = this.leafNodes.length; i1 < i2; ++i1) {
+			int i3 = this.leafNodes[i1][0];
+			int i4 = this.leafNodes[i1][1];
+			int i5 = this.leafNodes[i1][2];
+			this.generateLeafNode(i3, i4, i5);
 		}
 
 	}
 
-	boolean leafNodeNeedsBase(int var1) {
-		return (double)var1 >= (double)this.heightLimit * 0.2D;
+	boolean leafNodeNeedsBase(int i1) {
+		return (double)i1 >= (double)this.heightLimit * 0.2D;
 	}
 
 	void generateTrunk() {
-		int var1 = this.basePos[0];
-		int var2 = this.basePos[1];
-		int var3 = this.basePos[1] + this.height;
-		int var4 = this.basePos[2];
-		int[] var5 = new int[]{var1, var2, var4};
-		int[] var6 = new int[]{var1, var3, var4};
-		this.placeBlockLine(var5, var6, 17);
+		int i1 = this.basePos[0];
+		int i2 = this.basePos[1];
+		int i3 = this.basePos[1] + this.height;
+		int i4 = this.basePos[2];
+		int[] i5 = new int[]{i1, i2, i4};
+		int[] i6 = new int[]{i1, i3, i4};
+		this.placeBlockLine(i5, i6, 17);
 		if(this.trunkSize == 2) {
-			++var5[0];
-			++var6[0];
-			this.placeBlockLine(var5, var6, 17);
-			++var5[2];
-			++var6[2];
-			this.placeBlockLine(var5, var6, 17);
-			var5[0] += -1;
-			var6[0] += -1;
-			this.placeBlockLine(var5, var6, 17);
+			++i5[0];
+			++i6[0];
+			this.placeBlockLine(i5, i6, 17);
+			++i5[2];
+			++i6[2];
+			this.placeBlockLine(i5, i6, 17);
+			--i5[0];
+			--i6[0];
+			this.placeBlockLine(i5, i6, 17);
 		}
 
 	}
 
 	void generateLeafNodeBases() {
-		int var1 = 0;
-		int var2 = this.leafNodes.length;
+		int i1 = 0;
+		int i2 = this.leafNodes.length;
 
-		for(int[] var3 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]}; var1 < var2; ++var1) {
-			int[] var4 = this.leafNodes[var1];
-			int[] var5 = new int[]{var4[0], var4[1], var4[2]};
-			var3[1] = var4[3];
-			int var6 = var3[1] - this.basePos[1];
-			if(this.leafNodeNeedsBase(var6)) {
-				this.placeBlockLine(var3, var5, 17);
+		for(int[] i3 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]}; i1 < i2; ++i1) {
+			int[] i4 = this.leafNodes[i1];
+			int[] i5 = new int[]{i4[0], i4[1], i4[2]};
+			i3[1] = i4[3];
+			int i6 = i3[1] - this.basePos[1];
+			if(this.leafNodeNeedsBase(i6)) {
+				this.placeBlockLine(i3, i5, 17);
 			}
 		}
 
 	}
 
-	int checkBlockLine(int[] var1, int[] var2) {
-		int[] var3 = new int[]{0, 0, 0};
-		byte var4 = 0;
+	int checkBlockLine(int[] i1, int[] i2) {
+		int[] i3 = new int[]{0, 0, 0};
+		byte b4 = 0;
 
-		byte var5;
-		for(var5 = 0; var4 < 3; ++var4) {
-			var3[var4] = var2[var4] - var1[var4];
-			if(Math.abs(var3[var4]) > Math.abs(var3[var5])) {
-				var5 = var4;
+		byte b5;
+		for(b5 = 0; b4 < 3; ++b4) {
+			i3[b4] = i2[b4] - i1[b4];
+			if(Math.abs(i3[b4]) > Math.abs(i3[b5])) {
+				b5 = b4;
 			}
 		}
 
-		if(var3[var5] == 0) {
+		if(i3[b5] == 0) {
 			return -1;
 		} else {
-			byte var6 = otherCoordPairs[var5];
-			byte var7 = otherCoordPairs[var5 + 3];
-			byte var8;
-			if(var3[var5] > 0) {
-				var8 = 1;
+			byte b6 = otherCoordPairs[b5];
+			byte b7 = otherCoordPairs[b5 + 3];
+			byte b8;
+			if(i3[b5] > 0) {
+				b8 = 1;
 			} else {
-				var8 = -1;
+				b8 = -1;
 			}
 
-			double var9 = (double)var3[var6] / (double)var3[var5];
-			double var11 = (double)var3[var7] / (double)var3[var5];
-			int[] var13 = new int[]{0, 0, 0};
-			int var14 = 0;
+			double d9 = (double)i3[b6] / (double)i3[b5];
+			double d11 = (double)i3[b7] / (double)i3[b5];
+			int[] i13 = new int[]{0, 0, 0};
+			int i14 = 0;
 
-			int var15;
-			for(var15 = var3[var5] + var8; var14 != var15; var14 += var8) {
-				var13[var5] = var1[var5] + var14;
-				var13[var6] = (int)((double)var1[var6] + (double)var14 * var9);
-				var13[var7] = (int)((double)var1[var7] + (double)var14 * var11);
-				int var16 = this.worldObj.getBlockId(var13[0], var13[1], var13[2]);
-				if(var16 != 0 && var16 != 18) {
+			int i15;
+			for(i15 = i3[b5] + b8; i14 != i15; i14 += b8) {
+				i13[b5] = i1[b5] + i14;
+				i13[b6] = (int)((double)i1[b6] + (double)i14 * d9);
+				i13[b7] = (int)((double)i1[b7] + (double)i14 * d11);
+				int i16 = this.worldObj.getBlockId(i13[0], i13[1], i13[2]);
+				if(i16 != 0 && i16 != 18) {
 					break;
 				}
 			}
 
-			return var14 == var15 ? -1 : Math.abs(var14);
+			return i14 == i15 ? -1 : Math.abs(i14);
 		}
 	}
 
 	boolean validTreeLocation() {
-		int[] var1 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]};
-		int[] var2 = new int[]{this.basePos[0], this.basePos[1] + this.heightLimit - 1, this.basePos[2]};
-		int var3 = this.worldObj.getBlockId(this.basePos[0], this.basePos[1] - 1, this.basePos[2]);
-		if(var3 != 2 && var3 != 3) {
+		int[] i1 = new int[]{this.basePos[0], this.basePos[1], this.basePos[2]};
+		int[] i2 = new int[]{this.basePos[0], this.basePos[1] + this.heightLimit - 1, this.basePos[2]};
+		int i3 = this.worldObj.getBlockId(this.basePos[0], this.basePos[1] - 1, this.basePos[2]);
+		if(i3 != 2 && i3 != 3) {
 			return false;
 		} else {
-			int var4 = this.checkBlockLine(var1, var2);
-			if(var4 == -1) {
+			int i4 = this.checkBlockLine(i1, i2);
+			if(i4 == -1) {
 				return true;
-			} else if(var4 < 6) {
+			} else if(i4 < 6) {
 				return false;
 			} else {
-				this.heightLimit = var4;
+				this.heightLimit = i4;
 				return true;
 			}
 		}
 	}
 
-	public void setScale(double var1, double var3, double var5) {
-		this.heightLimitLimit = (int)(var1 * 12.0D);
-		if(var1 > 0.5D) {
+	public void setScale(double scaleX, double scaleY, double scaleZ) {
+		this.heightLimitLimit = (int)(scaleX * 12.0D);
+		if(scaleX > 0.5D) {
 			this.leafDistanceLimit = 5;
 		}
 
-		this.scaleWidth = var3;
-		this.leafDensity = var5;
+		this.scaleWidth = scaleY;
+		this.leafDensity = scaleZ;
 	}
 
-	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
-		this.worldObj = var1;
-		long var6 = var2.nextLong();
-		this.rand.setSeed(var6);
-		this.basePos[0] = var3;
-		this.basePos[1] = var4;
-		this.basePos[2] = var5;
+	public boolean generate(World world, Random rand, int x, int y, int z) {
+		this.worldObj = world;
+		long j6 = rand.nextLong();
+		this.rand.setSeed(j6);
+		this.basePos[0] = x;
+		this.basePos[1] = y;
+		this.basePos[2] = z;
 		if(this.heightLimit == 0) {
 			this.heightLimit = 5 + this.rand.nextInt(this.heightLimitLimit);
 		}
--- /dev/null
+++ net/minecraft/src/BlockBarrel.java
@@ -1,0 +1,84 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockBarrel extends BlockContainer {
+	private Random random = new Random();
+
+	protected BlockBarrel(int var1) {
+		super(var1, Material.wood);
+		this.blockIndexInTexture = 129;
+	}
+
+	public int getBlockTextureFromSide(int var1) {
+		return this.blockIndexInTexture + (var1 == 1 ? 1 : 0);
+	}
+	
+	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
+		TileEntityChest var5 = (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4);
+
+		for(int var6 = 0; var6 < var5.getSizeInventory(); ++var6) {
+			ItemStack var7 = var5.getStackInSlot(var6);
+			if(var7 != null) {
+				float var8 = this.random.nextFloat() * 0.8F + 0.1F;
+				float var9 = this.random.nextFloat() * 0.8F + 0.1F;
+				float var10 = this.random.nextFloat() * 0.8F + 0.1F;
+
+				while(var7.stackSize > 0) {
+					int var11 = this.random.nextInt(21) + 10;
+					if(var11 > var7.stackSize) {
+						var11 = var7.stackSize;
+					}
+
+					var7.stackSize -= var11;
+					EntityItem var12 = new EntityItem(var1, (double)((float)var2 + var8), (double)((float)var3 + var9), (double)((float)var4 + var10), new ItemStack(var7.itemID, var11, var7.itemDmg));
+					float var13 = 0.05F;
+					var12.motionX = (double)((float)this.random.nextGaussian() * var13);
+					var12.motionY = (double)((float)this.random.nextGaussian() * var13 + 0.2F);
+					var12.motionZ = (double)((float)this.random.nextGaussian() * var13);
+					var1.spawnEntityInWorld(var12);
+				}
+			}
+		}
+
+		super.onBlockRemoval(var1, var2, var3, var4);
+	}
+
+	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
+		Object var6 = (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4);
+		if(var1.isBlockNormalCube(var2, var3 + 1, var4)) {
+			return true;
+		} else if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID && var1.isBlockNormalCube(var2 - 1, var3 + 1, var4)) {
+			return true;
+		} else if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID && var1.isBlockNormalCube(var2 + 1, var3 + 1, var4)) {
+			return true;
+		} else if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID && var1.isBlockNormalCube(var2, var3 + 1, var4 - 1)) {
+			return true;
+		} else if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID && var1.isBlockNormalCube(var2, var3 + 1, var4 + 1)) {
+			return true;
+		} else {
+			if(var1.getBlockId(var2 - 1, var3, var4) == this.blockID) {
+				//var6 = new InventoryLargeChest("Large chest", (TileEntityChest)var1.getBlockTileEntity(var2 - 1, var3, var4), (IInventory)var6);
+			}
+
+			if(var1.getBlockId(var2 + 1, var3, var4) == this.blockID) {
+				//var6 = new InventoryLargeChest("Large chest", (IInventory)var6, (TileEntityChest)var1.getBlockTileEntity(var2 + 1, var3, var4));
+			}
+
+			if(var1.getBlockId(var2, var3, var4 - 1) == this.blockID) {
+				//var6 = new InventoryLargeChest("Large chest", (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4 - 1), (IInventory)var6);
+			}
+
+			if(var1.getBlockId(var2, var3, var4 + 1) == this.blockID) {
+				//var6 = new InventoryLargeChest("Large chest", (IInventory)var6, (TileEntityChest)var1.getBlockTileEntity(var2, var3, var4 + 1));
+			}
+
+			var5.displayGUIChest((IInventory)var6);
+			return true;
+		}
+	}
+
+	protected TileEntity getBlockEntity() {
+		return new TileEntityChest();
+	}
+}
--- /dev/null
+++ net/minecraft/src/BlockDeepslate.java
@@ -1,0 +1,13 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class BlockDeepslate extends Block {
+	public BlockDeepslate(int var1, int var2) {
+		super(var1, var2, Material.rock);
+	}
+
+	public int idDropped(int var1, Random var2) {
+		return Block.deepslate.blockID;
+	}
+}
--- net/minecraft/src/ItemAxe.java
+++ net/minecraft/src/ItemAxe.java
@@ -1,7 +1,12 @@
 package net.minecraft.src;
 
 public class ItemAxe extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.planks, Block.bookshelf, Block.wood, Block.chest};
+	private static Block[] blocksEffectiveAgainst = new Block[]{Block.planks, Block.planksGreen, Block.planksBlack, Block.planksBlue, Block.planksLightBlue, 
+	Block.planksLime, Block.planksBrown, Block.planksOrange, Block.planksRed, Block.planksWhite, Block.planksPink, Block.planksYellow, Block.planksPurple, 
+	Block.planks, Block.doorWood, Block.workbench, Block.fence, Block.jukebox, Block.ladder, Block.stairCompactWood, Block.pressurePlateWood, Block.bookshelf, 
+	Block.wood, Block.chest, Block.stairCompactWoodGreen, Block.stairCompactWoodBlack, Block.stairCompactWoodBlue, Block.stairCompactWoodBlue, Block.stairCompactWoodLime, 
+	Block.stairCompactWoodBrown, Block.stairCompactWoodOrange, Block.stairCompactWoodRed, Block.stairCompactWoodWhite, Block.stairCompactWoodPink, Block.stairCompactWoodYellow, 
+	Block.stairCompactWoodPurple, Block.torchBlock, Block.leaves, Block.Ukraine, Block.railLadder, Block.nonfunctionalchest, Block.barrel};
 
 	public ItemAxe(int var1, int var2) {
 		super(var1, 3, var2, blocksEffectiveAgainst);
--- net/minecraft/src/BlockBookshelf.java
+++ net/minecraft/src/BlockBookshelf.java
@@ -12,6 +12,6 @@
 	}
 
 	public int quantityDropped(Random var1) {
-		return 0;
+		return 1;
 	}
 }
--- net/minecraft/src/ItemPickaxe.java
+++ net/minecraft/src/ItemPickaxe.java
@@ -1,7 +1,11 @@
 package net.minecraft.src;
 
 public class ItemPickaxe extends ItemTool {
-	private static Block[] blocksEffectiveAgainst = new Block[]{Block.cobblestone, Block.stairDouble, Block.stairSingle, Block.stone, Block.cobblestoneMossy, Block.oreIron, Block.blockSteel, Block.oreCoal, Block.blockGold, Block.oreGold, Block.oreDiamond, Block.blockDiamond, Block.ice};
+	private static Block[] blocksEffectiveAgainst = new Block[]{Block.cobblestone, Block.stairDouble, Block.stairSingle, Block.stairCompactStone, Block.stone, 
+	Block.cobblestoneMossy, Block.oreIron, Block.blockSteel, Block.oreCoal, Block.blockGold, Block.oreGold, Block.oreDiamond, Block.blockDiamond, Block.ice, Block.brick, 
+	Block.obsidian, Block.minecartTrack, Block.lever, Block.stoneOvenIdle, Block.pressurePlateStone, Block.doorSteel, Block.oreRedstone, Block.oreRedstoneGlowing, Block.stoneBricks, Block.stoneSmooth, Block.oreCooper2723, Block.oreTitanium, Block.blockCooper, Block.blockCooperBlue, Block.blueBrick, Block.mason1, Block.mason2, Block.mason3, Block.mason4, Block.sandstone, Block.blockOre, Block.blockTitanium,
+	Block.button, Block.stairCompactstoneSmooth, Block.stairCompactstoneBricks, Block.deepslate, Block.stairCompactDeepslate, Block.stairCompactSandstone, Block.stairCompactBlueBrick,
+	Block.redstoneBlock, Block.smoothdeepslate, Block.blockFurnace, Block.blockCoal, Block.stairCompactCooper, Block.stairCompactCooperBlue, Block.stairCompactFurnace};
 	private int harvestLevel;
 
 	public ItemPickaxe(int var1, int var2) {
@@ -10,6 +14,6 @@
 	}
 
 	public boolean canHarvestBlock(Block var1) {
-		return var1 == Block.obsidian ? this.harvestLevel == 3 : (var1 != Block.blockDiamond && var1 != Block.oreDiamond ? (var1 != Block.blockGold && var1 != Block.oreGold ? (var1 != Block.blockSteel && var1 != Block.oreIron ? (var1 != Block.oreRedstone && var1 != Block.oreRedstoneGlowing ? (var1.material == Material.rock ? true : var1.material == Material.iron) : this.harvestLevel >= 2) : this.harvestLevel >= 1) : this.harvestLevel >= 2) : this.harvestLevel >= 2);
+		return var1 == Block.obsidian? this.harvestLevel == 3 : (var1 != Block.blockDiamond && var1 != Block.oreDiamond ? (var1 != Block.blockGold && var1 != Block.oreGold ? (var1 != Block.blockSteel && var1 != Block.oreIron ? (var1 != Block.oreRedstone && var1 != Block.oreRedstoneGlowing ? (var1.material == Material.rock ? true : var1.material == Material.iron) : this.harvestLevel >= 2) : this.harvestLevel >= 1) : this.harvestLevel >= 2) : this.harvestLevel >= 2);
 	}
 }
--- /dev/null
+++ net/minecraft/src/WorldGenPinkClay.java
@@ -1,0 +1,53 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenPinkClay extends WorldGenerator {
+	private int clayBlockId = Block.blockPinkClay.blockID;
+	private int numberOfBlocks;
+
+	public WorldGenPinkClay(int var1) {
+		this.numberOfBlocks = var1;
+	}
+
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		if(var1.getBlockMaterial(var3, var4, var5) != Material.water) {
+			return false;
+		} else {
+			float var6 = var2.nextFloat() * (float)Math.PI;
+			double var7 = (double)((float)(var3 + 8) + MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
+			double var9 = (double)((float)(var3 + 8) - MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
+			double var11 = (double)((float)(var5 + 8) + MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
+			double var13 = (double)((float)(var5 + 8) - MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
+			double var15 = (double)(var4 + var2.nextInt(3) + 2);
+			double var17 = (double)(var4 + var2.nextInt(3) + 2);
+
+			for(int var19 = 0; var19 <= this.numberOfBlocks; ++var19) {
+				double var20 = var7 + (var9 - var7) * (double)var19 / (double)this.numberOfBlocks;
+				double var22 = var15 + (var17 - var15) * (double)var19 / (double)this.numberOfBlocks;
+				double var24 = var11 + (var13 - var11) * (double)var19 / (double)this.numberOfBlocks;
+				double var26 = var2.nextDouble() * (double)this.numberOfBlocks / 16.0D;
+				double var28 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * var26 + 1.0D;
+				double var30 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * var26 + 1.0D;
+
+				for(int var32 = (int)(var20 - var28 / 2.0D); var32 <= (int)(var20 + var28 / 2.0D); ++var32) {
+					for(int var33 = (int)(var22 - var30 / 2.0D); var33 <= (int)(var22 + var30 / 2.0D); ++var33) {
+						for(int var34 = (int)(var24 - var28 / 2.0D); var34 <= (int)(var24 + var28 / 2.0D); ++var34) {
+							double var35 = ((double)var32 + 0.5D - var20) / (var28 / 2.0D);
+							double var37 = ((double)var33 + 0.5D - var22) / (var30 / 2.0D);
+							double var39 = ((double)var34 + 0.5D - var24) / (var28 / 2.0D);
+							if(var35 * var35 + var37 * var37 + var39 * var39 < 1.0D) {
+								int var41 = var1.getBlockId(var32, var33, var34);
+								if(var41 == Block.sand.blockID) {
+									var1.setBlock(var32, var33, var34, this.clayBlockId);
+								}
+							}
+						}
+					}
+				}
+			}
+
+			return true;
+		}
+	}
+}
--- net/minecraft/src/Block.java
+++ net/minecraft/src/Block.java
@@ -24,9 +24,23 @@
 	public static final BlockGrass grass = (BlockGrass)(new BlockGrass(2)).setHardness(0.6F).setStepSound(soundGrassFootstep);
 	public static final Block dirt = (new BlockDirt(3, 2)).setHardness(0.5F).setStepSound(soundGravelFootstep);
 	public static final Block cobblestone = (new Block(4, 16, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block stoneBricks = (new Block(98, 120, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block stoneSmooth = (new Block(99, 6, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
 	public static final Block planks = (new Block(5, 4, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep);
+	public static final Block planksGreen = (new Block(86, 102, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundWoodFootstep);
+	public static final Block planksBlack = (new Block(87, 103, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundWoodFootstep);
+	public static final Block planksBlue = (new Block(88, 104, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundWoodFootstep);
+	public static final Block planksLightBlue = (new Block(89, 105, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundWoodFootstep);
+	public static final Block planksLime = (new Block(90, 106, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundWoodFootstep);
+	public static final Block planksBrown = (new Block(91, 107, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundWoodFootstep);
+	public static final Block planksOrange = (new Block(92, 108, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundWoodFootstep);
+	public static final Block planksRed = (new Block(93, 109, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundWoodFootstep);
+	public static final Block planksWhite = (new Block(94, 110, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundWoodFootstep);
+	public static final Block planksPink = (new Block(95, 111, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundWoodFootstep);
+	public static final Block planksYellow = (new Block(96, 118, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundWoodFootstep);
+	public static final Block planksPurple = (new Block(97, 119, Material.wood)).setHardness(2.0F).setResistance(5.0F).setStepSound(Block.soundWoodFootstep);
 	public static final Block sapling = (new BlockSapling(6, 15)).setHardness(0.0F).setStepSound(soundGrassFootstep);
-	public static final Block bedrock = (new Block(7, 17, Material.rock)).setHardness(-1.0F).setResistance(6000000.0F).setStepSound(soundStoneFootstep);
+	public static final Block bedrock = (new Block(7, 17, Material.rock)).setHardness(30.0F).setResistance(6000000.0F).setStepSound(soundStoneFootstep);
 	public static final Block waterMoving = (new BlockFlowing(8, Material.water)).setHardness(100.0F).setLightOpacity(3);
 	public static final Block waterStill = (new BlockStationary(9, Material.water)).setHardness(100.0F).setLightOpacity(3);
 	public static final Block lavaMoving = (new BlockFlowing(10, Material.lava)).setHardness(0.0F).setLightValue(1.0F).setLightOpacity(255);
@@ -36,26 +50,13 @@
 	public static final Block oreGold = (new BlockOre(14, 32)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
 	public static final Block oreIron = (new BlockOre(15, 33)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
 	public static final Block oreCoal = (new BlockOre(16, 34)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+        public static final Block oreCooper2723 = (new BlockOre(126, 124)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
+        public static final Block oreTitanium = (new BlockOre(127, 125)).setHardness(6.0F).setResistance(100000.0F).setStepSound(soundStoneFootstep);
 	public static final Block wood = (new BlockLog(17)).setHardness(2.0F).setStepSound(soundWoodFootstep);
 	public static final BlockLeaves leaves = (BlockLeaves)(new BlockLeaves(18, 52)).setHardness(0.2F).setLightOpacity(1).setStepSound(soundGrassFootstep);
 	public static final Block sponge = (new BlockSponge(19)).setHardness(0.6F).setStepSound(soundGrassFootstep);
 	public static final Block glass = (new BlockGlass(20, 49, Material.glass, false)).setHardness(0.3F).setStepSound(soundGlassFootstep);
-	public static final Block clothRed = null;
-	public static final Block clothOrange = null;
-	public static final Block clothYellow = null;
-	public static final Block clothChartreuse = null;
-	public static final Block clothGreen = null;
-	public static final Block clothSpringGreen = null;
-	public static final Block clothCyan = null;
-	public static final Block clothCapri = null;
-	public static final Block clothUltramarine = null;
-	public static final Block clothViolet = null;
-	public static final Block clothPurple = null;
-	public static final Block clothMagenta = null;
-	public static final Block clothRose = null;
-	public static final Block clothDarkGray = null;
 	public static final Block cloth = (new Block(35, 64, Material.cloth)).setHardness(0.8F).setStepSound(soundClothFootstep);
-	public static final Block clothWhite = null;
 	public static final BlockFlower plantYellow = (BlockFlower)(new BlockFlower(37, 13)).setHardness(0.0F).setStepSound(soundGrassFootstep);
 	public static final BlockFlower plantRed = (BlockFlower)(new BlockFlower(38, 12)).setHardness(0.0F).setStepSound(soundGrassFootstep);
 	public static final BlockFlower mushroomBrown = (BlockFlower)(new BlockMushroom(39, 29)).setHardness(0.0F).setStepSound(soundGrassFootstep).setLightValue(2.0F / 16.0F);
@@ -74,6 +75,7 @@
 	public static final Block mobSpawner = (new BlockMobSpawner(52, 65)).setHardness(5.0F).setStepSound(soundMetalFootstep);
 	public static final Block stairCompactWood = new BlockStairs(53, planks);
 	public static final Block chest = (new BlockChest(54)).setHardness(2.5F).setStepSound(soundWoodFootstep);
+	public static final Block barrel = (new BlockBarrel(129)).setHardness(2.5F).setStepSound(soundWoodFootstep);
 	public static final Block redstoneWire = (new BlockRedstoneWire(55, 84)).setHardness(0.0F).setStepSound(soundPowderFootstep);
 	public static final Block oreDiamond = (new BlockOre(56, 50)).setHardness(3.0F).setResistance(5.0F).setStepSound(soundStoneFootstep);
 	public static final Block blockDiamond = (new BlockOreBlock(57, 40)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
@@ -105,6 +107,50 @@
 	public static final Block reed = (new BlockReed(83, 73)).setHardness(0.0F).setStepSound(soundGrassFootstep);
 	public static final Block jukebox = (new BlockJukeBox(84, 74)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
 	public static final Block fence = (new BlockFence(85, 4)).setHardness(2.0F).setResistance(5.0F).setStepSound(soundWoodFootstep);
+	public static final Block stairCompactBrick = new BlockStairs(100, brick);
+	public static final Block stairCompactstoneSmooth = new BlockStairs(114, stoneSmooth);
+	public static final Block stairCompactstoneBricks = new BlockStairs(113, stoneBricks);
+	public static final Block stairCompactWoodGreen = new BlockStairs(101, planksGreen);
+	public static final Block stairCompactWoodBlack = new BlockStairs(102, planksBlack);
+	public static final Block stairCompactWoodBlue = new BlockStairs(103, planksBlue);
+	public static final Block stairCompactWoodLightBlue = new BlockStairs(104, planksLightBlue);
+	public static final Block stairCompactWoodLime = new BlockStairs(105, planksLime);
+	public static final Block stairCompactWoodBrown = new BlockStairs(106, planksBrown);
+	public static final Block stairCompactWoodOrange = new BlockStairs(107, planksOrange);
+	public static final Block stairCompactWoodRed = new BlockStairs(108, planksRed);
+	public static final Block stairCompactWoodWhite = new BlockStairs(109, planksWhite);
+	public static final Block stairCompactWoodPink = new BlockStairs(110, planksPink);
+	public static final Block stairCompactWoodYellow = new BlockStairs(111, planksYellow);
+	public static final Block stairCompactWoodPurple = new BlockStairs(112, planksPurple);
+	public static final Block torchBlock = (new Block(121, 48, Material.wood)).setHardness(2.0F).setLightValue(15.0F / 16.0F).setStepSound(soundWoodFootstep);
+	public static final Block deepslate = (new Block(122, 122, Material.rock)).setHardness(8.0F).setResistance(40.0F).setStepSound(soundStoneFootstep);
+        public static final Block smoothdeepslate = (new BlockDeepslate(125, 123)).setHardness(8.0F).setResistance(40.0F).setStepSound(soundStoneFootstep);
+	public static final Block redstoneBlock = (new BlockRedstone(124, 121)).setHardness(1.5F).setResistance(10.0F).setStepSound(soundStoneFootstep);  
+	public static final Block stairCompactDeepslate = new BlockStairs(123, deepslate);
+	public static final Block nonfunctionalchest = (new BlockNonFunctionalChest(128)).setHardness(2.5F).setStepSound(soundWoodFootstep);
+	public static final Block blockCooper = (new BlockOreBlock(130, 46)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
+        public static final Block blockCooperBlue = (new BlockOreBlock(131, 163)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundMetalFootstep);
+        public static final Block blockCoal = (new Block(132, 113, Material.rock)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block railLadder = (new BlockLadder(133, 114)).setHardness(0.4F).setStepSound(soundMetalFootstep);
+	public static final Block blockFurnace = (new Block(134, 126, Material.rock)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block Ukraine = (new BlockOreBlock(135, 143)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundWoodFootstep);
+	public static final Block blockTitanium = (new BlockOreBlock(136, 161)).setHardness(5.0F).setResistance(100000000000.0F).setStepSound(soundMetalFootstep);
+	public static final Block blockOre = (new BlockOreBlock(137, 162)).setHardness(5.0F).setResistance(10000000000.0F).setStepSound(soundMetalFootstep);
+	public static final Block sandstone = (new BlockOreBlock(138, 160)).setHardness(5.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+        public static final Block mason1 = (new Block(139, 76, Material.rock)).setHardness(35.0F).setResistance(10000000.0F).setStepSound(soundMetalFootstep);
+	public static final Block mason2 = (new Block(140, 77, Material.rock)).setHardness(35.0F).setResistance(10000000.0F).setStepSound(soundMetalFootstep);
+	public static final Block mason3 = (new Block(141, 78, Material.rock)).setHardness(35.0F).setResistance(10000000.0F).setStepSound(soundMetalFootstep);
+	public static final Block mason4 = (new Block(142, 79, Material.rock)).setHardness(35.0F).setResistance(10000000.0F).setStepSound(soundMetalFootstep);
+	public static final Block moss = (new Block(143, 14, Material.wood)).setHardness(0.6F).setStepSound(soundGrassFootstep);
+	public static final Block blockPinkClay = (new BlockClay(144, 116)).setHardness(0.6F).setStepSound(soundGravelFootstep);
+	public static final Block blueBrick = (new Block(145, 131, Material.rock)).setHardness(2.0F).setResistance(10.0F).setStepSound(soundStoneFootstep);
+	public static final Block blueReed = (new BlockReedBlu(146, 117)).setHardness(0.0F).setStepSound(soundGrassFootstep);
+	public static final Block stairCompactCooper = new BlockStairs(147, blockCooper);
+	public static final Block stairCompactCooperBlue = new BlockStairs(148, blockCooperBlue);
+	public static final Block stairCompactFurnace = new BlockStairs(149, blockFurnace);
+	public static final Block stairCompactSandstone = new BlockStairs(150, sandstone);
+	public static final Block stairCompactBlueBrick = new BlockStairs(151, blueBrick);
+
 	public int blockIndexInTexture;
 	public final int blockID;
 	protected float hardness;
--- net/minecraft/src/BlockLeaves.java
+++ net/minecraft/src/BlockLeaves.java
@@ -1,103 +1,133 @@
 package net.minecraft.src;
 
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.LinkedList;
 import java.util.Random;
 
 public class BlockLeaves extends BlockLeavesBase {
-	private int leafTexIndex;
+	private int baseIndexInPNG;
 	private int decayCounter = 0;
 
-	protected BlockLeaves(int var1, int var2) {
-		super(var1, var2, Material.leaves, false);
-		this.leafTexIndex = var2;
+	protected BlockLeaves(int id, int blockIndex) {
+		super(id, blockIndex, Material.leaves, false);
+		this.baseIndexInPNG = blockIndex;
 		this.setTickOnLoad(true);
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
+	public void onNeighborBlockChange(World world, int x, int y, int z, int flag) {
 		this.decayCounter = 0;
-		this.updateCurrentLeaves(var1, var2, var3, var4);
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
+		this.updateCurrentLeaves(world, x, y, z);
+		super.onNeighborBlockChange(world, x, y, z, flag);
 	}
 
-	public void updateConnectedLeaves(World var1, int var2, int var3, int var4, int var5) {
-		if(var1.getBlockId(var2, var3, var4) == this.blockID) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if(var6 != 0 && var6 == var5 - 1) {
-				this.updateCurrentLeaves(var1, var2, var3, var4);
+	public void updateConnectedLeaves(World world, int x, int y, int z, int i5) {
+		if(world.getBlockId(x, y, z) == this.blockID) {
+			int i6 = world.getBlockMetadata(x, y, z);
+			if(i6 != 0 && i6 == i5 - 1) {
+				this.updateCurrentLeaves(world, x, y, z);
 			}
 		}
 	}
 
-	public void updateCurrentLeaves(World var1, int var2, int var3, int var4) {
+	public void updateCurrentLeaves(World world, int x, int y, int z) {
 		if(this.decayCounter++ < 100) {
-			int var5 = var1.getBlockMaterial(var2, var3 - 1, var4).isSolid() ? 16 : 0;
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if(var6 == 0) {
-				var6 = 1;
-				var1.setBlockMetadataWithNotify(var2, var3, var4, 1);
-			}
-
-			var5 = this.getConnectionStrength(var1, var2, var3 - 1, var4, var5);
-			var5 = this.getConnectionStrength(var1, var2, var3, var4 - 1, var5);
-			var5 = this.getConnectionStrength(var1, var2, var3, var4 + 1, var5);
-			var5 = this.getConnectionStrength(var1, var2 - 1, var3, var4, var5);
-			var5 = this.getConnectionStrength(var1, var2 + 1, var3, var4, var5);
-			int var7 = var5 - 1;
-			if(var7 < 10) {
-				var7 = 1;
-			}
-
-			if(var7 != var6) {
-				var1.setBlockMetadataWithNotify(var2, var3, var4, var7);
-				this.updateConnectedLeaves(var1, var2, var3 - 1, var4, var6);
-				this.updateConnectedLeaves(var1, var2, var3 + 1, var4, var6);
-				this.updateConnectedLeaves(var1, var2, var3, var4 - 1, var6);
-				this.updateConnectedLeaves(var1, var2, var3, var4 + 1, var6);
-				this.updateConnectedLeaves(var1, var2 - 1, var3, var4, var6);
-				this.updateConnectedLeaves(var1, var2 + 1, var3, var4, var6);
-			}
-
-		}
-	}
-
-	private int getConnectionStrength(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockId(var2, var3, var4);
-		if(var6 == Block.wood.blockID) {
+			if(world.getBlockMetadata(x, y, z) != 1) {
+				int[] i5 = new int[]{x, y, z};
+				LinkedList linkedList6 = new LinkedList();
+				linkedList6.add(i5);
+				if(!this.leafToWoodConnection(world, 4, new HashSet(), linkedList6)) {
+					world.setBlockMetadata(x, y, z, 1);
+				}
+
+			}
+		}
+	}
+
+	private boolean leafToWoodConnection(World world, int i2, HashSet hashSet, LinkedList linkedList) {
+		if(i2 >= 1 && linkedList != null && linkedList.size() != 0) {
+			LinkedList linkedList5 = new LinkedList();
+			Iterator iterator6 = linkedList.iterator();
+
+			while(iterator6.hasNext()) {
+				int[] i7 = (int[])iterator6.next();
+				hashSet.add(i7);
+				LinkedList linkedList8 = new LinkedList();
+				int[][] i9 = new int[][]{{i7[0] - 1, i7[1], i7[2]}, {i7[0] + 1, i7[1], i7[2]}, {i7[0], i7[1] - 1, i7[2]}, {i7[0], i7[1] + 1, i7[2]}, {i7[0], i7[1], i7[2] - 1}, {i7[0], i7[1], i7[2] + 1}};
+				int[][] i10 = i9;
+				int i11 = i9.length;
+
+				int i12;
+				for(i12 = 0; i12 < i11; ++i12) {
+					int[] i13 = i10[i12];
+					linkedList8.add(i13);
+				}
+
+				Iterator iterator14 = linkedList8.iterator();
+
+				while(iterator14.hasNext()) {
+					int[] i15 = (int[])iterator14.next();
+					if(!hashSet.contains(i15)) {
+						hashSet.add(i15);
+						i12 = world.getBlockId(i15[0], i15[1], i15[2]);
+						if(i12 == 17) {
+							return true;
+						}
+
+						if(i12 == 18) {
+							linkedList5.add(i15);
+						} else if(world.getBlockMaterial(i15[0], i15[1], i15[2]).isSolid()) {
+							return true;
+						}
+					}
+				}
+			}
+
+			return this.leafToWoodConnection(world, i2 - 1, hashSet, linkedList5);
+		} else {
+			return false;
+		}
+	}
+
+	private int getConnectionStrength(World world, int x, int y, int z, int i5) {
+		int i6 = world.getBlockId(x, y, z);
+		if(i6 == Block.wood.blockID) {
 			return 16;
 		} else {
-			if(var6 == this.blockID) {
-				int var7 = var1.getBlockMetadata(var2, var3, var4);
-				if(var7 != 0 && var7 > var5) {
-					return var7;
+			if(i6 == this.blockID) {
+				int i7 = world.getBlockMetadata(x, y, z);
+				if(i7 != 0 && i7 > i5) {
+					return i7;
 				}
 			}
 
-			return var5;
+			return i5;
 		}
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if(var6 == 0) {
+	public void updateTick(World world, int x, int y, int z, Random random) {
+		int i6 = world.getBlockMetadata(x, y, z);
+		if(i6 == 0) {
 			this.decayCounter = 0;
-			this.updateCurrentLeaves(var1, var2, var3, var4);
-		} else if(var6 == 1) {
-			this.removeLeaves(var1, var2, var3, var4);
-		} else if(var5.nextInt(10) == 0) {
-			this.updateCurrentLeaves(var1, var2, var3, var4);
+			this.updateCurrentLeaves(world, x, y, z);
+		} else if(i6 == 1) {
+			this.removeLeaves(world, x, y, z);
+		} else if(random.nextInt(10) == 0) {
+			this.updateCurrentLeaves(world, x, y, z);
 		}
 
 	}
 
-	private void removeLeaves(World var1, int var2, int var3, int var4) {
-		this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-		var1.setBlockWithNotify(var2, var3, var4, 0);
-	}
-
-	public int quantityDropped(Random var1) {
-		return var1.nextInt(20) == 0 ? 1 : 0;
-	}
-
-	public int idDropped(int var1, Random var2) {
+	private void removeLeaves(World world, int x, int y, int z) {
+		this.dropBlockAsItem(world, x, y, z, world.getBlockMetadata(x, y, z));
+		world.setBlockWithNotify(x, y, z, 0);
+	}
+
+	public int quantityDropped(Random random) {
+		return random.nextInt(20) == 0 ? 1 : 0;
+	}
+
+	public int idDropped(int count, Random random) {
 		return Block.sapling.blockID;
 	}
 
@@ -105,12 +135,12 @@
 		return !this.graphicsLevel;
 	}
 
-	public void setGraphicsLevel(boolean var1) {
-		this.graphicsLevel = var1;
-		this.blockIndexInTexture = this.leafTexIndex + (var1 ? 0 : 1);
+	public void setGraphicsLevel(boolean z1) {
+		this.graphicsLevel = z1;
+		this.blockIndexInTexture = this.baseIndexInPNG + (z1 ? 0 : 1);
 	}
 
-	public void onEntityWalking(World var1, int var2, int var3, int var4, Entity var5) {
-		super.onEntityWalking(var1, var2, var3, var4, var5);
+	public void onEntityWalking(World world, int x, int y, int z, Entity entity) {
+		super.onEntityWalking(world, x, y, z, entity);
 	}
 }
--- net/minecraft/src/Item.java
+++ net/minecraft/src/Item.java
@@ -20,6 +20,8 @@
 	public static Item swordWood = (new ItemSword(12, 0)).setIconIndex(64);
 	public static Item shovelWood = (new ItemSpade(13, 0)).setIconIndex(80);
 	public static Item pickaxeWood = (new ItemPickaxe(14, 0)).setIconIndex(96);
+        public static Item pickaxeBedrock = (new ItemPickaxe(104, 48)).setIconIndex(96);
+
 	public static Item axeWood = (new ItemAxe(15, 0)).setIconIndex(112);
 	public static Item swordStone = (new ItemSword(16, 1)).setIconIndex(65);
 	public static Item shovelStone = (new ItemSpade(17, 1)).setIconIndex(81);
@@ -88,16 +90,54 @@
 	public static Item brick = (new Item(80)).setIconIndex(22);
 	public static Item clay = (new Item(81)).setIconIndex(57);
 	public static Item reed = (new ItemReed(82, Block.reed)).setIconIndex(27);
+	
 	public static Item paper = (new Item(83)).setIconIndex(58);
 	public static Item book = (new Item(84)).setIconIndex(59);
 	public static Item slimeBall = (new Item(85)).setIconIndex(30);
 	public static Item minecartBox = (new ItemMinecart(86, 1)).setIconIndex(151);
 	public static Item minecartEngine = (new ItemMinecart(87, 2)).setIconIndex(167);
+        public static Item eggCooked = (new ItemFood(103, 8)).setIconIndex(91);
 	public static Item egg = (new Item(88)).setIconIndex(12);
 	public static Item compass = (new Item(89)).setIconIndex(54);
 	public static Item fishingRod = (new Item(90)).setIconIndex(69);
+	public static Item greenDye = (new Item(91)).setIconIndex(110);
+	public static Item blueDye = (new Item(92)).setIconIndex(142);
+	public static Item blueLightDye = (new Item(93)).setIconIndex(143);
+	public static Item limeDye = (new Item(94)).setIconIndex(111);
+	public static Item brownDye = (new Item(95)).setIconIndex(126);
+	public static Item orangeDye = (new Item(96)).setIconIndex(175);
+	public static Item redDye = (new Item(97)).setIconIndex(94);
+	public static Item whiteDye = (new Item(98)).setIconIndex(191);
+	public static Item pinkDye = (new Item(99)).setIconIndex(95);
+	public static Item yellowDye = (new Item(100)).setIconIndex(127);
+	public static Item purpleDye = (new Item(101)).setIconIndex(159);
+	public static Item blackDye = (new Item(102)).setIconIndex(78);
+	public static Item stupidBucket = (new ItemSword(105, 100)).setIconIndex(61);
 	public static Item record13 = (new ItemRecord(2000, "13")).setIconIndex(240);
 	public static Item recordCat = (new ItemRecord(2001, "cat")).setIconIndex(241);
+	public static Item bed = (new Item(106)).setIconIndex(45);
+        public static Item compressedBed = (new Item(107)).setIconIndex(46);
+        public static Item compressedCompressedBed = (new Item(108)).setIconIndex(62);
+        public static Item compressedCompressedCompressedBed = (new Item(109)).setIconIndex(107);
+        public static Item ingotCooper = (new Item(110)).setIconIndex(108);
+	public static Item ingotTitanium = (new Item(116)).setIconIndex(105);
+	public static Item ingotOre = (new Item(117)).setIconIndex(106);
+
+        public static Item pickaxeCooper = (new ItemPickaxe(111, 2)).setIconIndex(176);
+        public static Item axeCooper = (new ItemAxe(112, 2)).setIconIndex(192);
+        public static Item hoeCooper = (new ItemHoe(113, 2)).setIconIndex(208);
+	public static Item swordCooper = (new ItemSword(114, 2)).setIconIndex(144);
+	public static Item shovelCooper = (new ItemSpade(115, 2)).setIconIndex(160);
+
+        public static Item pickaxeOre = (new ItemPickaxe(118, 22)).setIconIndex(177);
+        public static Item axeOre = (new ItemAxe(119, 22)).setIconIndex(193);
+        public static Item hoeOre = (new ItemHoe(120, 4)).setIconIndex(209);
+	public static Item swordOre = (new ItemSword(121, 7)).setIconIndex(145);
+	public static Item shovelOre = (new ItemSpade(122, 10)).setIconIndex(161);
+	public static Item blueReed = (new ItemReed(123, Block.blueReed)).setIconIndex(109);
+	public static Item poison = (new ItemFood(124, -10)).setIconIndex(101);
+
+
 	public final int shiftedIndex;
 	protected int maxStackSize = 64;
 	protected int maxDamage = 32;
--- /dev/null
+++ net/minecraft/src/BlockRedstone.java
@@ -1,0 +1,196 @@
+package net.minecraft.src;
+
+public class BlockRedstone extends Block {
+	protected BlockRedstone(int var1, int var2) {
+		super(var1, var2, Material.circuits);
+	}
+
+	//public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	//	return null;
+	//}
+
+	public boolean isOpaqueCube() {
+		return false;
+	}
+
+	//public boolean renderAsNormalBlock() {
+	//	return false;
+	//}
+
+	//public int getRenderType() {
+	//	return 12;
+	//}
+
+	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
+		return var1.isBlockNormalCube(var2 - 1, var3, var4) ? true : (var1.isBlockNormalCube(var2 + 1, var3, var4) ? true : (var1.isBlockNormalCube(var2, var3, var4 - 1) ? true : (var1.isBlockNormalCube(var2, var3, var4 + 1) ? true : var1.isBlockNormalCube(var2, var3 - 1, var4))));
+	}
+
+	public void onBlockPlaced(World var1, int var2, int var3, int var4, int var5) {
+		int var6 = var1.getBlockMetadata(var2, var3, var4);
+		int var7 = var6 & 8;
+		var6 &= 7;
+		if(var5 == 1 && var1.isBlockNormalCube(var2, var3 - 1, var4)) {
+			var6 = 5 + var1.rand.nextInt(2);
+		}
+
+		if(var5 == 2 && var1.isBlockNormalCube(var2, var3, var4 + 1)) {
+			var6 = 4;
+		}
+
+		if(var5 == 3 && var1.isBlockNormalCube(var2, var3, var4 - 1)) {
+			var6 = 3;
+		}
+
+		if(var5 == 4 && var1.isBlockNormalCube(var2 + 1, var3, var4)) {
+			var6 = 2;
+		}
+
+		if(var5 == 5 && var1.isBlockNormalCube(var2 - 1, var3, var4)) {
+			var6 = 1;
+		}
+
+		var1.setBlockMetadataWithNotify(var2, var3, var4, var6 + var7);
+	}
+
+	public void onBlockAdded(World var1, int var2, int var3, int var4) {
+		if(var1.isBlockNormalCube(var2 - 1, var3, var4)) {
+			var1.setBlockMetadataWithNotify(var2, var3, var4, 1);
+		} else if(var1.isBlockNormalCube(var2 + 1, var3, var4)) {
+			var1.setBlockMetadataWithNotify(var2, var3, var4, 2);
+		} else if(var1.isBlockNormalCube(var2, var3, var4 - 1)) {
+			var1.setBlockMetadataWithNotify(var2, var3, var4, 3);
+		} else if(var1.isBlockNormalCube(var2, var3, var4 + 1)) {
+			var1.setBlockMetadataWithNotify(var2, var3, var4, 4);
+		} else if(var1.isBlockNormalCube(var2, var3 - 1, var4)) {
+			var1.setBlockMetadataWithNotify(var2, var3, var4, 5 + var1.rand.nextInt(2));
+		}
+
+		this.checkIfAttachedToBlock(var1, var2, var3, var4);
+	}
+
+	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
+		if(this.checkIfAttachedToBlock(var1, var2, var3, var4)) {
+			int var6 = var1.getBlockMetadata(var2, var3, var4) & 7;
+			boolean var7 = false;
+			if(!var1.isBlockNormalCube(var2 - 1, var3, var4) && var6 == 1) {
+				var7 = true;
+			}
+
+			if(!var1.isBlockNormalCube(var2 + 1, var3, var4) && var6 == 2) {
+				var7 = true;
+			}
+
+			if(!var1.isBlockNormalCube(var2, var3, var4 - 1) && var6 == 3) {
+				var7 = true;
+			}
+
+			if(!var1.isBlockNormalCube(var2, var3, var4 + 1) && var6 == 4) {
+				var7 = true;
+			}
+
+			if(!var1.isBlockNormalCube(var2, var3 - 1, var4) && var6 == 5) {
+				var7 = true;
+			}
+
+			if(var7) {
+				this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
+				var1.setBlockWithNotify(var2, var3, var4, 0);
+			}
+		}
+
+	}
+
+	private boolean checkIfAttachedToBlock(World var1, int var2, int var3, int var4) {
+		if(!this.canPlaceBlockAt(var1, var2, var3, var4)) {
+			this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
+			var1.setBlockWithNotify(var2, var3, var4, 0);
+			return false;
+		} else {
+			return true;
+		}
+	}
+
+	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
+		int var5 = var1.getBlockMetadata(var2, var3, var4) & 7;
+		float var6 = 3.0F / 16.0F;
+		if(var5 == 1) {
+			//this.setBlockBounds(0.0F, 0.2F, 0.5F - var6, var6 * 2.0F, 0.8F, 0.5F + var6);
+		} else if(var5 == 2) {
+			//this.setBlockBounds(1.0F - var6 * 2.0F, 0.2F, 0.5F - var6, 1.0F, 0.8F, 0.5F + var6);
+		} else if(var5 == 3) {
+			//this.setBlockBounds(0.5F - var6, 0.2F, 0.0F, 0.5F + var6, 0.8F, var6 * 2.0F);
+		} else if(var5 == 4) {
+			//this.setBlockBounds(0.5F - var6, 0.2F, 1.0F - var6 * 2.0F, 0.5F + var6, 0.8F, 1.0F);
+		} else {
+			var6 = 0.25F;
+			//this.setBlockBounds(0.5F - var6, 0.0F, 0.5F - var6, 0.5F + var6, 0.6F, 0.5F + var6);
+		}
+
+	}
+
+	public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
+		this.blockActivated(var1, var2, var3, var4, var5);
+	}
+
+	public boolean blockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5) {
+		int var6 = var1.getBlockMetadata(var2, var3, var4);
+		int var7 = var6 & 7;
+		int var8 = 8 - (var6 & 8);
+		var1.setBlockMetadataWithNotify(var2, var3, var4, var7 + var8);
+		var1.markBlocksDirty(var2, var3, var4, var2, var3, var4);
+		var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "random.click", 0.3F, var8 > 0 ? 0.6F : 0.5F);
+		var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
+		if(var7 == 1) {
+			var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
+		} else if(var7 == 2) {
+			var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
+		} else if(var7 == 3) {
+			var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
+		} else if(var7 == 4) {
+			var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
+		} else {
+			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
+		}
+
+		return true;
+	}
+
+	public void onBlockRemoval(World var1, int var2, int var3, int var4) {
+		int var5 = var1.getBlockMetadata(var2, var3, var4);
+		if((var5 & 8) > 0) {
+			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
+			int var6 = var5 & 7;
+			if(var6 == 1) {
+				var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
+			} else if(var6 == 2) {
+				var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
+			} else if(var6 == 3) {
+				var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
+			} else if(var6 == 4) {
+				var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
+			} else {
+				var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
+			}
+		}
+
+		super.onBlockRemoval(var1, var2, var3, var4);
+	}
+
+	public boolean isPoweringTo(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+		return (var1.getBlockMetadata(var2, var3, var4) & 8) > 0;
+	}
+
+	public boolean isIndirectlyPoweringTo(World var1, int var2, int var3, int var4, int var5) {
+		int var6 = var1.getBlockMetadata(var2, var3, var4);
+		if((var6 & 8) == 0) {
+			return false;
+		} else {
+			int var7 = var6 & 7;
+			return var7 == 5 && var5 == 1 ? true : (var7 == 4 && var5 == 2 ? true : (var7 == 3 && var5 == 3 ? true : (var7 == 2 && var5 == 4 ? true : var7 == 1 && var5 == 5)));
+		}
+	}
+
+	public boolean canProvidePower() {
+		return true;
+	}
+}
--- net/minecraft/src/GuiSelectWorld.java
+++ net/minecraft/src/GuiSelectWorld.java
@@ -16,11 +16,11 @@
 		File var1 = Minecraft.getMinecraftDir();
 
 		for(int var2 = 0; var2 < 5; ++var2) {
-			NBTTagCompound var3 = World.getLevelData(var1, "World" + (var2 + 1));
+			NBTTagCompound var3 = World.getLevelData(var1, "sbmfWorld" + (var2 + 1));
 			if(var3 == null) {
 				this.controlList.add(new GuiButton(var2, this.width / 2 - 100, this.height / 6 + 24 * var2, "- empty -"));
 			} else {
-				String var4 = "World " + (var2 + 1);
+				String var4 = "sbmfWorld " + (var2 + 1);
 				long var5 = var3.getLong("SizeOnDisk");
 				var4 = var4 + " (" + (float)(var5 / 1024L * 100L / 1024L) / 100.0F + " MB)";
 				this.controlList.add(new GuiButton(var2, this.width / 2 - 100, this.height / 6 + 24 * var2, var4));
@@ -32,7 +32,7 @@
 
 	protected String getSaveName(int var1) {
 		File var2 = Minecraft.getMinecraftDir();
-		return World.getLevelData(var2, "World" + var1) != null ? "World" + var1 : null;
+		return World.getLevelData(var2, "sbmfWorld" + var1) != null ? "sbmfWorld" + var1 : null;
 	}
 
 	public void initButtons() {
@@ -58,7 +58,7 @@
 		if(!this.selected) {
 			this.selected = true;
 			this.mc.playerController = new PlayerControllerSP(this.mc);
-			this.mc.startWorld("World" + var1);
+			this.mc.startWorld("sbmfWorld" + var1);
 			this.mc.displayGuiScreen((GuiScreen)null);
 		}
 	}
--- /dev/null
+++ net/minecraft/src/WorldGenSomeStrangeOre.java
@@ -1,0 +1,47 @@
+package net.minecraft.src;
+
+import java.util.Random;
+
+public class WorldGenSomeStrangeOre extends WorldGenerator {
+	private int minableBlockId;
+	private int numberOfBlocks;
+
+	public WorldGenSomeStrangeOre(int var1, int var2) {
+		this.minableBlockId = var1;
+		this.numberOfBlocks = var2;
+	}
+
+	public boolean generate(World var1, Random var2, int var3, int var4, int var5) {
+		float var6 = var2.nextFloat() * (float)Math.PI;
+		double var7 = (double)((float)(var3 + 8) + MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var9 = (double)((float)(var3 + 8) - MathHelper.sin(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var11 = (double)((float)(var5 + 8) + MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var13 = (double)((float)(var5 + 8) - MathHelper.cos(var6) * (float)this.numberOfBlocks / 8.0F);
+		double var15 = (double)(var4 + var2.nextInt(3) + 2);
+		double var17 = (double)(var4 + var2.nextInt(3) + 2);
+
+		for(int var19 = 0; var19 <= this.numberOfBlocks; ++var19) {
+			double var20 = var7 + (var9 - var7) * (double)var19 / (double)this.numberOfBlocks;
+			double var22 = var15 + (var17 - var15) * (double)var19 / (double)this.numberOfBlocks;
+			double var24 = var11 + (var13 - var11) * (double)var19 / (double)this.numberOfBlocks;
+			double var26 = var2.nextDouble() * (double)this.numberOfBlocks / 16.0D;
+			double var28 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * var26 + 1.0D;
+			double var30 = (double)(MathHelper.sin((float)var19 * (float)Math.PI / (float)this.numberOfBlocks) + 1.0F) * var26 + 1.0D;
+
+			for(int var32 = (int)(var20 - var28 / 2.0D); var32 <= (int)(var20 + var28 / 2.0D); ++var32) {
+				for(int var33 = (int)(var22 - var30 / 2.0D); var33 <= (int)(var22 + var30 / 2.0D); ++var33) {
+					for(int var34 = (int)(var24 - var28 / 2.0D); var34 <= (int)(var24 + var28 / 2.0D); ++var34) {
+						double var35 = ((double)var32 + 0.5D - var20) / (var28 / 2.0D);
+						double var37 = ((double)var33 + 0.5D - var22) / (var30 / 2.0D);
+						double var39 = ((double)var34 + 0.5D - var24) / (var28 / 2.0D);
+						if(var35 * var35 + var37 * var37 + var39 * var39 < 1.0D && var1.getBlockId(var32, var33, var34) == Block.smoothdeepslate.blockID) {
+							var1.setBlock(var32, var33, var34, this.minableBlockId);
+						}
+					}
+				}
+			}
+		}
+
+		return true;
+	}
+}
--- net/minecraft/src/GuiGameOver.java
+++ net/minecraft/src/GuiGameOver.java
@@ -36,9 +36,9 @@
 		this.drawGradientRect(0, 0, this.width, this.height, 1615855616, -1602211792);
 		GL11.glPushMatrix();
 		GL11.glScalef(2.0F, 2.0F, 2.0F);
-		this.drawCenteredString(this.fontRenderer, "Game over!", this.width / 2 / 2, 30, 16777215);
+		this.drawCenteredString(this.fontRenderer, "You despawned!", this.width / 2 / 2, 30, 16777215);
 		GL11.glPopMatrix();
-		this.drawCenteredString(this.fontRenderer, "Score: &e" + this.mc.thePlayer.getScore(), this.width / 2, 100, 16777215);
+		//this.drawCenteredString(this.fontRenderer, "Score: &e" + this.mc.thePlayer.getScore(), this.width / 2, 100, 16777215);
 		super.drawScreen(var1, var2, var3);
 	}
 
--- net/minecraft/src/EntityMinecart.java
+++ net/minecraft/src/EntityMinecart.java
@@ -346,13 +346,13 @@
 				}
 			}
 
-			this.rotationPitch = 0.0F;
+			//this.rotationPitch = 0.0F;
 			double var43 = this.prevPosX - this.posX;
 			double var44 = this.prevPosZ - this.posZ;
 			if(var43 * var43 + var44 * var44 > 0.001D) {
-				this.rotationYaw = (float)(Math.atan2(var44, var43) * 180.0D / Math.PI);
+				//this.rotationYaw = (float)(Math.atan2(var44, var43) * 180.0D / Math.PI);
 				if(this.isInReverse) {
-					this.rotationYaw += 180.0F;
+					//this.rotationYaw += 180.0F;
 				}
 			}
 
@@ -365,8 +365,8 @@
 			}
 
 			if(var13 < -170.0D || var13 >= 170.0D) {
-				this.rotationYaw += 180.0F;
-				this.isInReverse = !this.isInReverse;
+				//this.rotationYaw += 180.0F;
+				//this.isInReverse = !this.isInReverse;
 			}
 
 			this.setRotation(this.rotationYaw, this.rotationPitch);
--- net/minecraft/src/GameSettings.java
+++ net/minecraft/src/GameSettings.java
@@ -5,12 +5,14 @@
 import java.io.FileReader;
 import java.io.FileWriter;
 import java.io.PrintWriter;
+
 import net.minecraft.client.Minecraft;
+
 import org.lwjgl.input.Keyboard;
 
 public class GameSettings {
 	private static final String[] RENDER_DISTANCES = new String[]{"FAR", "NORMAL", "SHORT", "TINY"};
-	private static final String[] DIFFICULTY_LEVELS = new String[]{"Peaceful", "Easy", "Normal", "Hard"};
+	private static final String[] DIFFICULTY_LEVELS = new String[]{"coward", "loser", "normie", "Hard"};
 	public float musicVolume = 1.0F;
 	public float soundVolume = 1.0F;
 	public float mouseSensitivity = 0.5F;
@@ -20,85 +22,88 @@
 	public boolean anaglyph = false;
 	public boolean limitFramerate = false;
 	public boolean fancyGraphics = true;
-	public KeyBinding keyBindForward = new KeyBinding("Forward", 17);
-	public KeyBinding keyBindLeft = new KeyBinding("Left", 30);
-	public KeyBinding keyBindBack = new KeyBinding("Back", 31);
-	public KeyBinding keyBindRight = new KeyBinding("Right", 32);
-	public KeyBinding keyBindJump = new KeyBinding("Jump", 57);
-	public KeyBinding keyBindInventory = new KeyBinding("Inventory", 23);
-	public KeyBinding keyBindDrop = new KeyBinding("Drop", 16);
-	public KeyBinding keyBindChat = new KeyBinding("Chat", 20);
-	public KeyBinding keyBindToggleFog = new KeyBinding("Toggle fog", 33);
-	public KeyBinding keyBindSneak = new KeyBinding("Sneak", 42);
-	public KeyBinding[] keyBindings = new KeyBinding[]{this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindToggleFog};
+	public KeyBinding keyBindForward = new KeyBinding("Forward", Keyboard.KEY_W);
+	public KeyBinding keyBindLeft = new KeyBinding("Left", Keyboard.KEY_A);
+	public KeyBinding keyBindBack = new KeyBinding("Back", Keyboard.KEY_S);
+	public KeyBinding keyBindRight = new KeyBinding("Right", Keyboard.KEY_D);
+	public KeyBinding keyBindJump = new KeyBinding("Jump", Keyboard.KEY_SPACE);
+	public KeyBinding keyBindInventory = new KeyBinding("Inventory", Keyboard.KEY_E);
+	public KeyBinding keyBindDrop = new KeyBinding("Drop", Keyboard.KEY_Q);
+	public KeyBinding keyBindChat = new KeyBinding("Chat", Keyboard.KEY_T);
+	public KeyBinding keyBindToggleFog = new KeyBinding("Toggle fog", Keyboard.KEY_B);
+	public KeyBinding keyBindSneak = new KeyBinding("Sneak", Keyboard.KEY_LSHIFT);
+	public KeyBinding keyBindScreenshot = new KeyBinding("Screenshot", Keyboard.KEY_F2);
+	public KeyBinding keyBindDebug = new KeyBinding("Toggle Debug", Keyboard.KEY_F);
+	public KeyBinding[] keyBindings = new KeyBinding[]{this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindToggleFog, this.keyBindScreenshot, this.keyBindDebug};
 	protected Minecraft mc;
 	private File optionsFile;
 	public int numberOfOptions = 10;
-	public int difficulty = 2;
+	public int difficulty = 3;
 	public boolean thirdPersonView = false;
+	public boolean showDebugInfo = false;
 
-	public GameSettings(Minecraft var1, File var2) {
-		this.mc = var1;
-		this.optionsFile = new File(var2, "options.txt");
+	public GameSettings(Minecraft minecraft, File file) {
+		this.mc = minecraft;
+		this.optionsFile = new File(file, "sbmf_options.txt");
 		this.loadOptions();
 	}
 
 	public GameSettings() {
 	}
 
-	public String getKeyBindingDescription(int var1) {
-		return this.keyBindings[var1].keyDescription + ": " + Keyboard.getKeyName(this.keyBindings[var1].keyCode);
+	public String getKeyBindingDescription(int i1) {
+		return this.keyBindings[i1].keyDescription + ": " + Keyboard.getKeyName(this.keyBindings[i1].keyCode);
 	}
 
-	public void setKeyBinding(int var1, int var2) {
-		this.keyBindings[var1].keyCode = var2;
+	public void setKeyBinding(int i1, int i2) {
+		this.keyBindings[i1].keyCode = i2;
 		this.saveOptions();
 	}
 
-	public void setOptionFloatValue(int var1, float var2) {
-		if(var1 == 0) {
-			this.musicVolume = var2;
-			this.mc.sndManager.onSoundOptionsChanged();
-		}
-
-		if(var1 == 1) {
-			this.soundVolume = var2;
-			this.mc.sndManager.onSoundOptionsChanged();
-		}
-
-		if(var1 == 3) {
-			this.mouseSensitivity = var2;
+	public void setOptionFloatValue(int i1, float f2) {
+		if(i1 == 0) {
+			this.musicVolume = f2;
+			this.mc.sndManager.onSoundOptionsChanged();
+		}
+
+		if(i1 == 1) {
+			this.soundVolume = f2;
+			this.mc.sndManager.onSoundOptionsChanged();
+		}
+
+		if(i1 == 3) {
+			this.mouseSensitivity = f2;
 		}
 
 	}
 
-	public void setOptionValue(int var1, int var2) {
-		if(var1 == 2) {
+	public void setOptionValue(int i1, int i2) {
+		if(i1 == 2) {
 			this.invertMouse = !this.invertMouse;
 		}
 
-		if(var1 == 4) {
-			this.renderDistance = this.renderDistance + var2 & 3;
+		if(i1 == 4) {
+			this.renderDistance = this.renderDistance + i2 & 3;
 		}
 
-		if(var1 == 5) {
+		if(i1 == 5) {
 			this.viewBobbing = !this.viewBobbing;
 		}
 
-		if(var1 == 6) {
+		if(i1 == 6) {
 			this.anaglyph = !this.anaglyph;
 			this.mc.renderEngine.refreshTextures();
 		}
 
-		if(var1 == 7) {
+		if(i1 == 7) {
 			this.limitFramerate = !this.limitFramerate;
 		}
 
-		if(var1 == 8) {
-			this.difficulty = this.difficulty + var2 & 3;
+		if(i1 == 8) {
+			//this.difficulty = this.difficulty + i2 & 3;
 		}
 
-		if(var1 == 9) {
+		if(i1 == 9) {
 			this.fancyGraphics = !this.fancyGraphics;
 			this.mc.renderGlobal.loadRenderers();
 		}
@@ -106,16 +111,16 @@
 		this.saveOptions();
 	}
 
-	public int isSlider(int var1) {
-		return var1 == 0 ? 1 : (var1 == 1 ? 1 : (var1 == 3 ? 1 : 0));
-	}
-
-	public float getOptionFloatValue(int var1) {
-		return var1 == 0 ? this.musicVolume : (var1 == 1 ? this.soundVolume : (var1 == 3 ? this.mouseSensitivity : 0.0F));
-	}
-
-	public String getOptionDisplayString(int var1) {
-		return var1 == 0 ? "Music: " + (this.musicVolume > 0.0F ? (int)(this.musicVolume * 100.0F) + "%" : "OFF") : (var1 == 1 ? "Sound: " + (this.soundVolume > 0.0F ? (int)(this.soundVolume * 100.0F) + "%" : "OFF") : (var1 == 2 ? "Invert mouse: " + (this.invertMouse ? "ON" : "OFF") : (var1 == 3 ? (this.mouseSensitivity == 0.0F ? "Sensitivity: *yawn*" : (this.mouseSensitivity == 1.0F ? "Sensitivity: HYPERSPEED!!!" : "Sensitivity: " + (int)(this.mouseSensitivity * 200.0F) + "%")) : (var1 == 4 ? "Render distance: " + RENDER_DISTANCES[this.renderDistance] : (var1 == 5 ? "View bobbing: " + (this.viewBobbing ? "ON" : "OFF") : (var1 == 6 ? "3d anaglyph: " + (this.anaglyph ? "ON" : "OFF") : (var1 == 7 ? "Limit framerate: " + (this.limitFramerate ? "ON" : "OFF") : (var1 == 8 ? "Difficulty: " + DIFFICULTY_LEVELS[this.difficulty] : (var1 == 9 ? "Graphics: " + (this.fancyGraphics ? "FANCY" : "FAST") : "")))))))));
+	public int isSlider(int i1) {
+		return i1 == 0 ? 1 : (i1 == 1 ? 1 : (i1 == 3 ? 1 : 0));
+	}
+
+	public float getOptionFloatValue(int i1) {
+		return i1 == 0 ? this.musicVolume : (i1 == 1 ? this.soundVolume : (i1 == 3 ? this.mouseSensitivity : 0.0F));
+	}
+
+	public String getOptionDisplayString(int i1) {
+		return i1 == 0 ? "Music: " + (this.musicVolume > 0.0F ? (int)(this.musicVolume * 100.0F) + "%" : "OFF") : (i1 == 1 ? "Sound: " + (this.soundVolume > 0.0F ? (int)(this.soundVolume * 100.0F) + "%" : "OFF") : (i1 == 2 ? "Invert mouse: " + (this.invertMouse ? "ON" : "OFF") : (i1 == 3 ? (this.mouseSensitivity == 0.0F ? "Sensitivity: *yawn*" : (this.mouseSensitivity == 1.0F ? "Sensitivity: HYPERSPEED!!!" : "Sensitivity: " + (int)(this.mouseSensitivity * 200.0F) + "%")) : (i1 == 4 ? "Render distance: " + RENDER_DISTANCES[this.renderDistance] : (i1 == 5 ? "View bobbing: " + (this.viewBobbing ? "ON" : "OFF") : (i1 == 6 ? "3d anaglyph: " + (this.anaglyph ? "ON" : "OFF") : (i1 == 7 ? "Limit framerate: " + (this.limitFramerate ? "ON" : "OFF") : (i1 == 8 ? "Difficulty: " + DIFFICULTY_LEVELS[this.difficulty] : (i1 == 9 ? "Graphics: " + (this.fancyGraphics ? "FANCY" : "FAST") : "")))))))));
 	}
 
 	public void loadOptions() {
@@ -124,96 +129,92 @@
 				return;
 			}
 
-			BufferedReader var1 = new BufferedReader(new FileReader(this.optionsFile));
-			String var2 = "";
-
-			while(true) {
-				var2 = var1.readLine();
-				if(var2 == null) {
-					var1.close();
-					break;
-				}
-
-				String[] var3 = var2.split(":");
-				if(var3[0].equals("music")) {
-					this.musicVolume = this.parseFloat(var3[1]);
-				}
-
-				if(var3[0].equals("sound")) {
-					this.soundVolume = this.parseFloat(var3[1]);
-				}
-
-				if(var3[0].equals("mouseSensitivity")) {
-					this.mouseSensitivity = this.parseFloat(var3[1]);
-				}
-
-				if(var3[0].equals("invertYMouse")) {
-					this.invertMouse = var3[1].equals("true");
-				}
-
-				if(var3[0].equals("viewDistance")) {
-					this.renderDistance = Integer.parseInt(var3[1]);
-				}
-
-				if(var3[0].equals("bobView")) {
-					this.viewBobbing = var3[1].equals("true");
-				}
-
-				if(var3[0].equals("anaglyph3d")) {
-					this.anaglyph = var3[1].equals("true");
-				}
-
-				if(var3[0].equals("limitFramerate")) {
-					this.limitFramerate = var3[1].equals("true");
-				}
-
-				if(var3[0].equals("difficulty")) {
-					this.difficulty = Integer.parseInt(var3[1]);
-				}
-
-				if(var3[0].equals("fancyGraphics")) {
-					this.fancyGraphics = var3[1].equals("true");
-				}
-
-				for(int var4 = 0; var4 < this.keyBindings.length; ++var4) {
-					if(var3[0].equals("key_" + this.keyBindings[var4].keyDescription)) {
-						this.keyBindings[var4].keyCode = Integer.parseInt(var3[1]);
+			BufferedReader bufferedReader1 = new BufferedReader(new FileReader(this.optionsFile));
+			String string2 = "";
+
+			while((string2 = bufferedReader1.readLine()) != null) {
+				String[] string3 = string2.split(":");
+				if(string3[0].equals("music")) {
+					this.musicVolume = this.parseFloat(string3[1]);
+				}
+
+				if(string3[0].equals("sound")) {
+					this.soundVolume = this.parseFloat(string3[1]);
+				}
+
+				if(string3[0].equals("mouseSensitivity")) {
+					this.mouseSensitivity = this.parseFloat(string3[1]);
+				}
+
+				if(string3[0].equals("invertYMouse")) {
+					this.invertMouse = string3[1].equals("true");
+				}
+
+				if(string3[0].equals("viewDistance")) {
+					this.renderDistance = Integer.parseInt(string3[1]);
+				}
+
+				if(string3[0].equals("bobView")) {
+					this.viewBobbing = string3[1].equals("true");
+				}
+
+				if(string3[0].equals("anaglyph3d")) {
+					this.anaglyph = string3[1].equals("true");
+				}
+
+				if(string3[0].equals("limitFramerate")) {
+					this.limitFramerate = string3[1].equals("true");
+				}
+
+				if(string3[0].equals("difficulty")) {
+					this.difficulty = Integer.parseInt(string3[1]);
+				}
+
+				if(string3[0].equals("fancyGraphics")) {
+					this.fancyGraphics = string3[1].equals("true");
+				}
+
+				for(int i4 = 0; i4 < this.keyBindings.length; ++i4) {
+					if(string3[0].equals("key_" + this.keyBindings[i4].keyDescription)) {
+						this.keyBindings[i4].keyCode = Integer.parseInt(string3[1]);
 					}
 				}
 			}
-		} catch (Exception var5) {
+
+			bufferedReader1.close();
+		} catch (Exception exception5) {
 			System.out.println("Failed to load options");
-			var5.printStackTrace();
+			exception5.printStackTrace();
 		}
 
 	}
 
-	private float parseFloat(String var1) {
-		return var1.equals("true") ? 1.0F : (var1.equals("false") ? 0.0F : Float.parseFloat(var1));
+	private float parseFloat(String string1) {
+		return string1.equals("true") ? 1.0F : (string1.equals("false") ? 0.0F : Float.parseFloat(string1));
 	}
 
 	public void saveOptions() {
 		try {
-			PrintWriter var1 = new PrintWriter(new FileWriter(this.optionsFile));
-			var1.println("music:" + this.musicVolume);
-			var1.println("sound:" + this.soundVolume);
-			var1.println("invertYMouse:" + this.invertMouse);
-			var1.println("mouseSensitivity:" + this.mouseSensitivity);
-			var1.println("viewDistance:" + this.renderDistance);
-			var1.println("bobView:" + this.viewBobbing);
-			var1.println("anaglyph3d:" + this.anaglyph);
-			var1.println("limitFramerate:" + this.limitFramerate);
-			var1.println("difficulty:" + this.difficulty);
-			var1.println("fancyGraphics:" + this.fancyGraphics);
+			PrintWriter printWriter1 = new PrintWriter(new FileWriter(this.optionsFile));
+			printWriter1.println("music:" + this.musicVolume);
+			printWriter1.println("sound:" + this.soundVolume);
+			printWriter1.println("invertYMouse:" + this.invertMouse);
+			printWriter1.println("mouseSensitivity:" + this.mouseSensitivity);
+			printWriter1.println("viewDistance:" + this.renderDistance);
+			printWriter1.println("bobView:" + this.viewBobbing);
+			printWriter1.println("anaglyph3d:" + this.anaglyph);
+			printWriter1.println("limitFramerate:" + this.limitFramerate);
+			printWriter1.println("difficulty:" + this.difficulty);
+			printWriter1.println("fancyGraphics:" + this.fancyGraphics);
 
-			for(int var2 = 0; var2 < this.keyBindings.length; ++var2) {
-				var1.println("key_" + this.keyBindings[var2].keyDescription + ":" + this.keyBindings[var2].keyCode);
+			for(int i2 = 0; i2 < this.keyBindings.length; ++i2) {
+				printWriter1.println("key_" + this.keyBindings[i2].keyDescription + ":" + this.keyBindings[i2].keyCode);
 			}
 
-			var1.close();
-		} catch (Exception var3) {
+			printWriter1.close();
+		} catch (Exception exception3) {
 			System.out.println("Failed to save options");
-			var3.printStackTrace();
+			exception3.printStackTrace();
 		}
 
 	}
--- net/minecraft/src/BlockGlass.java
+++ net/minecraft/src/BlockGlass.java
@@ -8,6 +8,6 @@
 	}
 
 	public int quantityDropped(Random var1) {
-		return 0;
+		return 1;
 	}
 }
